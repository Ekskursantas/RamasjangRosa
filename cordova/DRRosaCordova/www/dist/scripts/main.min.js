/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var PIXI = __webpack_require__(2);
	var AssetLoader_1 = __webpack_require__(3);
	var Initializer_1 = __webpack_require__(192);
	var Logger_1 = __webpack_require__(4);
	var Main = (function (_super) {
	    __extends(Main, _super);
	    function Main(media_path) {
	        var _this = _super.call(this) || this;
	        _this.needToRender = true;
	        AssetLoader_1.AssetLoader.MEDIA_PATH = media_path;
	        console.log("MAIN constructor AssetLoader.MEDIA_PATH == " + AssetLoader_1.AssetLoader.MEDIA_PATH);
	        Logger_1.Logger.IS_DEV = true;
	        _this.init();
	        return _this;
	    }
	    Main.prototype.init = function () {
	        Logger_1.Logger.log(this, "MAIN init");
	        this.initializer = new Initializer_1.Initializer();
	        this.initializer.startGame("testGame");
	    };
	    Main.prototype.destroy = function () {
	        Logger_1.Logger.log(this, "Main destroy");
	    };
	    Main.strReplace = function (str, searchStr, subStr) {
	        var retStr = "";
	        if (str && searchStr && subStr) {
	            retStr = str.replace(searchStr, subStr);
	        }
	        return retStr;
	    };
	    return Main;
	}(PIXI.Sprite));
	exports.Main = Main;
	(function ($) {
	    $(window).on("load", function () {
	        console.log("", "MAIN.ts load");
	        $(document).trigger("startRosaLocal", ["media/"]);
	    });
	    $(document).ready(function () {
	        console.log("ready!");
	    });
	    $(document).on('startRosaLocal', function (event, media_path) {
	        console.log("", "MAIN.ts startRosaLocal media_path == " + media_path);
	        new Main(media_path);
	    });
	    $(document).on('startRosa', function (event, media_path) {
	        console.log("", "MAIN.ts startRosa media_path == " + media_path);
	        new Main(media_path);
	    });
	    $(document).on('deviceready', function (event, media_path) {
	        console.log("", "MAIN.ts deviceready");
	        new Main(media_path);
	    });
	})(jQuery);


/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = PIXI;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Logger_1 = __webpack_require__(4);
	var Model_1 = __webpack_require__(5);
	var TypedDBFactory_1 = __webpack_require__(6);
	var AssetLoader = (function (_super) {
	    __extends(AssetLoader, _super);
	    function AssetLoader() {
	        var _this = _super.call(this) || this;
	        _this._sprites = {};
	        _this.loadedData = [];
	        _this.characterAssets = {};
	        _this.update = function () {
	            if (AssetLoader.getInstance().stage && AssetLoader.getInstance().stage.children.length > 0) {
	                var bunny = AssetLoader.getInstance().stage.getChildAt(0);
	                _this._renderer.render(AssetLoader.getInstance().stage);
	                var now = new Date().getTime();
	                dragonBones.WorldClock.clock.advanceTime((now - _this.timePassed) * 0.001);
	                _this.timePassed = now;
	            }
	            requestAnimationFrame(_this.update);
	        };
	        _this.onAssetsLoaded = function (loader, resources) {
	            Logger_1.Logger.log(_this, "onAssetsLoaded  resources == " + resources);
	            _this._factory = dragonBones.PixiFactory.factory;
	            _this._typeddb = new TypedDBFactory_1.TypedDBFactory(_this._factory);
	            var dragonBonesData = _this.factory.parseDragonBonesData(resources["dragonBonesData"].data);
	            Logger_1.Logger.log(_this, "MainView loadCompleteHandler  dragonBonesData === " + dragonBonesData);
	            var textureAtlasData = _this.factory.parseTextureAtlasData(resources["textureSkeletonData"].data, resources["textureSkeleton"].texture);
	            Logger_1.Logger.log(_this, "MainView loadCompleteHandler  textureAtlasData === " + textureAtlasData);
	            var textureAtlasData0 = _this.factory.parseTextureAtlasData(resources["textureData0"].data, resources["texture0"].texture);
	            var textureAtlasData1 = _this.factory.parseTextureAtlasData(resources["textureData1"].data, resources["texture1"].texture);
	            var textureAtlasData2 = _this.factory.parseTextureAtlasData(resources["textureData2"].data, resources["texture2"].texture);
	            _this.factory.addTextureAtlasData(textureAtlasData0, "atlas0");
	            _this.factory.addTextureAtlasData(textureAtlasData1, "atlas1");
	            _this.factory.addTextureAtlasData(textureAtlasData2, "atlas2");
	            _this._onCompleteCallback();
	            _this._onCompleteCallback = null;
	        };
	        _this.additionalAssetsLoaded = function (loader, resources) {
	            Logger_1.Logger.log(_this, "additionalAssetsLoaded  resources == " + resources);
	            var characterName = Model_1.Model.getInstance().getSelectedCharName();
	            var textureName = "texture-" + characterName;
	            var textureAtlasData = _this.factory.parseTextureAtlasData(resources[textureName].data, resources[textureName].texture);
	            _this._onCompleteCallback();
	            _this._onCompleteCallback = null;
	        };
	        _this.loadProgressHandler = function (loader, resource) {
	        };
	        return _this;
	    }
	    Object.defineProperty(AssetLoader.prototype, "typeddb", {
	        get: function () {
	            return this._typeddb;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AssetLoader.prototype, "assetLoader", {
	        get: function () {
	            return this._assetLoader;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AssetLoader.getInstance = function () {
	        if (AssetLoader._instance == null) {
	            AssetLoader._instance = new AssetLoader();
	        }
	        return AssetLoader._instance;
	    };
	    Object.defineProperty(AssetLoader, "instantiated", {
	        get: function () {
	            return Boolean(AssetLoader._instance);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AssetLoader.destroySingleton = function () {
	        if (AssetLoader.instantiated) {
	            AssetLoader._instance.destroy();
	        }
	    };
	    Object.defineProperty(AssetLoader.prototype, "sprites", {
	        get: function () {
	            return this._sprites;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AssetLoader.prototype, "renderer", {
	        get: function () {
	            return this._renderer;
	        },
	        set: function (value) {
	            this._renderer = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AssetLoader.prototype, "factory", {
	        get: function () {
	            return this._factory;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AssetLoader.prototype.init = function (onCompleteCallback) {
	        Logger_1.Logger.log(this, "init");
	        Logger_1.Logger.log(this, "init  AssetLoader.STAGE_WIDTH == " + AssetLoader.STAGE_WIDTH);
	        Logger_1.Logger.log(this, "init  AssetLoader.STAGE_HEIGHT == " + AssetLoader.STAGE_HEIGHT);
	        Logger_1.Logger.log(this, "init  window.devicePixelRatio == " + window.devicePixelRatio);
	        var devicePixelRatio = 1;
	        this._onCompleteCallback = onCompleteCallback;
	        AssetLoader.STAGE_WIDTH *= devicePixelRatio;
	        AssetLoader.STAGE_HEIGHT *= devicePixelRatio;
	        Logger_1.Logger.log(this, "init  NOW AssetLoader.STAGE_WIDTH == " + AssetLoader.STAGE_WIDTH);
	        Logger_1.Logger.log(this, "init  NOW AssetLoader.STAGE_HEIGHT == " + AssetLoader.STAGE_HEIGHT);
	        this.rosaCanvas = document.getElementById('canvas_rosa');
	        Logger_1.Logger.log(this, "init  this.rosaCanvas == " + this.rosaCanvas);
	        this._renderer = PIXI.autoDetectRenderer(AssetLoader.STAGE_WIDTH, AssetLoader.STAGE_HEIGHT, { view: this.rosaCanvas });
	        AssetLoader.getInstance().stage = new PIXI.Container();
	        AssetLoader.getInstance().stage.interactive = true;
	        AssetLoader.getInstance().stage.hitArea = new PIXI.Rectangle(0, 0, AssetLoader.STAGE_WIDTH, AssetLoader.STAGE_HEIGHT);
	        Logger_1.Logger.log(this, "AssetLoader.getInstance().stage == " + AssetLoader.getInstance().stage);
	        this.loadAssets();
	        this.timePassed = new Date().getTime();
	        this.update();
	    };
	    AssetLoader.prototype.loadAssets = function () {
	        Logger_1.Logger.log(this, "loadAssets");
	        this._assetLoader = PIXI.loader;
	        this._assetLoader.on("progress", this.loadProgressHandler);
	        this._assetLoader.on('complete', this.onAssetsLoaded);
	        this._assetLoader
	            .add("textureSkeletonData", AssetLoader.MEDIA_PATH + "rosa/scenes/skeleton_ske_tex.json")
	            .add("textureSkeleton", AssetLoader.MEDIA_PATH + "rosa/scenes/skeleton_ske_tex.png")
	            .add("dragonBonesData", AssetLoader.MEDIA_PATH + "rosa/scenes/skeleton_ske.json")
	            .add("textureData0", AssetLoader.MEDIA_PATH + "rosa/common/dragonbones/texture0.json")
	            .add("textureData1", AssetLoader.MEDIA_PATH + "rosa/common/dragonbones/texture1.json")
	            .add("textureData2", AssetLoader.MEDIA_PATH + "rosa/common/dragonbones/texture2.json")
	            .add("texture0", AssetLoader.MEDIA_PATH + "rosa/common/dragonbones/texture0.png")
	            .add("texture1", AssetLoader.MEDIA_PATH + "rosa/common/dragonbones/texture1.png")
	            .add("texture2", AssetLoader.MEDIA_PATH + "rosa/common/dragonbones/texture2.png")
	            .add("BackArrow", AssetLoader.MEDIA_PATH + "rosa/system/BackArrow.png")
	            .add("Scene3_bamse_bg", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds-bamse/Scene3_bamse_bg.jpg")
	            .add("Scene4_bamse_bg", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds-bamse/Scene4_bamse_bg.jpg")
	            .add("Scene3_christian_bg", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds-christian/Scene3_christian_bg.jpg")
	            .add("Scene4_christian_bg", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds-christian/Scene4_christian_bg.jpg")
	            .add("Scene3_mille_bg", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds-mille/Scene3_mille_bg.jpg")
	            .add("Scene4_mille_bg", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds-mille/Scene4_mille_bg.jpg")
	            .add("Scene3_skaeg_bg", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds-skaeg/Scene3_skaeg_bg.jpg")
	            .add("Scene4_skaeg_bg", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds-skaeg/Scene4_skaeg_bg.jpg")
	            .add("Scene0_bg", AssetLoader.MEDIA_PATH + "rosa/common/preloaded-backgrounds/Scene0_bg.jpg")
	            .add("Scene1_bg", AssetLoader.MEDIA_PATH + "rosa/common/preloaded-backgrounds/Scene1_bg.jpg")
	            .add("04_Rosa_02-billeder-af-farve", AssetLoader.MEDIA_PATH + "rosa/sounds/04_Rosa_02-billeder-af-farve.mp3")
	            .add("04_Rosa_02-billeder-af-form", AssetLoader.MEDIA_PATH + "rosa/sounds/04_Rosa_02-billeder-af-form.mp3")
	            .add("04_Rosa_02-billeder-af-smag", AssetLoader.MEDIA_PATH + "rosa/sounds/04_Rosa_02-billeder-af-smag.mp3")
	            .add("08_Rosa_02-saa-er-kagen-klar-til-ovn", AssetLoader.MEDIA_PATH + "rosa/sounds/08_Rosa_02-saa-er-kagen-klar-til-ovn.mp3")
	            .add("08_Rosa_04-vil-du-saette-aeggeuret", AssetLoader.MEDIA_PATH + "rosa/sounds/08_Rosa_04-vil-du-saette-aeggeuret.mp3")
	            .add("08_Rosa_05-saa-er-der-vist-en-kage-der-vil-ud-af-ovnen", AssetLoader.MEDIA_PATH + "rosa/sounds/08_Rosa_05-saa-er-der-vist-en-kage-der-vil-ud-af-ovnen.mp3")
	            .add("08_Rosa_06-uhm-den-dufter-godt", AssetLoader.MEDIA_PATH + "rosa/sounds/08_Rosa_06-uhm-den-dufter-godt.mp3")
	            .add("10_Rosa_01-saa-er-kagen-faerdig-lad-os-komme-afsted-med-den", AssetLoader.MEDIA_PATH + "rosa/sounds/10_Rosa_01-saa-er-kagen-faerdig-lad-os-komme-afsted-med-den.mp3")
	            .add("10_Rosa_03-lad-os-komme-afsted-med-den", AssetLoader.MEDIA_PATH + "rosa/sounds/10_Rosa_03-lad-os-komme-afsted-med-den.mp3")
	            .add("11_Rosa_01-ok-nu-ringer-jegpaa-saa", AssetLoader.MEDIA_PATH + "rosa/sounds/11_Rosa_01-ok-nu-ringer-jegpaa-saa.mp3")
	            .add("11_Rosa_02-det-harvaeret-superfedt-at-bage-med-dig", AssetLoader.MEDIA_PATH + "rosa/sounds/11_Rosa_02-det-harvaeret-superfedt-at-bage-med-dig.mp3")
	            .add("11_Rosa_03-held-og-lykke-med-at-aflevere-kagen", AssetLoader.MEDIA_PATH + "rosa/sounds/11_Rosa_03-held-og-lykke-med-at-aflevere-kagen.mp3")
	            .add("12_Rosa_01-godt-gaaet", AssetLoader.MEDIA_PATH + "rosa/sounds/12_Rosa_01-godt-gaaet.mp3")
	            .add("diceSwing3", AssetLoader.MEDIA_PATH + "rosa/sounds/diceSwing3.mp3")
	            .add("ffffffp", AssetLoader.MEDIA_PATH + "rosa/sounds/ffffffp.mp3")
	            .add("fx_hologram_zapzoing", AssetLoader.MEDIA_PATH + "rosa/sounds/fx_hologram_zapzoing.mp3")
	            .add("fx_mysterio_boot_dr", AssetLoader.MEDIA_PATH + "rosa/sounds/fx_mysterio_boot_dr.mp3")
	            .add("fx_swish01_low", AssetLoader.MEDIA_PATH + "rosa/sounds/fx_swish01_low.mp3")
	            .add("fx_swish02", AssetLoader.MEDIA_PATH + "rosa/sounds/fx_swish02.mp3")
	            .add("fx_tok", AssetLoader.MEDIA_PATH + "rosa/sounds/fx_tok.mp3")
	            .add("hardStep_A", AssetLoader.MEDIA_PATH + "rosa/sounds/hardStep_A.mp3")
	            .add("hardStep_B", AssetLoader.MEDIA_PATH + "rosa/sounds/hardStep_B.mp3")
	            .add("rub-squeak", AssetLoader.MEDIA_PATH + "rosa/sounds/rub-squeak.mp3")
	            .add("s03-skridt-1", AssetLoader.MEDIA_PATH + "rosa/sounds/s03-skridt-1.mp3")
	            .add("s03-skridt-A", AssetLoader.MEDIA_PATH + "rosa/sounds/s03-skridt-A.mp3")
	            .add("s03-skridt-B", AssetLoader.MEDIA_PATH + "rosa/sounds/s03-skridt-B.mp3")
	            .add("s04-kamera", AssetLoader.MEDIA_PATH + "rosa/sounds/s04-kamera.mp3")
	            .add("s05-magnetklik_01", AssetLoader.MEDIA_PATH + "rosa/sounds/s05-magnetklik_01.mp3")
	            .add("s05-magnetklik_02", AssetLoader.MEDIA_PATH + "rosa/sounds/s05-magnetklik_02.mp3")
	            .add("s06-dej-aaeg", AssetLoader.MEDIA_PATH + "rosa/sounds/s06-dej-aaeg.mp3")
	            .add("s06-ny_kakao_01", AssetLoader.MEDIA_PATH + "rosa/sounds/s06-ny_kakao_01.mp3")
	            .add("s06-ny_maelk_01", AssetLoader.MEDIA_PATH + "rosa/sounds/s06-ny_maelk_01.mp3")
	            .add("s06-ny_maelk_haelder", AssetLoader.MEDIA_PATH + "rosa/sounds/s06-ny_maelk_haelder.mp3")
	            .add("s06-ny_mel_01", AssetLoader.MEDIA_PATH + "rosa/sounds/s06-ny_mel_01.mp3")
	            .add("s06-ny_mel_kommer_i_01", AssetLoader.MEDIA_PATH + "rosa/sounds/s06-ny_mel_kommer_i_01.mp3")
	            .add("s06-ny_olie_01", AssetLoader.MEDIA_PATH + "rosa/sounds/s06-ny_olie_01.mp3")
	            .add("s06-ny_olie_02", AssetLoader.MEDIA_PATH + "rosa/sounds/s06-ny_olie_02.mp3")
	            .add("s06-ny_sukker_01", AssetLoader.MEDIA_PATH + "rosa/sounds/s06-ny_sukker_01.mp3")
	            .add("s06-ny_sukker_haelder03", AssetLoader.MEDIA_PATH + "rosa/sounds/s06-ny_sukker_haelder03.mp3")
	            .add("s08a-dej-kant-ny", AssetLoader.MEDIA_PATH + "rosa/sounds/s08a-dej-kant-ny.mp3")
	            .add("s08a-dej-splat", AssetLoader.MEDIA_PATH + "rosa/sounds/s08a-dej-splat.mp3")
	            .add("s08b-ny_ovn_01", AssetLoader.MEDIA_PATH + "rosa/sounds/s08b-ny_ovn_01.mp3")
	            .add("s08b-ny_ovn_02", AssetLoader.MEDIA_PATH + "rosa/sounds/s08b-ny_ovn_02.mp3")
	            .add("s08b-ny_ovn_03", AssetLoader.MEDIA_PATH + "rosa/sounds/s08b-ny_ovn_03.mp3")
	            .add("s08b-ny_ovn_04", AssetLoader.MEDIA_PATH + "rosa/sounds/s08b-ny_ovn_04.mp3")
	            .add("s08b-nyt_ur_ding03", AssetLoader.MEDIA_PATH + "rosa/sounds/s08b-nyt_ur_ding03.mp3")
	            .add("s08b-nyt_ur_saettes01", AssetLoader.MEDIA_PATH + "rosa/sounds/s08b-nyt_ur_saettes01.mp3")
	            .add("s08b-nyt_ur_tikker02", AssetLoader.MEDIA_PATH + "rosa/sounds/s08b-nyt_ur_tikker02.mp3")
	            .add("s11-Bamse-speaks-nej-en-laekker-kage-du-har-bagt", AssetLoader.MEDIA_PATH + "rosa/sounds/s11-Bamse-speaks-nej-en-laekker-kage-du-har-bagt.mp3")
	            .add("s11-door_open_01", AssetLoader.MEDIA_PATH + "rosa/sounds/s11-door_open_01.mp3")
	            .add("s11-klokke_02", AssetLoader.MEDIA_PATH + "rosa/sounds/s11-klokke_02.mp3")
	            .add("scene0Swing", AssetLoader.MEDIA_PATH + "rosa/sounds/scene0Swing.mp3")
	            .add("smallTableSound1", AssetLoader.MEDIA_PATH + "rosa/sounds/smallTableSound1.mp3")
	            .add("smallTableSound2", AssetLoader.MEDIA_PATH + "rosa/sounds/smallTableSound2.mp3")
	            .add("smallTableSound3", AssetLoader.MEDIA_PATH + "rosa/sounds/smallTableSound3.mp3")
	            .add("smallTableSound4", AssetLoader.MEDIA_PATH + "rosa/sounds/smallTableSound4.mp3")
	            .add("smallTableSound5", AssetLoader.MEDIA_PATH + "rosa/sounds/smallTableSound5.mp3")
	            .add("smallTableSound6", AssetLoader.MEDIA_PATH + "rosa/sounds/smallTableSound6.mp3")
	            .add("stufIntheback", AssetLoader.MEDIA_PATH + "rosa/sounds/stufIntheback.mp3")
	            .add("swish_fast_low", AssetLoader.MEDIA_PATH + "rosa/sounds/swish_fast_low.mp3")
	            .add("swish", AssetLoader.MEDIA_PATH + "rosa/sounds/swish.mp3")
	            .add("triple_swoosh_hi", AssetLoader.MEDIA_PATH + "rosa/sounds/triple_swoosh_hi.mp3")
	            .add("s03-Bamse-speaks-Hov-hvad-var-det-2", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/bamse/hov/s03-Bamse-speaks-Hov-hvad-var-det-2.mp3")
	            .add("s03-Bamse-speaks-Hov-hvad-var-det", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/bamse/hov/s03-Bamse-speaks-Hov-hvad-var-det.mp3")
	            .add("s03-bamse-speaks-intro-bite00-molodi", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/bamse/idle/s03-bamse-speaks-intro-bite00-molodi.mp3")
	            .add("s03-bamse-speaks-intro-bite01-jodlelohoohoo", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/bamse/idle/s03-bamse-speaks-intro-bite01-jodlelohoohoo.mp3")
	            .add("s03-bamse-speaks-intro-bite02-jodlesangen", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/bamse/idle/s03-bamse-speaks-intro-bite02-jodlesangen.mp3")
	            .add("s03-bamse-speaks-intro-bite04-bummelummelum", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/bamse/idle/s03-bamse-speaks-intro-bite04-bummelummelum.mp3")
	            .add("s03-bamse-speaks-intro-bite05-sulten", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/bamse/idle/s03-bamse-speaks-intro-bite05-sulten.mp3")
	            .add("S11_bamse_thanks", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/bamse/slut/S11_bamse_thanks.mp3")
	            .add("s11-01-Bamse-speaks-nej-en-laekker-kage-du-har-bagt", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/bamse/slut/s11-01-Bamse-speaks-nej-en-laekker-kage-du-har-bagt.mp3")
	            .add("s03-Bamse-speaks-ikke-set-foer", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/bamse/spotted/s03-Bamse-speaks-ikke-set-foer.mp3")
	            .add("s03-kristian-speaks-hmm", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/kristian/hov/s03-kristian-speaks-hmm.mp3")
	            .add("s03-kristian-speaks-hoerte_du_det", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/kristian/hov/s03-kristian-speaks-hoerte_du_det.mp3")
	            .add("s03-kristian-speaks-hov_hvad_var_det", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/kristian/hov/s03-kristian-speaks-hov_hvad_var_det.mp3")
	            .add("s03-kristian-speaks-sikke_en_underlig_lyd", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/kristian/hov/s03-kristian-speaks-sikke_en_underlig_lyd.mp3")
	            .add("s03-kristian-speaks-idle1", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/kristian/idle/s03-kristian-speaks-idle1.mp3")
	            .add("s03-kristian-speaks-idle2", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/kristian/idle/s03-kristian-speaks-idle2.mp3")
	            .add("s03-kristian-speaks-idle3", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/kristian/idle/s03-kristian-speaks-idle3.mp3")
	            .add("S11_christian_thanks", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/kristian/slut/S11_christian_thanks.mp3")
	            .add("s11-01-kristian-speaks-ej_hvor_ser_den_kage_laekker_ud_er_den_til_mig", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/kristian/slut/s11-01-kristian-speaks-ej_hvor_ser_den_kage_laekker_ud_er_den_til_mig.mp3")
	            .add("s03-kristian-speaks-hvad_i_alverden_ikke_set_foer", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/kristian/spotted/s03-kristian-speaks-hvad_i_alverden_ikke_set_foer.mp3")
	            .add("s03-mille-speaks-hvad_er_det_for_en_underlig_lyd", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/hov/s03-mille-speaks-hvad_er_det_for_en_underlig_lyd.mp3")
	            .add("s03-mille-speaks-jeg_synes_jeg_horte_noget", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/hov/s03-mille-speaks-jeg_synes_jeg_horte_noget.mp3")
	            .add("s03_mille_speaks_gribe_himstergimsfuglen", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/idle/s03_mille_speaks_gribe_himstergimsfuglen.mp3")
	            .add("s03_mille_speaks_hvorfor_virker_kameraet_nu_ikke", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/idle/s03_mille_speaks_hvorfor_virker_kameraet_nu_ikke.mp3")
	            .add("s03-mille_speaks_pas_paa_fuglen_noedlander", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/idle/s03-mille_speaks_pas_paa_fuglen_noedlander.mp3")
	            .add("s11_1_mille_speaks_hyggeligt_du_kom", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/slut/s11_1_mille_speaks_hyggeligt_du_kom.mp3")
	            .add("s11_2_mille_speaks_megasjov_kage", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/slut/s11_2_mille_speaks_megasjov_kage.mp3")
	            .add("s03-mille-speaks-hvad_i_alverden_ikke_set_foer", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/spotted/s03-mille-speaks-hvad_i_alverden_ikke_set_foer.mp3")
	            .add("s03-mille-speaks-hvad_var_det", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/spotted/s03-mille-speaks-hvad_var_det.mp3")
	            .add("s01-mille-speaks-boernebanden_til_at_hjaelpe", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/ubrugt/s01-mille-speaks-boernebanden_til_at_hjaelpe.mp3")
	            .add("s01-mille-speaks-byde_fuglen_paa_kage", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/ubrugt/s01-mille-speaks-byde_fuglen_paa_kage.mp3")
	            .add("s01-mille-speaks-hej_godt_at_se_dig", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/mille/ubrugt/s01-mille-speaks-hej_godt_at_se_dig.mp3")
	            .add("s03-skaeg-speaks-hmmm_mystisk", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/skaeg/hov/s03-skaeg-speaks-hmmm_mystisk.mp3")
	            .add("s03-skaeg-speaks-hov_hvad_var_det", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/skaeg/hov/s03-skaeg-speaks-hov_hvad_var_det.mp3")
	            .add("s03-skaeg-speaks-sikke_en_umderlig_lyd", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/skaeg/hov/s03-skaeg-speaks-sikke_en_umderlig_lyd.mp3")
	            .add("s03-skaeg-speaks-en_to_og_der_er_tre", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/skaeg/idle/s03-skaeg-speaks-en_to_og_der_er_tre.mp3")
	            .add("s03-skaeg-speaks-fire_og_fem_og_seks_er_derovre", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/skaeg/idle/s03-skaeg-speaks-fire_og_fem_og_seks_er_derovre.mp3")
	            .add("s03-skaeg-speaks-hvor_pokker_er_syv", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/skaeg/idle/s03-skaeg-speaks-hvor_pokker_er_syv.mp3")
	            .add("s11-01-skaeg-speaks-kage_til_mig", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/skaeg/slut/s11-01-skaeg-speaks-kage_til_mig.mp3")
	            .add("s11-02-skaeg-speaks-skal_vi_ikke_smage_paa_kagen", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/skaeg/slut/s11-02-skaeg-speaks-skal_vi_ikke_smage_paa_kagen.mp3")
	            .add("s03-skaeg-speaks-hvad_i_alverden_er_det", AssetLoader.MEDIA_PATH + "rosa/sounds/char-speaks/skaeg/spotted/s03-skaeg-speaks-hvad_i_alverden_er_det.mp3")
	            .add("00_Rosa_12-ejd-det-tror-jeg-ikke-er-den-helt-rigtige", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/00_Rosa_12-ejd-det-tror-jeg-ikke-er-den-helt-rigtige.mp3")
	            .add("00_Rosa_36-det-tror-jeg-han-bliver-glad-for-det-her", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/00_Rosa_36-det-tror-jeg-han-bliver-glad-for-det-her.mp3")
	            .add("01_Rosa_01-hej-vil-du-vaere", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/01_Rosa_01-hej-vil-du-vaere.mp3")
	            .add("02_Rosa_01-ok-nu-gaelder-det-om", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/02_Rosa_01-ok-nu-gaelder-det-om.mp3")
	            .add("02_Rosa_02-nu-skal-vi-snige-os-forbi", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/02_Rosa_02-nu-skal-vi-snige-os-forbi.mp3")
	            .add("03_Rosa_01-ja", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/03_Rosa_01-ja.mp3")
	            .add("03_Rosa_02-hvor-er-du-god", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/03_Rosa_02-hvor-er-du-god.mp3")
	            .add("03_Rosa_03-forsigtig", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/03_Rosa_03-forsigtig.mp3")
	            .add("03_Rosa_04-aah-nej", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/03_Rosa_04-aah-nej.mp3")
	            .add("03_Rosa_05-oev-vi-maa-proeve-igen", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/03_Rosa_05-oev-vi-maa-proeve-igen.mp3")
	            .add("03_Rosa_06-tryk-paa-skaermen-for-at-gp", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/03_Rosa_06-tryk-paa-skaermen-for-at-gp.mp3")
	            .add("04_Rosa_01-yes-vi-klarede-det", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/04_Rosa_01-yes-vi-klarede-det.mp3")
	            .add("04_Rosa_02-nu-skal-vi-tage-billeder", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/04_Rosa_02-nu-skal-vi-tage-billeder.mp3")
	            .add("04_Rosa_03-ja-saadan-se-ud", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/04_Rosa_03-ja-saadan-se-ud.mp3")
	            .add("04_Rosa_04-super-det-er-en-god-smag", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/04_Rosa_04-super-det-er-en-god-smag.mp3")
	            .add("04_Rosa_05-ja-flot-farve", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/04_Rosa_05-ja-flot-farve.mp3")
	            .add("04_Rosa_06-det-tror-jeg-smag", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/04_Rosa_06-det-tror-jeg-smag.mp3")
	            .add("04_Rosa_07-snupper-du-ikke-et-spionbillede-af-den", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/04_Rosa_07-snupper-du-ikke-et-spionbillede-af-den.mp3")
	            .add("04_Rosa_08-godt-klaret-lad-os-komme-tilbage", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/04_Rosa_08-godt-klaret-lad-os-komme-tilbage.mp3")
	            .add("04_Rosa_09-tryk-rund-til-du-finder", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/04_Rosa_09-tryk-rund-til-du-finder.mp3")
	            .add("04_Rosa_10-mon-vi-kan-taende-for-mysterio", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/04_Rosa_10-mon-vi-kan-taende-for-mysterio.mp3")
	            .add("05_Rosa_01-ok-kagespion", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/05_Rosa_01-ok-kagespion.mp3")
	            .add("06_Rosa_01-vi-starter-med-at-lave-en-dej", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/06_Rosa_01-vi-starter-med-at-lave-en-dej.mp3")
	            .add("06_Rosa_02-yes-den-skal-i", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/06_Rosa_02-yes-den-skal-i.mp3")
	            .add("06_Rosa_03-ja-den-skal-i", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/06_Rosa_03-ja-den-skal-i.mp3")
	            .add("06_Rosa_04-yes", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/06_Rosa_04-yes.mp3")
	            .add("06_Rosa_05-den-er-god", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/06_Rosa_05-den-er-god.mp3")
	            .add("06_Rosa_06-ja", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/06_Rosa_06-ja.mp3")
	            .add("06_Rosa_07-saadan", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/06_Rosa_07-saadan.mp3")
	            .add("06_Rosa_19-smag_milk", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/06_Rosa_19-smag_milk.mp3")
	            .add("06_Rosa_20-smag_sugar", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/06_Rosa_20-smag_sugar.mp3")
	            .add("06_Rosa_21-smag_yeast", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/06_Rosa_21-smag_yeast.mp3")
	            .add("06_Rosa_24-smag_cacao", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/06_Rosa_24-smag_cacao.mp3")
	            .add("07_Rosa_01-vi-skal-finde-den-helt-rigtige-kagesmag", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/07_Rosa_01-vi-skal-finde-den-helt-rigtige-kagesmag.mp3")
	            .add("07_Rosa_03-uf-den-er-sur", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/07_Rosa_03-uf-den-er-sur.mp3")
	            .add("07_Rosa_07-ahr-det-er-laekkert", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/07_Rosa_07-ahr-det-er-laekkert.mp3")
	            .add("07_Rosa_10-det-smager-ikke-rigtig-afsaa-meget-det-her", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/07_Rosa_10-det-smager-ikke-rigtig-afsaa-meget-det-her.mp3")
	            .add("07_Rosa_11-smag_flour", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/07_Rosa_11-smag_flour.mp3")
	            .add("07_Rosa_12-smag_oil", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/07_Rosa_12-smag_oil.mp3")
	            .add("07_Rosa_14-uh-det-er--en-god-kagesamg", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/07_Rosa_14-uh-det-er--en-god-kagesamg.mp3")
	            .add("07_Rosa_18-uhmm-der-har-du-fundet-noget_hodt_noget", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/07_Rosa_18-uhmm-der-har-du-fundet-noget_hodt_noget.mp3")
	            .add("08_Rosa_01-saa-ksla-der-blandes-med-fingere-eller-haandmixer", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/08_Rosa_01-saa-ksla-der-blandes-med-fingere-eller-haandmixer.mp3")
	            .add("09_Rosa_01-nu-er-det-tid-til-at-skaere-kagen", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/09_Rosa_01-nu-er-det-tid-til-at-skaere-kagen.mp3")
	            .add("09_Rosa_02-nu-skal-vi-have-pyntet-kagen", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/09_Rosa_02-nu-skal-vi-have-pyntet-kagen.mp3")
	            .add("09_Rosa_03-ej-hvor-bliver-den-flot", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/09_Rosa_03-ej-hvor-bliver-den-flot.mp3")
	            .add("09_Rosa_04-det-bliver-atlsaa-en-superflot-kage", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/09_Rosa_04-det-bliver-atlsaa-en-superflot-kage.mp3")
	            .add("09_Rosa_05-ja-det-ser-godt-ud", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/09_Rosa_05-ja-det-ser-godt-ud.mp3")
	            .add("09_Rosa_06-uhm-den-bliver-rigtig-laekker", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/09_Rosa_06-uhm-den-bliver-rigtig-laekker.mp3")
	            .add("Freemode_rosa", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/Freemode_rosa.mp3")
	            .add("s08a-dej_rammer_kant-01", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/s08a-dej_rammer_kant-01.mp3")
	            .add("s08a-dej_rammer_kant-02", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/s08a-dej_rammer_kant-02.mp3")
	            .add("spotted", AssetLoader.MEDIA_PATH + "rosa/sounds/code-triggered/spotted.mp3")
	            .add("ui_klik", AssetLoader.MEDIA_PATH + "rosa/sounds/ui/ui_klik.mp3");
	        this._assetLoader.load();
	    };
	    AssetLoader.prototype.loadAdditional = function (item, onCompleteCallback) {
	        Logger_1.Logger.log(this, "loadAdditional  this._assetLoader == " + this._assetLoader);
	        Logger_1.Logger.log(this, "loadAdditional  item == " + item);
	        Logger_1.Logger.log(this, "loadAdditional  AFTER this._assetLoader == " + this._assetLoader);
	        this._onCompleteCallback = onCompleteCallback;
	        switch (item) {
	            case "Scene9a_cutOut":
	                this._assetLoader
	                    .add("Scene9a_cutOut", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds/Scene9a_cutOut.jpg");
	                break;
	            case "Scene9_bg":
	                this._assetLoader
	                    .add("Scene9_bg", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds/Scene9_bg.jpg");
	                break;
	            case "handMixer":
	                this._assetLoader
	                    .add("handMixer", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds/handMixer.jpg");
	                break;
	            case "Scene8_bg":
	                this._assetLoader
	                    .add("Scene8_bg", AssetLoader.MEDIA_PATH + "rosa/common/backgrounds/Scene8_bg.jpg");
	                break;
	            case "christian":
	                this._assetLoader
	                    .add("texture-christian_data", AssetLoader.MEDIA_PATH + "levels/christian/texture-christian.json")
	                    .add("texture-christian", AssetLoader.MEDIA_PATH + "levels/christian/texture-christian.png")
	                    .add("background-christian", AssetLoader.MEDIA_PATH + "levels/christian/backgrounds/background-christian.jpg")
	                    .add("inside-christian", AssetLoader.MEDIA_PATH + "levels/christian/backgrounds/inside-christian.jpg");
	                break;
	            case "bamse":
	                this._assetLoader
	                    .add("texture-bamse_data", AssetLoader.MEDIA_PATH + "levels/bamse/texture-bamse.json")
	                    .add("texture-bamse", AssetLoader.MEDIA_PATH + "levels/bamse/texture-bamse.png")
	                    .add("background-bamse", AssetLoader.MEDIA_PATH + "levels/bamse/backgrounds/background-bamse.jpg")
	                    .add("inside-bamse", AssetLoader.MEDIA_PATH + "levels/bamse/backgrounds/inside-bamse.jpg");
	                break;
	            case "skaeg":
	                this._assetLoader
	                    .add("texture-skaeg_data", AssetLoader.MEDIA_PATH + "levels/skaeg/texture-skaeg.json")
	                    .add("texture-skaeg", AssetLoader.MEDIA_PATH + "levels/skaeg/texture-skaeg.png")
	                    .add("background-skaeg", AssetLoader.MEDIA_PATH + "levels/skaeg/backgrounds/background-skaeg.jpg")
	                    .add("inside-skaeg", AssetLoader.MEDIA_PATH + "levels/skaeg/backgrounds/inside-skaeg.jpg");
	                break;
	            case "mille":
	                this._assetLoader
	                    .add("texture-mille_data", AssetLoader.MEDIA_PATH + "levels/mille/texture-mille.json")
	                    .add("texture-mille", AssetLoader.MEDIA_PATH + "levels/mille/texture-mille.png")
	                    .add("background-mille", AssetLoader.MEDIA_PATH + "levels/mille/backgrounds/background-mille.jpg")
	                    .add("inside-mille", AssetLoader.MEDIA_PATH + "levels/mille/backgrounds/inside-mille.jpg");
	                break;
	        }
	        this._assetLoader.load();
	    };
	    AssetLoader.prototype.removeTexture = function (name, dispose) {
	        Logger_1.Logger.log(this, "removeTexture TODO  name == " + name);
	    };
	    AssetLoader.prototype.removeTextureAtlas = function (name, dispose) {
	        Logger_1.Logger.log(this, "removeTextureAtlas TODO  name == " + name);
	    };
	    AssetLoader.prototype.destroy = function () {
	    };
	    return AssetLoader;
	}(PIXI.DisplayObject));
	AssetLoader.ASSET_LOADED = "asset_loaded";
	AssetLoader.STAGE_WIDTH = 1364;
	AssetLoader.STAGE_HEIGHT = 768;
	AssetLoader._instance = null;
	exports.AssetLoader = AssetLoader;


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	var Logger = (function () {
	    function Logger() {
	    }
	    Logger.log = function (instance, logItem) {
	        if (instance === void 0) { instance = null; }
	        if (logItem === void 0) { logItem = null; }
	        var args = [];
	        for (var _i = 2; _i < arguments.length; _i++) {
	            args[_i - 2] = arguments[_i];
	        }
	        Logger._instance = instance;
	        if (Logger.IS_DEV && Logger.DO_LOGGING) {
	            var category = [];
	            Logger._log(logItem, category, true);
	            if (args.length > 0) {
	                var strCat = category.length > 0 ? category[0] : "";
	                Logger._log(args, [strCat + "..."], true);
	            }
	        }
	    };
	    Logger._log = function (message, category, tagEveryLine) {
	        if (category === void 0) { category = null; }
	        if (tagEveryLine === void 0) { tagEveryLine = false; }
	        if (message == null) {
	            message = "null";
	        }
	        if (message.toString() == "[object Object]") {
	        }
	        else {
	            Logger.sendString(message, category, tagEveryLine);
	        }
	    };
	    Logger.sendString = function (message, category, tagEveryLine) {
	        if (tagEveryLine === void 0) { tagEveryLine = false; }
	        if (Logger.IS_DEV) {
	            if (String(message).indexOf("onSaveProgress") > -1 || String(message).indexOf("onWriteTimer") > -1) {
	            }
	            else {
	                if (tagEveryLine) {
	                    message = Logger.tagLines(message, category);
	                }
	                if (message != null && message) {
	                    console.log(Logger._instance, message);
	                }
	            }
	        }
	    };
	    Logger.tagLines = function (message, category) {
	        var messageArray = String(message).split("\n");
	        var prefix = "[ " + category + " ] ";
	        message = prefix + messageArray.join("\n" + prefix);
	        return message;
	    };
	    return Logger;
	}());
	Logger.IS_DEV = false;
	Logger.DO_LOGGING = true;
	exports.Logger = Logger;


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Logger_1 = __webpack_require__(4);
	var Model = (function () {
	    function Model() {
	        this.characters = ["christian", "bamse", "skaeg", "mille"];
	        this.tasteArmatureNames = ["Taste_christian", "Taste_2_bamse", "pandekageogIs", "Taste_4_mille"];
	        this.selectedChar = 0;
	        this.selectedDisguise = 0;
	        this.gameMode = Model.MODE_STORY;
	        this.charIsSelected = false;
	    }
	    Model.getInstance = function () {
	        if (Model._instance == null) {
	            Model._instance = new Model();
	            Model._instance.init();
	        }
	        return Model._instance;
	    };
	    Model.prototype.init = function () {
	        Logger_1.Logger.log(this, "Model init");
	    };
	    Model.destroySingleton = function () {
	        if (Model._instance) {
	            Model._instance.destroy();
	        }
	    };
	    Model.prototype.reset = function () {
	        if (Model._instance.usedDisguises == null) {
	            Model._instance.usedDisguises = [false, false, false];
	        }
	        this.resetSnapshots();
	    };
	    Model.prototype.resetSnapshots = function () {
	        this.snapShots = [];
	        for (var i = 0; i < Model.SNAPSHOTS_TOTAL_NUMBER; i++) {
	            this.snapShots[i] = this.createEmptyPolaroidImage();
	        }
	    };
	    Model.prototype.createEmptyPolaroidImage = function () {
	        var emptyPolaroidImage;
	        emptyPolaroidImage = PIXI.Sprite.fromFrame("cameraFreemode.png");
	        var polaroidScale = 0.4;
	        emptyPolaroidImage.width = 418 * polaroidScale;
	        emptyPolaroidImage.height = 373 * polaroidScale;
	        return emptyPolaroidImage;
	    };
	    Model.prototype.getSelectedCharName = function () {
	        Logger_1.Logger.log(this, "Modela getSelectedCharName == " + this.characters[this.selectedChar]);
	        return this.characters[this.selectedChar];
	    };
	    Model.prototype.doesSelectedDisguiseMatchCharacter = function () {
	        return (this.selectedChar == this.selectedDisguise);
	    };
	    Model.prototype.initialize = function () {
	    };
	    Model.prototype.destroy = function () {
	        Model._instance = null;
	    };
	    return Model;
	}());
	Model.SNAPSHOTS_TOTAL_NUMBER = 3;
	Model.CHAR_CHRISTIAN = 0;
	Model.CHAR_BAMSE = 1;
	Model.CHAR_SKAEG = 2;
	Model.CHAR_MILLE = 3;
	Model.MODE_STORY = 0;
	Model.MODE_FREE = 1;
	Model.SCENE_INTRO = 0;
	Model.SCENE_PICK_CHAR = 1;
	Model.SCENE_PICK_DISGUISE = 2;
	Model.SCENE_SNEAK_GAME = 3;
	Model.SCENE_GATHER_CLUES = 4;
	Model.SCENE_PRESENT_CLUES = 5;
	Model.SCENE_BASIC_INGREDIENTS = 6;
	Model.SCENE_SPECIAL_INGREDIENTS = 7;
	Model.SCENE_MIXING = 8;
	Model.SCENE_OVEN = 9;
	Model.SCENE_CUT_CAKE = 10;
	Model.SCENE_DECORATE_CAKE = 11;
	Model.SCENE_WALK = 12;
	Model.SCENE_CHAR_THANKS = 13;
	Model.SCENE_PRESENT_CAKE = 14;
	Model.MUSIC_ROSA_HYGGE = "MUSIC_ROSA_HYGGE";
	Model.MUSIC_ROSA_SPION_NATURE = "MUSIC_ROSA_SPION_NATURE";
	Model.MUSIC_ROSA_SPION_URBAN = "MUSIC_ROSA_SPION_URBAN";
	Model.MUSIC_ROSA_WALKING = "MUSIC_ROSA_WALKING";
	Model.MUSIC_ROSA_SPION_INSIDE = "MUSIC_ROSA_SPION_INSIDE";
	Model.VOLUME_MUSIC = 0.4;
	Model.VOLUME_SPEAK = 1;
	Model.VOLUME_FX = 1;
	Model._isSingleton = false;
	exports.Model = Model;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var BadGuy_bamse__cakeShapeProxy_1 = __webpack_require__(7);
	var BadGuy_bamse__polaroidContentProxy_1 = __webpack_require__(9);
	var BadGuy_bamse__scene3_spySceneWalk_bamseProxy_1 = __webpack_require__(10);
	var BadGuy_bamse__openBookProxy_1 = __webpack_require__(11);
	var BadGuy_bamse__caracterProxy_1 = __webpack_require__(12);
	var BadGuy_bamse__Scene4_insideSpyProxy_1 = __webpack_require__(13);
	var BadGuy_bamse__mouseLoopProxy_1 = __webpack_require__(16);
	var BadGuy_bamse__kyllingArmProxy_1 = __webpack_require__(17);
	var ShootPictureProxy_1 = __webpack_require__(21);
	var PolaroidProgressProxy_1 = __webpack_require__(24);
	var BadGuy_christian__cakeShapeProxy_1 = __webpack_require__(25);
	var BadGuy_christian__polaroidContentProxy_1 = __webpack_require__(26);
	var BadGuy_christian__scene3_spySceneWalk_christianProxy_1 = __webpack_require__(27);
	var BadGuy_christian__caracterProxy_1 = __webpack_require__(28);
	var BadGuy_christian__d_preb_idleallProxy_1 = __webpack_require__(31);
	var BadGuy_christian__chrHeadProxy_1 = __webpack_require__(29);
	var BadGuy_christian__prebenHeadProxy_1 = __webpack_require__(32);
	var BadGuy_christian__Scene4_InsideSpyProxy_1 = __webpack_require__(33);
	var BadGuy_christian__screenframe1Proxy_1 = __webpack_require__(34);
	var BadGuy_christian__screenframe2Proxy_1 = __webpack_require__(35);
	var BadGuy_christian__screenframe3Proxy_1 = __webpack_require__(36);
	var BadGuy_christian__screenframe4Proxy_1 = __webpack_require__(37);
	var BadGuy_christian__machineVoiceProxy_1 = __webpack_require__(38);
	var BadGuy_mille__cakeShape_milleProxy_1 = __webpack_require__(40);
	var BadGuy_mille__polaroidContentProxy_1 = __webpack_require__(41);
	var BadGuy_mille__scene3_spySceneWalk_milleProxy_1 = __webpack_require__(42);
	var BadGuy_mille__caracter_milleProxy_1 = __webpack_require__(43);
	var HimstregimsFuglProxy_1 = __webpack_require__(46);
	var MilleMouthProxy_1 = __webpack_require__(45);
	var HimstregimsFuglPosProxy_1 = __webpack_require__(47);
	var HimstregimsFuglBobbingUpDownProxy_1 = __webpack_require__(48);
	var BadGuy_mille__Scene4_InsideSpyProxy_1 = __webpack_require__(49);
	var BadGuy_skaeg__cakeShapeProxy_1 = __webpack_require__(50);
	var BadGuy_skaeg__scene3_spySceneWalk_skaegProxy_1 = __webpack_require__(51);
	var BadGuy_skaeg__caracterProxy_1 = __webpack_require__(52);
	var BadGuy_skaeg__Scene4_InsideSpyProxy_1 = __webpack_require__(54);
	var SpySceneTouchProxy_1 = __webpack_require__(18);
	var BarometerProxy_1 = __webpack_require__(55);
	var Bar2Proxy_1 = __webpack_require__(56);
	var BlueBrushProxy_1 = __webpack_require__(57);
	var WhiteBrushProxy_1 = __webpack_require__(15);
	var Deco__blueKrymmelDragProxy_1 = __webpack_require__(58);
	var Deco__chocolateDragProxy_1 = __webpack_require__(59);
	var Deco__cocosDragProxy_1 = __webpack_require__(60);
	var Deco__colorKrymmelDragProxy_1 = __webpack_require__(61);
	var Deco__DragablesProxy_1 = __webpack_require__(62);
	var Deco__flagDragProxy_1 = __webpack_require__(69);
	var Deco__kiwiDragProxy_1 = __webpack_require__(71);
	var Deco__lakridsDragProxy_1 = __webpack_require__(72);
	var Deco__pineappleDragProxy_1 = __webpack_require__(73);
	var Deco__strawberryDragProxy_1 = __webpack_require__(74);
	var DefaultCakeArmProxy_1 = __webpack_require__(75);
	var Disquise_bamseProxy_1 = __webpack_require__(76);
	var Disquise_christianProxy_1 = __webpack_require__(77);
	var Disquise_milleProxy_1 = __webpack_require__(78);
	var Disquise_skaegProxy_1 = __webpack_require__(79);
	var OrangeBrushProxy_1 = __webpack_require__(80);
	var PolaroidContentProxy_1 = __webpack_require__(81);
	var RedBrushProxy_1 = __webpack_require__(82);
	var Scene0_introProxy_1 = __webpack_require__(83);
	var Scene1_pickCharProxy_1 = __webpack_require__(86);
	var ChristianInCardProxy_1 = __webpack_require__(88);
	var BamseInCardProxy_1 = __webpack_require__(92);
	var SkaegInCardProxy_1 = __webpack_require__(95);
	var MilleInCardProxy_1 = __webpack_require__(97);
	var Scene2_pickDisquiseProxy_1 = __webpack_require__(98);
	var SpeechBubbleProxy_1 = __webpack_require__(102);
	var Scene5_picturesProxy_1 = __webpack_require__(103);
	var Scene6_mixDefaultsProxy_1 = __webpack_require__(105);
	var Ingredience_sugarProxy_1 = __webpack_require__(109);
	var Ingredience_yeastProxy_1 = __webpack_require__(106);
	var Ingredience_milkProxy_1 = __webpack_require__(110);
	var Ingredience_flourProxy_1 = __webpack_require__(111);
	var Ingredience_oilProxy_1 = __webpack_require__(112);
	var Ingredience_cacaoProxy_1 = __webpack_require__(113);
	var Scene7_specialTasteProxy_1 = __webpack_require__(114);
	var RosaProxy_1 = __webpack_require__(89);
	var MagreteBowlProxy_1 = __webpack_require__(107);
	var Wrongtaste_strawberriesProxy_1 = __webpack_require__(116);
	var Wrongtaste_watermelonProxy_1 = __webpack_require__(117);
	var Wrongtaste_potatosProxy_1 = __webpack_require__(115);
	var PandekageogIsProxy_1 = __webpack_require__(118);
	var Taste_christianProxy_1 = __webpack_require__(119);
	var Taste_2_bamseProxy_1 = __webpack_require__(120);
	var Taste_4_milleProxy_1 = __webpack_require__(122);
	var HeadProxy_1 = __webpack_require__(90);
	var SmokePuffAnimProxy_1 = __webpack_require__(108);
	var HonningDropProxy_1 = __webpack_require__(121);
	var Scene8a_handMixingSceneProxy_1 = __webpack_require__(123);
	var FingerSpinnerProxy_1 = __webpack_require__(125);
	var HandMixerArmProxy_1 = __webpack_require__(126);
	var HandMixerBodyProxy_1 = __webpack_require__(127);
	var WRLRLRLRProxy_1 = __webpack_require__(132);
	var ScreenSplatsProxy_1 = __webpack_require__(131);
	var Scene8b_cakeInOutOvenProxy_1 = __webpack_require__(133);
	var DragHelpArrowProxy_1 = __webpack_require__(134);
	var SmokeAnimArmatureProxy_1 = __webpack_require__(135);
	var Scene9_DecorationProxy_1 = __webpack_require__(136);
	var DecoSelectionProxy_1 = __webpack_require__(138);
	var DragablesProxy_1 = __webpack_require__(139);
	var BadGuy_skaeg__pic_placeholderProxy_1 = __webpack_require__(144);
	var CocosDragProxy_1 = __webpack_require__(67);
	var BlueKrymmelDragProxy_1 = __webpack_require__(64);
	var ColorKrymmelDragProxy_1 = __webpack_require__(65);
	var PineappleDragProxy_1 = __webpack_require__(66);
	var StrawberryDragProxy_1 = __webpack_require__(63);
	var KiwiDragProxy_1 = __webpack_require__(68);
	var LakridsDragProxy_1 = __webpack_require__(70);
	var TriangleHitboxProxy_1 = __webpack_require__(141);
	var GlazingOutlineProxy_1 = __webpack_require__(142);
	var Scene9b_cutCakeProxy_1 = __webpack_require__(146);
	var CakeArmProxy_1 = __webpack_require__(137);
	var CakeCutShapesProxy_1 = __webpack_require__(147);
	var Scene10_walksceneProxy_1 = __webpack_require__(149);
	var EndShoe1Proxy_1 = __webpack_require__(150);
	var Scene11_caracterThanksProxy_1 = __webpack_require__(152);
	var DoorBellBgProxy_1 = __webpack_require__(153);
	var EndCaracterProxy_1 = __webpack_require__(154);
	var SkaegInDoorProxy_1 = __webpack_require__(155);
	var ChristianInDoorProxy_1 = __webpack_require__(157);
	var BamseInDoorProxy_1 = __webpack_require__(158);
	var BadGuy_mille__milleInDoorProxy_1 = __webpack_require__(159);
	var SkaegFrontHeadProxy_1 = __webpack_require__(53);
	var Chr_front_headProxy_1 = __webpack_require__(30);
	var BamseheadProxy_1 = __webpack_require__(93);
	var MilleFront_headProxy_1 = __webpack_require__(44);
	var Scene12_freemodeProxy_1 = __webpack_require__(160);
	var WalkingTilesProxy_1 = __webpack_require__(151);
	var Pic_placeholderProxy_1 = __webpack_require__(23);
	var HoldingHandLeftProxy_1 = __webpack_require__(148);
	var PolaroidProxy_1 = __webpack_require__(22);
	var TouchGuideProxy_1 = __webpack_require__(161);
	var BadGuy_christian__spyGlassButton_1 = __webpack_require__(162);
	var Color_clueButton_1 = __webpack_require__(167);
	var Form_clueButton_1 = __webpack_require__(168);
	var Taste_clueButton_1 = __webpack_require__(169);
	var StartButtonButton_1 = __webpack_require__(170);
	var CharCardFrame0Button_1 = __webpack_require__(171);
	var CharCardFrame1Button_1 = __webpack_require__(172);
	var CharCardFrame2Button_1 = __webpack_require__(173);
	var CharCardFrame3Button_1 = __webpack_require__(174);
	var DisguiseBubbleChristianButton_1 = __webpack_require__(175);
	var DisguiseBubbleBamseButton_1 = __webpack_require__(176);
	var DisguiseBubbleSkaegButton_1 = __webpack_require__(177);
	var DisguiseBubbleMilleButton_1 = __webpack_require__(178);
	var HandMixerButtonArmButton_1 = __webpack_require__(180);
	var MixerButton2ArmButton_1 = __webpack_require__(181);
	var MixerButton3ArmButton_1 = __webpack_require__(182);
	var MixerButton1ArmButton_1 = __webpack_require__(183);
	var GlazeingButtonButton_1 = __webpack_require__(184);
	var UndoButtonButton_1 = __webpack_require__(185);
	var ClearButtonButton_1 = __webpack_require__(186);
	var FreeModeButtonButton_1 = __webpack_require__(187);
	var NextArrowButton_1 = __webpack_require__(188);
	var ReplayButtonButton_1 = __webpack_require__(189);
	var StartButtonGameButton_1 = __webpack_require__(190);
	var Logger_1 = __webpack_require__(4);
	var TypedDBFactory = (function () {
	    function TypedDBFactory(factory) {
	        this._factory = factory;
	        TypedDBFactory._displayProxyMap = {};
	        Logger_1.Logger.log(this, "TypedDBFactory constructor this._factory == " + this._factory);
	    }
	    TypedDBFactory.getProxyFromDisplay = function (display) {
	        return TypedDBFactory._displayProxyMap[display];
	    };
	    TypedDBFactory.setProxyFromDisplay = function (display, proxy) {
	        TypedDBFactory._displayProxyMap[display] = proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_bamse__cakeShapeArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_bamse/cakeShape");
	        var proxy = new BadGuy_bamse__cakeShapeProxy_1.BadGuy_bamse__cakeShapeProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_bamse__polaroidContentArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_bamse/polaroidContent");
	        var proxy = new BadGuy_bamse__polaroidContentProxy_1.BadGuy_bamse__polaroidContentProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_bamse__scene3_spySceneWalk_bamseArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_bamse/scene3_spySceneWalk_bamse");
	        var proxy = new BadGuy_bamse__scene3_spySceneWalk_bamseProxy_1.BadGuy_bamse__scene3_spySceneWalk_bamseProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_bamse__openBookArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_bamse/openBook");
	        var proxy = new BadGuy_bamse__openBookProxy_1.BadGuy_bamse__openBookProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_bamse__caracterArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_bamse/caracter");
	        var proxy = new BadGuy_bamse__caracterProxy_1.BadGuy_bamse__caracterProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_bamse__Scene4_insideSpyArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_bamse/Scene4_insideSpy");
	        var proxy = new BadGuy_bamse__Scene4_insideSpyProxy_1.BadGuy_bamse__Scene4_insideSpyProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_bamse__mouseLoopArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_bamse/mouseLoop");
	        var proxy = new BadGuy_bamse__mouseLoopProxy_1.BadGuy_bamse__mouseLoopProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_bamse__kyllingArmArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_bamse/kyllingArm");
	        var proxy = new BadGuy_bamse__kyllingArmProxy_1.BadGuy_bamse__kyllingArmProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildShootPictureArmature = function () {
	        var armature = this._factory.buildArmature("shootPicture");
	        var proxy = new ShootPictureProxy_1.ShootPictureProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildPolaroidProgressArmature = function () {
	        var armature = this._factory.buildArmature("polaroidProgress");
	        var proxy = new PolaroidProgressProxy_1.PolaroidProgressProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__cakeShapeArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/cakeShape");
	        var proxy = new BadGuy_christian__cakeShapeProxy_1.BadGuy_christian__cakeShapeProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__polaroidContentArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/polaroidContent");
	        var proxy = new BadGuy_christian__polaroidContentProxy_1.BadGuy_christian__polaroidContentProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__scene3_spySceneWalk_christianArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/scene3_spySceneWalk_christian");
	        var proxy = new BadGuy_christian__scene3_spySceneWalk_christianProxy_1.BadGuy_christian__scene3_spySceneWalk_christianProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__caracterArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/caracter");
	        var proxy = new BadGuy_christian__caracterProxy_1.BadGuy_christian__caracterProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__d_preb_idleallArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/d_preb_idleall");
	        var proxy = new BadGuy_christian__d_preb_idleallProxy_1.BadGuy_christian__d_preb_idleallProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__chrHeadArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/chrHead");
	        var proxy = new BadGuy_christian__chrHeadProxy_1.BadGuy_christian__chrHeadProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__prebenHeadArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/prebenHead");
	        var proxy = new BadGuy_christian__prebenHeadProxy_1.BadGuy_christian__prebenHeadProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__Scene4_InsideSpyArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/Scene4_InsideSpy");
	        var proxy = new BadGuy_christian__Scene4_InsideSpyProxy_1.BadGuy_christian__Scene4_InsideSpyProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__screenframe1Armature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/screenframe1");
	        var proxy = new BadGuy_christian__screenframe1Proxy_1.BadGuy_christian__screenframe1Proxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__screenframe2Armature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/screenframe2");
	        var proxy = new BadGuy_christian__screenframe2Proxy_1.BadGuy_christian__screenframe2Proxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__screenframe3Armature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/screenframe3");
	        var proxy = new BadGuy_christian__screenframe3Proxy_1.BadGuy_christian__screenframe3Proxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__screenframe4Armature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/screenframe4");
	        var proxy = new BadGuy_christian__screenframe4Proxy_1.BadGuy_christian__screenframe4Proxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__machineVoiceArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/machineVoice");
	        var proxy = new BadGuy_christian__machineVoiceProxy_1.BadGuy_christian__machineVoiceProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_mille__cakeShape_milleArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_mille/cakeShape_mille");
	        var proxy = new BadGuy_mille__cakeShape_milleProxy_1.BadGuy_mille__cakeShape_milleProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_mille__polaroidContentArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_mille/polaroidContent");
	        var proxy = new BadGuy_mille__polaroidContentProxy_1.BadGuy_mille__polaroidContentProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_mille__scene3_spySceneWalk_milleArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_mille/scene3_spySceneWalk_mille");
	        var proxy = new BadGuy_mille__scene3_spySceneWalk_milleProxy_1.BadGuy_mille__scene3_spySceneWalk_milleProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_mille__caracter_milleArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_mille/caracter_mille");
	        var proxy = new BadGuy_mille__caracter_milleProxy_1.BadGuy_mille__caracter_milleProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildHimstregimsFuglArmature = function () {
	        var armature = this._factory.buildArmature("himstregimsFugl");
	        var proxy = new HimstregimsFuglProxy_1.HimstregimsFuglProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildMilleMouthArmature = function () {
	        var armature = this._factory.buildArmature("milleMouth");
	        var proxy = new MilleMouthProxy_1.MilleMouthProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildHimstregimsFuglPosArmature = function () {
	        var armature = this._factory.buildArmature("himstregimsFuglPos");
	        var proxy = new HimstregimsFuglPosProxy_1.HimstregimsFuglPosProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildHimstregimsFuglBobbingUpDownArmature = function () {
	        var armature = this._factory.buildArmature("himstregimsFuglBobbingUpDown");
	        var proxy = new HimstregimsFuglBobbingUpDownProxy_1.HimstregimsFuglBobbingUpDownProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_mille__Scene4_InsideSpyArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_mille/Scene4_InsideSpy");
	        var proxy = new BadGuy_mille__Scene4_InsideSpyProxy_1.BadGuy_mille__Scene4_InsideSpyProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_skaeg__cakeShapeArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_skaeg/cakeShape");
	        var proxy = new BadGuy_skaeg__cakeShapeProxy_1.BadGuy_skaeg__cakeShapeProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_skaeg__scene3_spySceneWalk_skaegArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_skaeg/scene3_spySceneWalk_skaeg");
	        var proxy = new BadGuy_skaeg__scene3_spySceneWalk_skaegProxy_1.BadGuy_skaeg__scene3_spySceneWalk_skaegProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_skaeg__caracterArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_skaeg/caracter");
	        var proxy = new BadGuy_skaeg__caracterProxy_1.BadGuy_skaeg__caracterProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_skaeg__Scene4_InsideSpyArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_skaeg/Scene4_InsideSpy");
	        var proxy = new BadGuy_skaeg__Scene4_InsideSpyProxy_1.BadGuy_skaeg__Scene4_InsideSpyProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildSpySceneTouchArmature = function () {
	        var armature = this._factory.buildArmature("spySceneTouch");
	        var proxy = new SpySceneTouchProxy_1.SpySceneTouchProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBarometerArmature = function () {
	        var armature = this._factory.buildArmature("barometer");
	        var proxy = new BarometerProxy_1.BarometerProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBar2Armature = function () {
	        var armature = this._factory.buildArmature("bar2");
	        var proxy = new Bar2Proxy_1.Bar2Proxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBlueBrushArmature = function () {
	        var armature = this._factory.buildArmature("blueBrush");
	        var proxy = new BlueBrushProxy_1.BlueBrushProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildWhiteBrushArmature = function () {
	        var armature = this._factory.buildArmature("whiteBrush");
	        var proxy = new WhiteBrushProxy_1.WhiteBrushProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDeco__blueKrymmelDragArmature = function () {
	        var armature = this._factory.buildArmature("deco/blueKrymmelDrag");
	        var proxy = new Deco__blueKrymmelDragProxy_1.Deco__blueKrymmelDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDeco__chocolateDragArmature = function () {
	        var armature = this._factory.buildArmature("deco/chocolateDrag");
	        var proxy = new Deco__chocolateDragProxy_1.Deco__chocolateDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDeco__cocosDragArmature = function () {
	        var armature = this._factory.buildArmature("deco/cocosDrag");
	        var proxy = new Deco__cocosDragProxy_1.Deco__cocosDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDeco__colorKrymmelDragArmature = function () {
	        var armature = this._factory.buildArmature("deco/colorKrymmelDrag");
	        var proxy = new Deco__colorKrymmelDragProxy_1.Deco__colorKrymmelDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDeco__DragablesArmature = function () {
	        var armature = this._factory.buildArmature("deco/Dragables");
	        var proxy = new Deco__DragablesProxy_1.Deco__DragablesProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDeco__flagDragArmature = function () {
	        var armature = this._factory.buildArmature("deco/flagDrag");
	        var proxy = new Deco__flagDragProxy_1.Deco__flagDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDeco__kiwiDragArmature = function () {
	        var armature = this._factory.buildArmature("deco/kiwiDrag");
	        var proxy = new Deco__kiwiDragProxy_1.Deco__kiwiDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDeco__lakridsDragArmature = function () {
	        var armature = this._factory.buildArmature("deco/lakridsDrag");
	        var proxy = new Deco__lakridsDragProxy_1.Deco__lakridsDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDeco__pineappleDragArmature = function () {
	        var armature = this._factory.buildArmature("deco/pineappleDrag");
	        var proxy = new Deco__pineappleDragProxy_1.Deco__pineappleDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDeco__strawberryDragArmature = function () {
	        var armature = this._factory.buildArmature("deco/strawberryDrag");
	        var proxy = new Deco__strawberryDragProxy_1.Deco__strawberryDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDefaultCakeArmArmature = function () {
	        var armature = this._factory.buildArmature("defaultCakeArm");
	        var proxy = new DefaultCakeArmProxy_1.DefaultCakeArmProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDisquise_bamseArmature = function () {
	        var armature = this._factory.buildArmature("disquise_bamse");
	        var proxy = new Disquise_bamseProxy_1.Disquise_bamseProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDisquise_christianArmature = function () {
	        var armature = this._factory.buildArmature("disquise_christian");
	        var proxy = new Disquise_christianProxy_1.Disquise_christianProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDisquise_milleArmature = function () {
	        var armature = this._factory.buildArmature("disquise_mille");
	        var proxy = new Disquise_milleProxy_1.Disquise_milleProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDisquise_skaegArmature = function () {
	        var armature = this._factory.buildArmature("disquise_skaeg");
	        var proxy = new Disquise_skaegProxy_1.Disquise_skaegProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildOrangeBrushArmature = function () {
	        var armature = this._factory.buildArmature("orangeBrush");
	        var proxy = new OrangeBrushProxy_1.OrangeBrushProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildPolaroidContentArmature = function () {
	        var armature = this._factory.buildArmature("polaroidContent");
	        var proxy = new PolaroidContentProxy_1.PolaroidContentProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildRedBrushArmature = function () {
	        var armature = this._factory.buildArmature("redBrush");
	        var proxy = new RedBrushProxy_1.RedBrushProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene0_introArmature = function () {
	        Logger_1.Logger.log(this, "TypedDBFactory buildScene0_introArmature this._factory == " + this._factory);
	        var armature = this._factory.buildArmature("scene0_intro");
	        Logger_1.Logger.log(this, "TypedDBFactory buildScene0_introArmature armature == " + armature);
	        var proxy = new Scene0_introProxy_1.Scene0_introProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene1_pickCharArmature = function () {
	        Logger_1.Logger.log(this, "TypedDBFactory buildScene1_pickCharArmature this._factory == " + this._factory);
	        var armature = this._factory.buildArmature("scene1_pickChar");
	        var proxy = new Scene1_pickCharProxy_1.Scene1_pickCharProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildChristianInCardArmature = function () {
	        var armature = this._factory.buildArmature("christianInCard");
	        var proxy = new ChristianInCardProxy_1.ChristianInCardProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBamseInCardArmature = function () {
	        var armature = this._factory.buildArmature("bamseInCard");
	        var proxy = new BamseInCardProxy_1.BamseInCardProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildSkaegInCardArmature = function () {
	        var armature = this._factory.buildArmature("skaegInCard");
	        var proxy = new SkaegInCardProxy_1.SkaegInCardProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildMilleInCardArmature = function () {
	        var armature = this._factory.buildArmature("milleInCard");
	        var proxy = new MilleInCardProxy_1.MilleInCardProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene2_pickDisquiseArmature = function () {
	        var armature = this._factory.buildArmature("scene2_pickDisquise");
	        var proxy = new Scene2_pickDisquiseProxy_1.Scene2_pickDisquiseProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildSpeechBubbleArmature = function () {
	        var armature = this._factory.buildArmature("SpeechBubble");
	        var proxy = new SpeechBubbleProxy_1.SpeechBubbleProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene5_picturesArmature = function () {
	        var armature = this._factory.buildArmature("scene5_pictures");
	        var proxy = new Scene5_picturesProxy_1.Scene5_picturesProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene6_mixDefaultsArmature = function () {
	        var armature = this._factory.buildArmature("scene6_mixDefaults");
	        var proxy = new Scene6_mixDefaultsProxy_1.Scene6_mixDefaultsProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildingredience_sugarArmature = function () {
	        var armature = this._factory.buildArmature("ingredience_sugar");
	        var proxy = new Ingredience_sugarProxy_1.Ingredience_sugarProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildIngredience_yeastArmature = function () {
	        var armature = this._factory.buildArmature("ingredience_yeast");
	        var proxy = new Ingredience_yeastProxy_1.Ingredience_yeastProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildIngredience_milkArmature = function () {
	        var armature = this._factory.buildArmature("ingredience_milk");
	        var proxy = new Ingredience_milkProxy_1.Ingredience_milkProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildIngredience_flourArmature = function () {
	        var armature = this._factory.buildArmature("ingredience_flour");
	        var proxy = new Ingredience_flourProxy_1.Ingredience_flourProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildIngredience_oilArmature = function () {
	        var armature = this._factory.buildArmature("ingredience_oil");
	        var proxy = new Ingredience_oilProxy_1.Ingredience_oilProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildIngredience_cacaoArmature = function () {
	        var armature = this._factory.buildArmature("ingredience_cacao");
	        var proxy = new Ingredience_cacaoProxy_1.Ingredience_cacaoProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene7_specialTasteArmature = function () {
	        var armature = this._factory.buildArmature("scene7_specialTaste");
	        var proxy = new Scene7_specialTasteProxy_1.Scene7_specialTasteProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildRosaArmature = function () {
	        var armature = this._factory.buildArmature("rosa");
	        var proxy = new RosaProxy_1.RosaProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildMagreteBowlArmature = function () {
	        var armature = this._factory.buildArmature("magreteBowl");
	        var proxy = new MagreteBowlProxy_1.MagreteBowlProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildWrongtaste_strawberriesArmature = function () {
	        var armature = this._factory.buildArmature("wrongtaste_strawberries");
	        var proxy = new Wrongtaste_strawberriesProxy_1.Wrongtaste_strawberriesProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildWrongtaste_watermelonArmature = function () {
	        var armature = this._factory.buildArmature("wrongtaste_watermelon");
	        var proxy = new Wrongtaste_watermelonProxy_1.Wrongtaste_watermelonProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildWrongtaste_potatosArmature = function () {
	        var armature = this._factory.buildArmature("wrongtaste_potatos");
	        var proxy = new Wrongtaste_potatosProxy_1.Wrongtaste_potatosProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildPandekageogIsArmature = function () {
	        var armature = this._factory.buildArmature("pandekageogIs");
	        var proxy = new PandekageogIsProxy_1.PandekageogIsProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildTaste_christianArmature = function () {
	        var armature = this._factory.buildArmature("Taste_christian");
	        var proxy = new Taste_christianProxy_1.Taste_christianProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildTaste_2_bamseArmature = function () {
	        var armature = this._factory.buildArmature("Taste_2_bamse");
	        var proxy = new Taste_2_bamseProxy_1.Taste_2_bamseProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildTaste_4_milleArmature = function () {
	        var armature = this._factory.buildArmature("Taste_4_mille");
	        var proxy = new Taste_4_milleProxy_1.Taste_4_milleProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildHeadArmature = function () {
	        var armature = this._factory.buildArmature("head");
	        var proxy = new HeadProxy_1.HeadProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildSmokePuffAnimArmature = function () {
	        var armature = this._factory.buildArmature("smokePuffAnim");
	        var proxy = new SmokePuffAnimProxy_1.SmokePuffAnimProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildHonningDropArmature = function () {
	        var armature = this._factory.buildArmature("honningDrop");
	        var proxy = new HonningDropProxy_1.HonningDropProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene8a_handMixingSceneArmature = function () {
	        var armature = this._factory.buildArmature("Scene8a_handMixingScene");
	        var proxy = new Scene8a_handMixingSceneProxy_1.Scene8a_handMixingSceneProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildFingerSpinnerArmature = function () {
	        var armature = this._factory.buildArmature("fingerSpinner");
	        var proxy = new FingerSpinnerProxy_1.FingerSpinnerProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildHandMixerArmArmature = function () {
	        var armature = this._factory.buildArmature("handMixerArm");
	        var proxy = new HandMixerArmProxy_1.HandMixerArmProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildHandMixerBodyArmature = function () {
	        var armature = this._factory.buildArmature("handMixerBody");
	        var proxy = new HandMixerBodyProxy_1.HandMixerBodyProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildWRLRLRLRArmature = function () {
	        var armature = this._factory.buildArmature("WRLRLRLR");
	        var proxy = new WRLRLRLRProxy_1.WRLRLRLRProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScreenSplatsArmature = function () {
	        var armature = this._factory.buildArmature("screenSplats");
	        var proxy = new ScreenSplatsProxy_1.ScreenSplatsProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene8b_cakeInOutOvenArmature = function () {
	        var armature = this._factory.buildArmature("scene8b_cakeInOutOven");
	        var proxy = new Scene8b_cakeInOutOvenProxy_1.Scene8b_cakeInOutOvenProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDragHelpArrowArmature = function () {
	        var armature = this._factory.buildArmature("dragHelpArrow");
	        var proxy = new DragHelpArrowProxy_1.DragHelpArrowProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildSmokeAnimArmatureArmature = function () {
	        var armature = this._factory.buildArmature("smokeAnimArmature");
	        var proxy = new SmokeAnimArmatureProxy_1.SmokeAnimArmatureProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene9_DecorationArmature = function () {
	        var armature = this._factory.buildArmature("scene9_Decoration");
	        var proxy = new Scene9_DecorationProxy_1.Scene9_DecorationProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDecoSelectionArmature = function () {
	        var armature = this._factory.buildArmature("decoSelection");
	        var proxy = new DecoSelectionProxy_1.DecoSelectionProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDragablesArmature = function () {
	        var armature = this._factory.buildArmature("Dragables");
	        var proxy = new DragablesProxy_1.DragablesProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_skaeg__pic_placeholderArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_skaeg/pic_placeholder");
	        var proxy = new BadGuy_skaeg__pic_placeholderProxy_1.BadGuy_skaeg__pic_placeholderProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildCocosDragArmature = function () {
	        var armature = this._factory.buildArmature("cocosDrag");
	        var proxy = new CocosDragProxy_1.CocosDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBlueKrymmelDragArmature = function () {
	        var armature = this._factory.buildArmature("blueKrymmelDrag");
	        var proxy = new BlueKrymmelDragProxy_1.BlueKrymmelDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildColorKrymmelDragArmature = function () {
	        var armature = this._factory.buildArmature("colorKrymmelDrag");
	        var proxy = new ColorKrymmelDragProxy_1.ColorKrymmelDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildPineappleDragArmature = function () {
	        var armature = this._factory.buildArmature("pineappleDrag");
	        var proxy = new PineappleDragProxy_1.PineappleDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildStrawberryDragArmature = function () {
	        var armature = this._factory.buildArmature("strawberryDrag");
	        var proxy = new StrawberryDragProxy_1.StrawberryDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildKiwiDragArmature = function () {
	        var armature = this._factory.buildArmature("kiwiDrag");
	        var proxy = new KiwiDragProxy_1.KiwiDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildLakridsDragArmature = function () {
	        var armature = this._factory.buildArmature("lakridsDrag");
	        var proxy = new LakridsDragProxy_1.LakridsDragProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildTriangleHitboxArmature = function () {
	        var armature = this._factory.buildArmature("triangleHitbox");
	        var proxy = new TriangleHitboxProxy_1.TriangleHitboxProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildGlazingOutlineArmature = function () {
	        var armature = this._factory.buildArmature("glazingOutline");
	        var proxy = new GlazingOutlineProxy_1.GlazingOutlineProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene9b_cutCakeArmature = function () {
	        var armature = this._factory.buildArmature("scene9b_cutCake");
	        var proxy = new Scene9b_cutCakeProxy_1.Scene9b_cutCakeProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildCakeArmArmature = function () {
	        var armature = this._factory.buildArmature("cakeArm");
	        var proxy = new CakeArmProxy_1.CakeArmProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildCakeCutShapesArmature = function () {
	        var armature = this._factory.buildArmature("cakeCutShapes");
	        var proxy = new CakeCutShapesProxy_1.CakeCutShapesProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene10_walksceneArmature = function () {
	        var armature = this._factory.buildArmature("scene10_walkscene");
	        var proxy = new Scene10_walksceneProxy_1.Scene10_walksceneProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildEndShoe1Armature = function () {
	        var armature = this._factory.buildArmature("endShoe1");
	        var proxy = new EndShoe1Proxy_1.EndShoe1Proxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene11_caracterThanksArmature = function () {
	        var armature = this._factory.buildArmature("scene11_caracterThanks");
	        var proxy = new Scene11_caracterThanksProxy_1.Scene11_caracterThanksProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDoorBellBgArmature = function () {
	        var armature = this._factory.buildArmature("doorBellBg");
	        var proxy = new DoorBellBgProxy_1.DoorBellBgProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildEndCaracterArmature = function () {
	        var armature = this._factory.buildArmature("endCaracter");
	        var proxy = new EndCaracterProxy_1.EndCaracterProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildSkaegInDoorArmature = function () {
	        var armature = this._factory.buildArmature("skaegInDoor");
	        var proxy = new SkaegInDoorProxy_1.SkaegInDoorProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildChristianInDoorArmature = function () {
	        var armature = this._factory.buildArmature("christianInDoor");
	        var proxy = new ChristianInDoorProxy_1.ChristianInDoorProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBamseInDoorArmature = function () {
	        var armature = this._factory.buildArmature("bamseInDoor");
	        var proxy = new BamseInDoorProxy_1.BamseInDoorProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_mille__milleInDoorArmature = function () {
	        var armature = this._factory.buildArmature("badGuy_mille/milleInDoor");
	        var proxy = new BadGuy_mille__milleInDoorProxy_1.BadGuy_mille__milleInDoorProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildSkaegFrontHeadArmature = function () {
	        var armature = this._factory.buildArmature("skaegFrontHead");
	        var proxy = new SkaegFrontHeadProxy_1.SkaegFrontHeadProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildChr_front_headArmature = function () {
	        var armature = this._factory.buildArmature("chr_front_head");
	        var proxy = new Chr_front_headProxy_1.Chr_front_headProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBamseheadArmature = function () {
	        var armature = this._factory.buildArmature("bamsehead");
	        var proxy = new BamseheadProxy_1.BamseheadProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildMilleFront_headArmature = function () {
	        var armature = this._factory.buildArmature("milleFront_head");
	        var proxy = new MilleFront_headProxy_1.MilleFront_headProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildScene12_freemodeArmature = function () {
	        var armature = this._factory.buildArmature("scene12_freemode");
	        var proxy = new Scene12_freemodeProxy_1.Scene12_freemodeProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildWalkingTilesArmature = function () {
	        var armature = this._factory.buildArmature("walkingTiles");
	        var proxy = new WalkingTilesProxy_1.WalkingTilesProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildPic_placeholderArmature = function () {
	        var armature = this._factory.buildArmature("pic_placeholder");
	        var proxy = new Pic_placeholderProxy_1.Pic_placeholderProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildHoldingHandLeftArmature = function () {
	        var armature = this._factory.buildArmature("holdingHandLeft");
	        var proxy = new HoldingHandLeftProxy_1.HoldingHandLeftProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildPolaroidArmature = function () {
	        var armature = this._factory.buildArmature("polaroid");
	        var proxy = new PolaroidProxy_1.PolaroidProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildTouchGuideArmature = function () {
	        var armature = this._factory.buildArmature("touchGuide");
	        var proxy = new TouchGuideProxy_1.TouchGuideProxy(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildBadGuy_christian__spyGlassButton = function () {
	        var armature = this._factory.buildArmature("badGuy_christian/spyGlass");
	        var proxy = new BadGuy_christian__spyGlassButton_1.BadGuy_christian__spyGlassButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildColor_clueButton = function () {
	        var armature = this._factory.buildArmature("Color_clue");
	        var proxy = new Color_clueButton_1.Color_clueButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildForm_clueButton = function () {
	        var armature = this._factory.buildArmature("Form_clue");
	        var proxy = new Form_clueButton_1.Form_clueButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildTaste_clueButton = function () {
	        var armature = this._factory.buildArmature("Taste_clue");
	        var proxy = new Taste_clueButton_1.Taste_clueButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildStartButtonButton = function () {
	        var armature = this._factory.buildArmature("startButton");
	        var proxy = new StartButtonButton_1.StartButtonButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildCharCardFrame0Button = function () {
	        var armature = this._factory.buildArmature("charCardFrame0");
	        var proxy = new CharCardFrame0Button_1.CharCardFrame0Button(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildCharCardFrame1Button = function () {
	        var armature = this._factory.buildArmature("charCardFrame1");
	        var proxy = new CharCardFrame1Button_1.CharCardFrame1Button(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildCharCardFrame2Button = function () {
	        var armature = this._factory.buildArmature("charCardFrame2");
	        var proxy = new CharCardFrame2Button_1.CharCardFrame2Button(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildCharCardFrame3Button = function () {
	        var armature = this._factory.buildArmature("charCardFrame3");
	        var proxy = new CharCardFrame3Button_1.CharCardFrame3Button(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDisguiseBubbleChristianButton = function () {
	        var armature = this._factory.buildArmature("disguiseBubbleChristian");
	        var proxy = new DisguiseBubbleChristianButton_1.DisguiseBubbleChristianButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDisguiseBubbleBamseButton = function () {
	        var armature = this._factory.buildArmature("disguiseBubbleBamse");
	        var proxy = new DisguiseBubbleBamseButton_1.DisguiseBubbleBamseButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDisguiseBubbleSkaegButton = function () {
	        var armature = this._factory.buildArmature("disguiseBubbleSkaeg");
	        var proxy = new DisguiseBubbleSkaegButton_1.DisguiseBubbleSkaegButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildDisguiseBubbleMilleButton = function () {
	        var armature = this._factory.buildArmature("disguiseBubbleMille");
	        var proxy = new DisguiseBubbleMilleButton_1.DisguiseBubbleMilleButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildHandMixerButtonArmButton = function () {
	        var armature = this._factory.buildArmature("handMixerButtonArm");
	        var proxy = new HandMixerButtonArmButton_1.HandMixerButtonArmButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildMixerButton2ArmButton = function () {
	        var armature = this._factory.buildArmature("mixerButton2Arm");
	        var proxy = new MixerButton2ArmButton_1.MixerButton2ArmButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildMixerButton3ArmButton = function () {
	        var armature = this._factory.buildArmature("mixerButton3Arm");
	        var proxy = new MixerButton3ArmButton_1.MixerButton3ArmButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildMixerButton1ArmButton = function () {
	        var armature = this._factory.buildArmature("mixerButton1Arm");
	        var proxy = new MixerButton1ArmButton_1.MixerButton1ArmButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildGlazeingButtonButton = function () {
	        var armature = this._factory.buildArmature("glazeingButton");
	        var proxy = new GlazeingButtonButton_1.GlazeingButtonButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildUndoButtonButton = function () {
	        var armature = this._factory.buildArmature("undoButton");
	        var proxy = new UndoButtonButton_1.UndoButtonButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildClearButtonButton = function () {
	        var armature = this._factory.buildArmature("clearButton");
	        var proxy = new ClearButtonButton_1.ClearButtonButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildFreeModeButtonButton = function () {
	        var armature = this._factory.buildArmature("freeModeButton");
	        var proxy = new FreeModeButtonButton_1.FreeModeButtonButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildNextArrowButton = function () {
	        var armature = this._factory.buildArmature("nextArrow");
	        var proxy = new NextArrowButton_1.NextArrowButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildReplayButtonButton = function () {
	        var armature = this._factory.buildArmature("replayButton");
	        var proxy = new ReplayButtonButton_1.ReplayButtonButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.buildStartButtonGameButton = function () {
	        var armature = this._factory.buildArmature("startButtonGame");
	        var proxy = new StartButtonGameButton_1.StartButtonGameButton(armature);
	        TypedDBFactory._displayProxyMap[armature.display] = proxy;
	        return proxy;
	    };
	    TypedDBFactory.prototype.dispose = function () {
	        TypedDBFactory._displayProxyMap = null;
	    };
	    return TypedDBFactory;
	}());
	exports.TypedDBFactory = TypedDBFactory;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_bamse__cakeShapeProxy = (function (_super) {
	    __extends(BadGuy_bamse__cakeShapeProxy, _super);
	    function BadGuy_bamse__cakeShapeProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_bamse__cakeShapeProxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    Object.defineProperty(BadGuy_bamse__cakeShapeProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_bamse__cakeShapeProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_bamse__cakeShapeProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_bamse__cakeShapeProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_bamse__cakeShapeProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_bamse__cakeShapeProxy = BadGuy_bamse__cakeShapeProxy;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AssetLoader_1 = __webpack_require__(3);
	var ProxyBase = (function (_super) {
	    __extends(ProxyBase, _super);
	    function ProxyBase() {
	        var _this = _super.call(this) || this;
	        _this.interactive = true;
	        return _this;
	    }
	    Object.defineProperty(ProxyBase.prototype, "proxyDisplay", {
	        get: function () {
	            return AssetLoader_1.AssetLoader.getInstance().stage;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ProxyBase.prototype.setSlotChildArmature = function () {
	        var length = this._armature.getSlots().length;
	        for (var i = 0; i < length; i++) {
	            var slot = this._armature.getSlots()[i];
	            this[slot.name] = slot.childArmature;
	        }
	    };
	    return ProxyBase;
	}(PIXI.Sprite));
	exports.ProxyBase = ProxyBase;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_bamse__polaroidContentProxy = (function (_super) {
	    __extends(BadGuy_bamse__polaroidContentProxy, _super);
	    function BadGuy_bamse__polaroidContentProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_bamse__polaroidContentProxy.prototype.gotoFarve = function () {
	        if (this._armature.animation.lastAnimationName != "farve") {
	            this._armature.animation.play("farve");
	        }
	    };
	    BadGuy_bamse__polaroidContentProxy.prototype.gotoForm = function () {
	        if (this._armature.animation.lastAnimationName != "form") {
	            this._armature.animation.play("form");
	        }
	    };
	    BadGuy_bamse__polaroidContentProxy.prototype.gotoSmag = function () {
	        if (this._armature.animation.lastAnimationName != "smag") {
	            this._armature.animation.play("smag");
	        }
	    };
	    Object.defineProperty(BadGuy_bamse__polaroidContentProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_bamse__polaroidContentProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_bamse__polaroidContentProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_bamse__polaroidContentProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_bamse__polaroidContentProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_bamse__polaroidContentProxy = BadGuy_bamse__polaroidContentProxy;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BadGuy_bamse__openBookProxy_1 = __webpack_require__(11);
	var BadGuy_bamse__caracterProxy_1 = __webpack_require__(12);
	var TypedDBFactory_1 = __webpack_require__(6);
	var BadGuy_bamse__scene3_spySceneWalk_bamseProxy = (function (_super) {
	    __extends(BadGuy_bamse__scene3_spySceneWalk_bamseProxy, _super);
	    function BadGuy_bamse__scene3_spySceneWalk_bamseProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_bamse__scene3_spySceneWalk_bamseProxy.prototype.getOpenBook = function () {
	        return new BadGuy_bamse__openBookProxy_1.BadGuy_bamse__openBookProxy(this.openBook);
	    };
	    BadGuy_bamse__scene3_spySceneWalk_bamseProxy.prototype.getCharacter = function () {
	        return new BadGuy_bamse__caracterProxy_1.BadGuy_bamse__caracterProxy(this.character);
	    };
	    BadGuy_bamse__scene3_spySceneWalk_bamseProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_bamse__scene3_spySceneWalk_bamseProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    BadGuy_bamse__scene3_spySceneWalk_bamseProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    BadGuy_bamse__scene3_spySceneWalk_bamseProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    BadGuy_bamse__scene3_spySceneWalk_bamseProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(BadGuy_bamse__scene3_spySceneWalk_bamseProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_bamse__scene3_spySceneWalk_bamseProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_bamse__scene3_spySceneWalk_bamseProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_bamse__scene3_spySceneWalk_bamseProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_bamse__scene3_spySceneWalk_bamseProxy;
	}(PIXI.DisplayObject));
	exports.BadGuy_bamse__scene3_spySceneWalk_bamseProxy = BadGuy_bamse__scene3_spySceneWalk_bamseProxy;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_bamse__openBookProxy = (function (_super) {
	    __extends(BadGuy_bamse__openBookProxy, _super);
	    function BadGuy_bamse__openBookProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_bamse__openBookProxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(BadGuy_bamse__openBookProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_bamse__openBookProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_bamse__openBookProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_bamse__openBookProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_bamse__openBookProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_bamse__openBookProxy = BadGuy_bamse__openBookProxy;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_bamse__caracterProxy = (function (_super) {
	    __extends(BadGuy_bamse__caracterProxy, _super);
	    function BadGuy_bamse__caracterProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_bamse__caracterProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_bamse__caracterProxy.prototype.gotoSpottet = function () {
	        if (this._armature.animation.lastAnimationName != "spottet") {
	            this._armature.animation.play("spottet");
	        }
	    };
	    BadGuy_bamse__caracterProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(BadGuy_bamse__caracterProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_bamse__caracterProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_bamse__caracterProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_bamse__caracterProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_bamse__caracterProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_bamse__caracterProxy = BadGuy_bamse__caracterProxy;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Color_clueProxy_1 = __webpack_require__(14);
	var BadGuy_bamse__mouseLoopProxy_1 = __webpack_require__(16);
	var BadGuy_bamse__kyllingArmProxy_1 = __webpack_require__(17);
	var SpySceneTouchProxy_1 = __webpack_require__(18);
	var Form_clueProxy_1 = __webpack_require__(19);
	var Taste_clueProxy_1 = __webpack_require__(20);
	var ShootPictureProxy_1 = __webpack_require__(21);
	var PolaroidProgressProxy_1 = __webpack_require__(24);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_bamse__Scene4_insideSpyProxy = (function (_super) {
	    __extends(BadGuy_bamse__Scene4_insideSpyProxy, _super);
	    function BadGuy_bamse__Scene4_insideSpyProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.getColor_clue = function () {
	        return new Color_clueProxy_1.Color_clueProxy(this.Color_clue);
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.getMouseLoop = function () {
	        return new BadGuy_bamse__mouseLoopProxy_1.BadGuy_bamse__mouseLoopProxy(this.mouseLoop);
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.getKyllingArm = function () {
	        return new BadGuy_bamse__kyllingArmProxy_1.BadGuy_bamse__kyllingArmProxy(this.kyllingArm);
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.getTouch = function () {
	        return new SpySceneTouchProxy_1.SpySceneTouchProxy(this.touch);
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.getForm_clue = function () {
	        return new Form_clueProxy_1.Form_clueProxy(this.Form_clue);
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.getTaste_clue = function () {
	        return new Taste_clueProxy_1.Taste_clueProxy(this.Taste_clue);
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.getShootPicture = function () {
	        return new ShootPictureProxy_1.ShootPictureProxy(this.shootPicture);
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.getProgress = function () {
	        return new PolaroidProgressProxy_1.PolaroidProgressProxy(this.progress);
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(BadGuy_bamse__Scene4_insideSpyProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_bamse__Scene4_insideSpyProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_bamse__Scene4_insideSpyProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_bamse__Scene4_insideSpyProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_bamse__Scene4_insideSpyProxy = BadGuy_bamse__Scene4_insideSpyProxy;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var WhiteBrushProxy_1 = __webpack_require__(15);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var Color_clueProxy = (function (_super) {
	    __extends(Color_clueProxy, _super);
	    function Color_clueProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Color_clueProxy.prototype.getTouch = function () {
	        return new WhiteBrushProxy_1.WhiteBrushProxy(this.touch);
	    };
	    Color_clueProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    Color_clueProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    Color_clueProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Color_clueProxy.prototype.gotoHint = function () {
	        if (this._armature.animation.lastAnimationName != "hint") {
	            this._armature.animation.play("hint");
	        }
	    };
	    Object.defineProperty(Color_clueProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Color_clueProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Color_clueProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Color_clueProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Color_clueProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Color_clueProxy = Color_clueProxy;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var WhiteBrushProxy = (function (_super) {
	    __extends(WhiteBrushProxy, _super);
	    function WhiteBrushProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    WhiteBrushProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    WhiteBrushProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(WhiteBrushProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WhiteBrushProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    WhiteBrushProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    WhiteBrushProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return WhiteBrushProxy;
	}(ProxyBase_1.ProxyBase));
	exports.WhiteBrushProxy = WhiteBrushProxy;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_bamse__mouseLoopProxy = (function (_super) {
	    __extends(BadGuy_bamse__mouseLoopProxy, _super);
	    function BadGuy_bamse__mouseLoopProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_bamse__mouseLoopProxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(BadGuy_bamse__mouseLoopProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_bamse__mouseLoopProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_bamse__mouseLoopProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_bamse__mouseLoopProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_bamse__mouseLoopProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_bamse__mouseLoopProxy = BadGuy_bamse__mouseLoopProxy;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_bamse__kyllingArmProxy = (function (_super) {
	    __extends(BadGuy_bamse__kyllingArmProxy, _super);
	    function BadGuy_bamse__kyllingArmProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_bamse__kyllingArmProxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(BadGuy_bamse__kyllingArmProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_bamse__kyllingArmProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_bamse__kyllingArmProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_bamse__kyllingArmProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_bamse__kyllingArmProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_bamse__kyllingArmProxy = BadGuy_bamse__kyllingArmProxy;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var SpySceneTouchProxy = (function (_super) {
	    __extends(SpySceneTouchProxy, _super);
	    function SpySceneTouchProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    SpySceneTouchProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    SpySceneTouchProxy.prototype.gotoTouch = function () {
	        if (this._armature.animation.lastAnimationName != "touch") {
	            this._armature.animation.play("touch");
	        }
	    };
	    SpySceneTouchProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(SpySceneTouchProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SpySceneTouchProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SpySceneTouchProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    SpySceneTouchProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return SpySceneTouchProxy;
	}(ProxyBase_1.ProxyBase));
	exports.SpySceneTouchProxy = SpySceneTouchProxy;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var WhiteBrushProxy_1 = __webpack_require__(15);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var Form_clueProxy = (function (_super) {
	    __extends(Form_clueProxy, _super);
	    function Form_clueProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Form_clueProxy.prototype.getTouch = function () {
	        return new WhiteBrushProxy_1.WhiteBrushProxy(this.touch);
	    };
	    Form_clueProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    Form_clueProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    Form_clueProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Form_clueProxy.prototype.gotoHint = function () {
	        if (this._armature.animation.lastAnimationName != "hint") {
	            this._armature.animation.play("hint");
	        }
	    };
	    Object.defineProperty(Form_clueProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Form_clueProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Form_clueProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Form_clueProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Form_clueProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Form_clueProxy = Form_clueProxy;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var WhiteBrushProxy_1 = __webpack_require__(15);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Taste_clueProxy = (function (_super) {
	    __extends(Taste_clueProxy, _super);
	    function Taste_clueProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Taste_clueProxy.prototype.getTouch = function () {
	        return new WhiteBrushProxy_1.WhiteBrushProxy(this._armature.getSlot("touch").childArmature);
	    };
	    Taste_clueProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    Taste_clueProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    Taste_clueProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Taste_clueProxy.prototype.gotoHint = function () {
	        if (this._armature.animation.lastAnimationName != "hint") {
	            this._armature.animation.play("hint");
	        }
	    };
	    Object.defineProperty(Taste_clueProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Taste_clueProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Taste_clueProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Taste_clueProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Taste_clueProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Taste_clueProxy = Taste_clueProxy;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var PolaroidProxy_1 = __webpack_require__(22);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ShootPictureProxy = (function (_super) {
	    __extends(ShootPictureProxy, _super);
	    function ShootPictureProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    ShootPictureProxy.prototype.getPolaoridImg = function () {
	        return new PolaroidProxy_1.PolaroidProxy(this.polaoridImg);
	    };
	    ShootPictureProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    ShootPictureProxy.prototype.gotoAnimation = function () {
	        if (this._armature.animation.lastAnimationName != "animation") {
	            this._armature.animation.play("animation");
	        }
	    };
	    ShootPictureProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(ShootPictureProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ShootPictureProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ShootPictureProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    ShootPictureProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return ShootPictureProxy;
	}(ProxyBase_1.ProxyBase));
	exports.ShootPictureProxy = ShootPictureProxy;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var Pic_placeholderProxy_1 = __webpack_require__(23);
	var TypedDBFactory_1 = __webpack_require__(6);
	var PolaroidProxy = (function (_super) {
	    __extends(PolaroidProxy, _super);
	    function PolaroidProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    PolaroidProxy.prototype.get_placeholder = function () {
	        return new Pic_placeholderProxy_1.Pic_placeholderProxy(this._placeholder);
	    };
	    PolaroidProxy.prototype.gotoSmag = function () {
	        if (this._armature.animation.lastAnimationName != "smag") {
	            this._armature.animation.play("smag");
	        }
	    };
	    PolaroidProxy.prototype.gotoForm = function () {
	        if (this._armature.animation.lastAnimationName != "form") {
	            this._armature.animation.play("form");
	        }
	    };
	    PolaroidProxy.prototype.gotoFarve = function () {
	        if (this._armature.animation.lastAnimationName != "farve") {
	            this._armature.animation.play("farve");
	        }
	    };
	    PolaroidProxy.prototype.gotoFreemode = function () {
	        if (this._armature.animation.lastAnimationName != "freemode") {
	            this._armature.animation.play("freemode");
	        }
	    };
	    Object.defineProperty(PolaroidProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PolaroidProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PolaroidProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    PolaroidProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return PolaroidProxy;
	}(ProxyBase_1.ProxyBase));
	exports.PolaroidProxy = PolaroidProxy;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Pic_placeholderProxy = (function (_super) {
	    __extends(Pic_placeholderProxy, _super);
	    function Pic_placeholderProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Pic_placeholderProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Pic_placeholderProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Pic_placeholderProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Pic_placeholderProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Pic_placeholderProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Pic_placeholderProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Pic_placeholderProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Pic_placeholderProxy = Pic_placeholderProxy;


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var PolaroidProgressProxy = (function (_super) {
	    __extends(PolaroidProgressProxy, _super);
	    function PolaroidProgressProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    PolaroidProgressProxy.prototype.goto_0 = function () {
	        if (this._armature.animation.lastAnimationName != "_0") {
	            this._armature.animation.play("_0");
	        }
	    };
	    PolaroidProgressProxy.prototype.goto_1 = function () {
	        if (this._armature.animation.lastAnimationName != "_1") {
	            this._armature.animation.play("_1");
	        }
	    };
	    PolaroidProgressProxy.prototype.goto_2 = function () {
	        if (this._armature.animation.lastAnimationName != "_2") {
	            this._armature.animation.play("_2");
	        }
	    };
	    PolaroidProgressProxy.prototype.goto_3 = function () {
	        if (this._armature.animation.lastAnimationName != "_3") {
	            this._armature.animation.play("_3");
	        }
	    };
	    Object.defineProperty(PolaroidProgressProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PolaroidProgressProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PolaroidProgressProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    PolaroidProgressProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return PolaroidProgressProxy;
	}(ProxyBase_1.ProxyBase));
	exports.PolaroidProgressProxy = PolaroidProgressProxy;


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__cakeShapeProxy = (function (_super) {
	    __extends(BadGuy_christian__cakeShapeProxy, _super);
	    function BadGuy_christian__cakeShapeProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_christian__cakeShapeProxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    Object.defineProperty(BadGuy_christian__cakeShapeProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__cakeShapeProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__cakeShapeProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__cakeShapeProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__cakeShapeProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__cakeShapeProxy = BadGuy_christian__cakeShapeProxy;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__polaroidContentProxy = (function (_super) {
	    __extends(BadGuy_christian__polaroidContentProxy, _super);
	    function BadGuy_christian__polaroidContentProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_christian__polaroidContentProxy.prototype.gotoSmag = function () {
	        if (this._armature.animation.lastAnimationName != "smag") {
	            this._armature.animation.play("smag");
	        }
	    };
	    BadGuy_christian__polaroidContentProxy.prototype.gotoForm = function () {
	        if (this._armature.animation.lastAnimationName != "form") {
	            this._armature.animation.play("form");
	        }
	    };
	    BadGuy_christian__polaroidContentProxy.prototype.gotoFarve = function () {
	        if (this._armature.animation.lastAnimationName != "farve") {
	            this._armature.animation.play("farve");
	        }
	    };
	    Object.defineProperty(BadGuy_christian__polaroidContentProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__polaroidContentProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__polaroidContentProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__polaroidContentProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__polaroidContentProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__polaroidContentProxy = BadGuy_christian__polaroidContentProxy;


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BadGuy_christian__caracterProxy_1 = __webpack_require__(28);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__scene3_spySceneWalk_christianProxy = (function (_super) {
	    __extends(BadGuy_christian__scene3_spySceneWalk_christianProxy, _super);
	    function BadGuy_christian__scene3_spySceneWalk_christianProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_christian__scene3_spySceneWalk_christianProxy.prototype.getCharacter = function () {
	        return new BadGuy_christian__caracterProxy_1.BadGuy_christian__caracterProxy(this.character);
	    };
	    BadGuy_christian__scene3_spySceneWalk_christianProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_christian__scene3_spySceneWalk_christianProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    BadGuy_christian__scene3_spySceneWalk_christianProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    BadGuy_christian__scene3_spySceneWalk_christianProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    BadGuy_christian__scene3_spySceneWalk_christianProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(BadGuy_christian__scene3_spySceneWalk_christianProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__scene3_spySceneWalk_christianProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__scene3_spySceneWalk_christianProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__scene3_spySceneWalk_christianProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__scene3_spySceneWalk_christianProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__scene3_spySceneWalk_christianProxy = BadGuy_christian__scene3_spySceneWalk_christianProxy;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BadGuy_christian__chrHeadProxy_1 = __webpack_require__(29);
	var Chr_front_headProxy_1 = __webpack_require__(30);
	var BadGuy_christian__d_preb_idleallProxy_1 = __webpack_require__(31);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__caracterProxy = (function (_super) {
	    __extends(BadGuy_christian__caracterProxy, _super);
	    function BadGuy_christian__caracterProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_christian__caracterProxy.prototype.getChrHead = function () {
	        return new BadGuy_christian__chrHeadProxy_1.BadGuy_christian__chrHeadProxy(this.chrHead);
	    };
	    BadGuy_christian__caracterProxy.prototype.getHead = function () {
	        return new Chr_front_headProxy_1.Chr_front_headProxy(this.head);
	    };
	    BadGuy_christian__caracterProxy.prototype.getPreben = function () {
	        return new BadGuy_christian__d_preb_idleallProxy_1.BadGuy_christian__d_preb_idleallProxy(this.preben);
	    };
	    BadGuy_christian__caracterProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_christian__caracterProxy.prototype.gotoHotdog = function () {
	        if (this._armature.animation.lastAnimationName != "hotdog") {
	            this._armature.animation.play("hotdog");
	        }
	    };
	    BadGuy_christian__caracterProxy.prototype.gotoSpottet = function () {
	        if (this._armature.animation.lastAnimationName != "spottet") {
	            this._armature.animation.play("spottet");
	        }
	    };
	    BadGuy_christian__caracterProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(BadGuy_christian__caracterProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__caracterProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__caracterProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__caracterProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__caracterProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__caracterProxy = BadGuy_christian__caracterProxy;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__chrHeadProxy = (function (_super) {
	    __extends(BadGuy_christian__chrHeadProxy, _super);
	    function BadGuy_christian__chrHeadProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_christian__chrHeadProxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(BadGuy_christian__chrHeadProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__chrHeadProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__chrHeadProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__chrHeadProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__chrHeadProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__chrHeadProxy = BadGuy_christian__chrHeadProxy;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var Chr_front_headProxy = (function (_super) {
	    __extends(Chr_front_headProxy, _super);
	    function Chr_front_headProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Chr_front_headProxy.prototype.gotoTalk = function () {
	        if (this._armature.animation.lastAnimationName != "talk") {
	            this._armature.animation.play("talk");
	        }
	    };
	    Chr_front_headProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Chr_front_headProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(Chr_front_headProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Chr_front_headProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Chr_front_headProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Chr_front_headProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Chr_front_headProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Chr_front_headProxy = Chr_front_headProxy;


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BadGuy_christian__prebenHeadProxy_1 = __webpack_require__(32);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__d_preb_idleallProxy = (function (_super) {
	    __extends(BadGuy_christian__d_preb_idleallProxy, _super);
	    function BadGuy_christian__d_preb_idleallProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_christian__d_preb_idleallProxy.prototype.getHead = function () {
	        return new BadGuy_christian__prebenHeadProxy_1.BadGuy_christian__prebenHeadProxy(this.head);
	    };
	    BadGuy_christian__d_preb_idleallProxy.prototype.gotoIdle1 = function () {
	        if (this._armature.animation.lastAnimationName != "idle1") {
	            this._armature.animation.play("idle1");
	        }
	    };
	    BadGuy_christian__d_preb_idleallProxy.prototype.gotoHotdog = function () {
	        if (this._armature.animation.lastAnimationName != "hotdog") {
	            this._armature.animation.play("hotdog");
	        }
	    };
	    BadGuy_christian__d_preb_idleallProxy.prototype.gotoIdle = function () {
	        var methods = ["gotoIdle1"];
	        var randomIndex = Math.floor(Math.random() * methods.length);
	        this[methods[randomIndex]]();
	    };
	    Object.defineProperty(BadGuy_christian__d_preb_idleallProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__d_preb_idleallProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__d_preb_idleallProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__d_preb_idleallProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__d_preb_idleallProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__d_preb_idleallProxy = BadGuy_christian__d_preb_idleallProxy;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__prebenHeadProxy = (function (_super) {
	    __extends(BadGuy_christian__prebenHeadProxy, _super);
	    function BadGuy_christian__prebenHeadProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_christian__prebenHeadProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_christian__prebenHeadProxy.prototype.gotoTalk = function () {
	        if (this._armature.animation.lastAnimationName != "talk") {
	            this._armature.animation.play("talk");
	        }
	    };
	    BadGuy_christian__prebenHeadProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(BadGuy_christian__prebenHeadProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__prebenHeadProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__prebenHeadProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__prebenHeadProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__prebenHeadProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__prebenHeadProxy = BadGuy_christian__prebenHeadProxy;


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SpySceneTouchProxy_1 = __webpack_require__(18);
	var BadGuy_christian__screenframe1Proxy_1 = __webpack_require__(34);
	var BadGuy_christian__screenframe2Proxy_1 = __webpack_require__(35);
	var BadGuy_christian__screenframe3Proxy_1 = __webpack_require__(36);
	var BadGuy_christian__screenframe4Proxy_1 = __webpack_require__(37);
	var BadGuy_christian__machineVoiceProxy_1 = __webpack_require__(38);
	var BadGuy_christian__spyGlassProxy_1 = __webpack_require__(39);
	var Color_clueProxy_1 = __webpack_require__(14);
	var Form_clueProxy_1 = __webpack_require__(19);
	var Taste_clueProxy_1 = __webpack_require__(20);
	var ShootPictureProxy_1 = __webpack_require__(21);
	var PolaroidProgressProxy_1 = __webpack_require__(24);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__Scene4_InsideSpyProxy = (function (_super) {
	    __extends(BadGuy_christian__Scene4_InsideSpyProxy, _super);
	    function BadGuy_christian__Scene4_InsideSpyProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getTouch = function () {
	        return new SpySceneTouchProxy_1.SpySceneTouchProxy(this.touch);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getScreenframe1 = function () {
	        return new BadGuy_christian__screenframe1Proxy_1.BadGuy_christian__screenframe1Proxy(this.screenframe1);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getScreenframe2 = function () {
	        return new BadGuy_christian__screenframe2Proxy_1.BadGuy_christian__screenframe2Proxy(this.screenframe2);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getScreenframe3 = function () {
	        return new BadGuy_christian__screenframe3Proxy_1.BadGuy_christian__screenframe3Proxy(this.screenframe3);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getScreenframe4 = function () {
	        return new BadGuy_christian__screenframe4Proxy_1.BadGuy_christian__screenframe4Proxy(this.screenframe4);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getScreenframe20 = function () {
	        return new BadGuy_christian__screenframe2Proxy_1.BadGuy_christian__screenframe2Proxy(this.screenframe20);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getScreenframe10 = function () {
	        return new BadGuy_christian__screenframe1Proxy_1.BadGuy_christian__screenframe1Proxy(this.screenframe10);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getScreenframe40 = function () {
	        return new BadGuy_christian__screenframe4Proxy_1.BadGuy_christian__screenframe4Proxy(this.screenframe40);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getMachineVoice = function () {
	        return new BadGuy_christian__machineVoiceProxy_1.BadGuy_christian__machineVoiceProxy(this.machineVoice);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getSpyGlassArm = function () {
	        return new BadGuy_christian__spyGlassProxy_1.BadGuy_christian__spyGlassProxy(this.spyGlassArm);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getColor_clue = function () {
	        return new Color_clueProxy_1.Color_clueProxy(this.Color_clue);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getForm_clue = function () {
	        return new Form_clueProxy_1.Form_clueProxy(this.Form_clue);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getTaste_clue = function () {
	        return new Taste_clueProxy_1.Taste_clueProxy(this.Taste_clue);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getShootPicture = function () {
	        return new ShootPictureProxy_1.ShootPictureProxy(this.shootPicture);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.getProgress = function () {
	        return new PolaroidProgressProxy_1.PolaroidProgressProxy(this.progress);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(BadGuy_christian__Scene4_InsideSpyProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__Scene4_InsideSpyProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__Scene4_InsideSpyProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__Scene4_InsideSpyProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__Scene4_InsideSpyProxy = BadGuy_christian__Scene4_InsideSpyProxy;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__screenframe1Proxy = (function (_super) {
	    __extends(BadGuy_christian__screenframe1Proxy, _super);
	    function BadGuy_christian__screenframe1Proxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_christian__screenframe1Proxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(BadGuy_christian__screenframe1Proxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__screenframe1Proxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__screenframe1Proxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__screenframe1Proxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__screenframe1Proxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__screenframe1Proxy = BadGuy_christian__screenframe1Proxy;


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__screenframe2Proxy = (function (_super) {
	    __extends(BadGuy_christian__screenframe2Proxy, _super);
	    function BadGuy_christian__screenframe2Proxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_christian__screenframe2Proxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(BadGuy_christian__screenframe2Proxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__screenframe2Proxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__screenframe2Proxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__screenframe2Proxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__screenframe2Proxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__screenframe2Proxy = BadGuy_christian__screenframe2Proxy;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__screenframe3Proxy = (function (_super) {
	    __extends(BadGuy_christian__screenframe3Proxy, _super);
	    function BadGuy_christian__screenframe3Proxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_christian__screenframe3Proxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(BadGuy_christian__screenframe3Proxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__screenframe3Proxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__screenframe3Proxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__screenframe3Proxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__screenframe3Proxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__screenframe3Proxy = BadGuy_christian__screenframe3Proxy;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__screenframe4Proxy = (function (_super) {
	    __extends(BadGuy_christian__screenframe4Proxy, _super);
	    function BadGuy_christian__screenframe4Proxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_christian__screenframe4Proxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(BadGuy_christian__screenframe4Proxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__screenframe4Proxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__screenframe4Proxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__screenframe4Proxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__screenframe4Proxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__screenframe4Proxy = BadGuy_christian__screenframe4Proxy;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__machineVoiceProxy = (function (_super) {
	    __extends(BadGuy_christian__machineVoiceProxy, _super);
	    function BadGuy_christian__machineVoiceProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_christian__machineVoiceProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_christian__machineVoiceProxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    BadGuy_christian__machineVoiceProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(BadGuy_christian__machineVoiceProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__machineVoiceProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__machineVoiceProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__machineVoiceProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__machineVoiceProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__machineVoiceProxy = BadGuy_christian__machineVoiceProxy;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_christian__spyGlassProxy = (function (_super) {
	    __extends(BadGuy_christian__spyGlassProxy, _super);
	    function BadGuy_christian__spyGlassProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_christian__spyGlassProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    BadGuy_christian__spyGlassProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    BadGuy_christian__spyGlassProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(BadGuy_christian__spyGlassProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__spyGlassProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__spyGlassProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_christian__spyGlassProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_christian__spyGlassProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_christian__spyGlassProxy = BadGuy_christian__spyGlassProxy;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_mille__cakeShape_milleProxy = (function (_super) {
	    __extends(BadGuy_mille__cakeShape_milleProxy, _super);
	    function BadGuy_mille__cakeShape_milleProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_mille__cakeShape_milleProxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    Object.defineProperty(BadGuy_mille__cakeShape_milleProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_mille__cakeShape_milleProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_mille__cakeShape_milleProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_mille__cakeShape_milleProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_mille__cakeShape_milleProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_mille__cakeShape_milleProxy = BadGuy_mille__cakeShape_milleProxy;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_mille__polaroidContentProxy = (function (_super) {
	    __extends(BadGuy_mille__polaroidContentProxy, _super);
	    function BadGuy_mille__polaroidContentProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_mille__polaroidContentProxy.prototype.gotoSmag = function () {
	        if (this._armature.animation.lastAnimationName != "smag") {
	            this._armature.animation.play("smag");
	        }
	    };
	    BadGuy_mille__polaroidContentProxy.prototype.gotoFarve = function () {
	        if (this._armature.animation.lastAnimationName != "farve") {
	            this._armature.animation.play("farve");
	        }
	    };
	    BadGuy_mille__polaroidContentProxy.prototype.gotoFarve0 = function () {
	        if (this._armature.animation.lastAnimationName != "farve0") {
	            this._armature.animation.play("farve0");
	        }
	    };
	    Object.defineProperty(BadGuy_mille__polaroidContentProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_mille__polaroidContentProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_mille__polaroidContentProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_mille__polaroidContentProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_mille__polaroidContentProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_mille__polaroidContentProxy = BadGuy_mille__polaroidContentProxy;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BadGuy_mille__caracter_milleProxy_1 = __webpack_require__(43);
	var HimstregimsFuglProxy_1 = __webpack_require__(46);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_mille__scene3_spySceneWalk_milleProxy = (function (_super) {
	    __extends(BadGuy_mille__scene3_spySceneWalk_milleProxy, _super);
	    function BadGuy_mille__scene3_spySceneWalk_milleProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_mille__scene3_spySceneWalk_milleProxy.prototype.getCharacter = function () {
	        return new BadGuy_mille__caracter_milleProxy_1.BadGuy_mille__caracter_milleProxy(this.character);
	    };
	    BadGuy_mille__scene3_spySceneWalk_milleProxy.prototype.getHimstregimsFugl = function () {
	        return new HimstregimsFuglProxy_1.HimstregimsFuglProxy(this.himstregimsFugl);
	    };
	    BadGuy_mille__scene3_spySceneWalk_milleProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_mille__scene3_spySceneWalk_milleProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    BadGuy_mille__scene3_spySceneWalk_milleProxy.prototype.gotoOutro = function () {
	        if (this._armature.animation.lastAnimationName != "outro") {
	            this._armature.animation.play("outro");
	        }
	    };
	    BadGuy_mille__scene3_spySceneWalk_milleProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    BadGuy_mille__scene3_spySceneWalk_milleProxy.prototype.gotoOuttro = function () {
	        this.gotoOutro();
	    };
	    Object.defineProperty(BadGuy_mille__scene3_spySceneWalk_milleProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_mille__scene3_spySceneWalk_milleProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_mille__scene3_spySceneWalk_milleProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_mille__scene3_spySceneWalk_milleProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_mille__scene3_spySceneWalk_milleProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_mille__scene3_spySceneWalk_milleProxy = BadGuy_mille__scene3_spySceneWalk_milleProxy;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var MilleFront_headProxy_1 = __webpack_require__(44);
	var MilleMouthProxy_1 = __webpack_require__(45);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_mille__caracter_milleProxy = (function (_super) {
	    __extends(BadGuy_mille__caracter_milleProxy, _super);
	    function BadGuy_mille__caracter_milleProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_mille__caracter_milleProxy.prototype.getHead = function () {
	        return new MilleFront_headProxy_1.MilleFront_headProxy(this.head);
	    };
	    BadGuy_mille__caracter_milleProxy.prototype.getMilleFront_mouth = function () {
	        return new MilleMouthProxy_1.MilleMouthProxy(this.milleFront_mouth);
	    };
	    BadGuy_mille__caracter_milleProxy.prototype.gotoIdle1 = function () {
	        if (this._armature.animation.lastAnimationName != "idle1") {
	            this._armature.animation.play("idle1");
	        }
	    };
	    BadGuy_mille__caracter_milleProxy.prototype.gotoIdle2 = function () {
	        if (this._armature.animation.lastAnimationName != "idle2") {
	            this._armature.animation.play("idle2");
	        }
	    };
	    BadGuy_mille__caracter_milleProxy.prototype.gotoIdle3 = function () {
	        if (this._armature.animation.lastAnimationName != "idle3") {
	            this._armature.animation.play("idle3");
	        }
	    };
	    BadGuy_mille__caracter_milleProxy.prototype.gotoSpottet = function () {
	        if (this._armature.animation.lastAnimationName != "spottet") {
	            this._armature.animation.play("spottet");
	        }
	    };
	    BadGuy_mille__caracter_milleProxy.prototype.gotoIdle = function () {
	        var methods = ["gotoIdle1", "gotoIdle2", "gotoIdle3"];
	        var randomIndex = Math.floor(Math.random() * methods.length);
	        this[methods[randomIndex]]();
	    };
	    Object.defineProperty(BadGuy_mille__caracter_milleProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_mille__caracter_milleProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_mille__caracter_milleProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_mille__caracter_milleProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_mille__caracter_milleProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_mille__caracter_milleProxy = BadGuy_mille__caracter_milleProxy;


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var MilleFront_headProxy = (function (_super) {
	    __extends(MilleFront_headProxy, _super);
	    function MilleFront_headProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    MilleFront_headProxy.prototype.gotoTalk = function () {
	        if (this._armature.animation.lastAnimationName != "talk") {
	            this._armature.animation.play("talk");
	        }
	    };
	    MilleFront_headProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    MilleFront_headProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(MilleFront_headProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MilleFront_headProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MilleFront_headProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    MilleFront_headProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return MilleFront_headProxy;
	}(ProxyBase_1.ProxyBase));
	exports.MilleFront_headProxy = MilleFront_headProxy;


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var MilleMouthProxy = (function (_super) {
	    __extends(MilleMouthProxy, _super);
	    function MilleMouthProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    MilleMouthProxy.prototype.gotoSpottet = function () {
	        if (this._armature.animation.lastAnimationName != "spottet") {
	            this._armature.animation.play("spottet");
	        }
	    };
	    Object.defineProperty(MilleMouthProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MilleMouthProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MilleMouthProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    MilleMouthProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return MilleMouthProxy;
	}(ProxyBase_1.ProxyBase));
	exports.MilleMouthProxy = MilleMouthProxy;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var HimstregimsFuglPosProxy_1 = __webpack_require__(47);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var HimstregimsFuglProxy = (function (_super) {
	    __extends(HimstregimsFuglProxy, _super);
	    function HimstregimsFuglProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    HimstregimsFuglProxy.prototype.getHimstregimsFugl = function () {
	        return new HimstregimsFuglPosProxy_1.HimstregimsFuglPosProxy(this.himstregimsFugl);
	    };
	    HimstregimsFuglProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    HimstregimsFuglProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(HimstregimsFuglProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HimstregimsFuglProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HimstregimsFuglProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    HimstregimsFuglProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return HimstregimsFuglProxy;
	}(ProxyBase_1.ProxyBase));
	exports.HimstregimsFuglProxy = HimstregimsFuglProxy;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var HimstregimsFuglBobbingUpDownProxy_1 = __webpack_require__(48);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var HimstregimsFuglPosProxy = (function (_super) {
	    __extends(HimstregimsFuglPosProxy, _super);
	    function HimstregimsFuglPosProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    HimstregimsFuglPosProxy.prototype.getHimstregimsFuglUpDown = function () {
	        return new HimstregimsFuglBobbingUpDownProxy_1.HimstregimsFuglBobbingUpDownProxy(this.himstregimsFuglUpDown);
	    };
	    HimstregimsFuglPosProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    HimstregimsFuglPosProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(HimstregimsFuglPosProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HimstregimsFuglPosProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HimstregimsFuglPosProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    HimstregimsFuglPosProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return HimstregimsFuglPosProxy;
	}(ProxyBase_1.ProxyBase));
	exports.HimstregimsFuglPosProxy = HimstregimsFuglPosProxy;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var HimstregimsFuglBobbingUpDownProxy = (function (_super) {
	    __extends(HimstregimsFuglBobbingUpDownProxy, _super);
	    function HimstregimsFuglBobbingUpDownProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    HimstregimsFuglBobbingUpDownProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    HimstregimsFuglBobbingUpDownProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(HimstregimsFuglBobbingUpDownProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HimstregimsFuglBobbingUpDownProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HimstregimsFuglBobbingUpDownProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    HimstregimsFuglBobbingUpDownProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return HimstregimsFuglBobbingUpDownProxy;
	}(ProxyBase_1.ProxyBase));
	exports.HimstregimsFuglBobbingUpDownProxy = HimstregimsFuglBobbingUpDownProxy;


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SpySceneTouchProxy_1 = __webpack_require__(18);
	var ShootPictureProxy_1 = __webpack_require__(21);
	var Color_clueProxy_1 = __webpack_require__(14);
	var Form_clueProxy_1 = __webpack_require__(19);
	var Taste_clueProxy_1 = __webpack_require__(20);
	var PolaroidProgressProxy_1 = __webpack_require__(24);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_mille__Scene4_InsideSpyProxy = (function (_super) {
	    __extends(BadGuy_mille__Scene4_InsideSpyProxy, _super);
	    function BadGuy_mille__Scene4_InsideSpyProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.getTouch = function () {
	        return new SpySceneTouchProxy_1.SpySceneTouchProxy(this.touch);
	    };
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.getShootPicture = function () {
	        return new ShootPictureProxy_1.ShootPictureProxy(this.shootPicture);
	    };
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.getColor_clue = function () {
	        return new Color_clueProxy_1.Color_clueProxy(this.Color_clue);
	    };
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.getForm_clue = function () {
	        return new Form_clueProxy_1.Form_clueProxy(this.Form_clue);
	    };
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.getTaste_clue = function () {
	        return new Taste_clueProxy_1.Taste_clueProxy(this.Taste_clue);
	    };
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.getProgress = function () {
	        return new PolaroidProgressProxy_1.PolaroidProgressProxy(this.progress);
	    };
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.gotoOutro = function () {
	        if (this._armature.animation.lastAnimationName != "outro") {
	            this._armature.animation.play("outro");
	        }
	    };
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.gotoOuttro = function () {
	        this.gotoOutro();
	    };
	    Object.defineProperty(BadGuy_mille__Scene4_InsideSpyProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_mille__Scene4_InsideSpyProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_mille__Scene4_InsideSpyProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_mille__Scene4_InsideSpyProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_mille__Scene4_InsideSpyProxy = BadGuy_mille__Scene4_InsideSpyProxy;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_skaeg__cakeShapeProxy = (function (_super) {
	    __extends(BadGuy_skaeg__cakeShapeProxy, _super);
	    function BadGuy_skaeg__cakeShapeProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_skaeg__cakeShapeProxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    Object.defineProperty(BadGuy_skaeg__cakeShapeProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_skaeg__cakeShapeProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_skaeg__cakeShapeProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_skaeg__cakeShapeProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_skaeg__cakeShapeProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_skaeg__cakeShapeProxy = BadGuy_skaeg__cakeShapeProxy;


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BadGuy_skaeg__caracterProxy_1 = __webpack_require__(52);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_skaeg__scene3_spySceneWalk_skaegProxy = (function (_super) {
	    __extends(BadGuy_skaeg__scene3_spySceneWalk_skaegProxy, _super);
	    function BadGuy_skaeg__scene3_spySceneWalk_skaegProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_skaeg__scene3_spySceneWalk_skaegProxy.prototype.getCharacter = function () {
	        return new BadGuy_skaeg__caracterProxy_1.BadGuy_skaeg__caracterProxy(this.character);
	    };
	    BadGuy_skaeg__scene3_spySceneWalk_skaegProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_skaeg__scene3_spySceneWalk_skaegProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    BadGuy_skaeg__scene3_spySceneWalk_skaegProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    BadGuy_skaeg__scene3_spySceneWalk_skaegProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    BadGuy_skaeg__scene3_spySceneWalk_skaegProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(BadGuy_skaeg__scene3_spySceneWalk_skaegProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_skaeg__scene3_spySceneWalk_skaegProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_skaeg__scene3_spySceneWalk_skaegProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_skaeg__scene3_spySceneWalk_skaegProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_skaeg__scene3_spySceneWalk_skaegProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_skaeg__scene3_spySceneWalk_skaegProxy = BadGuy_skaeg__scene3_spySceneWalk_skaegProxy;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SkaegFrontHeadProxy_1 = __webpack_require__(53);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_skaeg__caracterProxy = (function (_super) {
	    __extends(BadGuy_skaeg__caracterProxy, _super);
	    function BadGuy_skaeg__caracterProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_skaeg__caracterProxy.prototype.getHead = function () {
	        return new SkaegFrontHeadProxy_1.SkaegFrontHeadProxy(this.head);
	    };
	    BadGuy_skaeg__caracterProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_skaeg__caracterProxy.prototype.gotoSpottet = function () {
	        if (this._armature.animation.lastAnimationName != "spottet") {
	            this._armature.animation.play("spottet");
	        }
	    };
	    BadGuy_skaeg__caracterProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(BadGuy_skaeg__caracterProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_skaeg__caracterProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_skaeg__caracterProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_skaeg__caracterProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_skaeg__caracterProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_skaeg__caracterProxy = BadGuy_skaeg__caracterProxy;


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var SkaegFrontHeadProxy = (function (_super) {
	    __extends(SkaegFrontHeadProxy, _super);
	    function SkaegFrontHeadProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    SkaegFrontHeadProxy.prototype.gotoTalk = function () {
	        if (this._armature.animation.lastAnimationName != "talk") {
	            this._armature.animation.play("talk");
	        }
	    };
	    SkaegFrontHeadProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    SkaegFrontHeadProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(SkaegFrontHeadProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SkaegFrontHeadProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SkaegFrontHeadProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    SkaegFrontHeadProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return SkaegFrontHeadProxy;
	}(ProxyBase_1.ProxyBase));
	exports.SkaegFrontHeadProxy = SkaegFrontHeadProxy;


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ShootPictureProxy_1 = __webpack_require__(21);
	var SpySceneTouchProxy_1 = __webpack_require__(18);
	var Color_clueProxy_1 = __webpack_require__(14);
	var Form_clueProxy_1 = __webpack_require__(19);
	var Taste_clueProxy_1 = __webpack_require__(20);
	var PolaroidProgressProxy_1 = __webpack_require__(24);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_skaeg__Scene4_InsideSpyProxy = (function (_super) {
	    __extends(BadGuy_skaeg__Scene4_InsideSpyProxy, _super);
	    function BadGuy_skaeg__Scene4_InsideSpyProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.getShootPicture = function () {
	        return new ShootPictureProxy_1.ShootPictureProxy(this.shootPicture);
	    };
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.getTouch = function () {
	        return new SpySceneTouchProxy_1.SpySceneTouchProxy(this.touch);
	    };
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.getColor_clue = function () {
	        return new Color_clueProxy_1.Color_clueProxy(this.Color_clue);
	    };
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.getForm_clue = function () {
	        return new Form_clueProxy_1.Form_clueProxy(this.Form_clue);
	    };
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.getTaste_clue = function () {
	        return new Taste_clueProxy_1.Taste_clueProxy(this.Taste_clue);
	    };
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.getProgress = function () {
	        return new PolaroidProgressProxy_1.PolaroidProgressProxy(this.progress);
	    };
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(BadGuy_skaeg__Scene4_InsideSpyProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_skaeg__Scene4_InsideSpyProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_skaeg__Scene4_InsideSpyProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_skaeg__Scene4_InsideSpyProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_skaeg__Scene4_InsideSpyProxy = BadGuy_skaeg__Scene4_InsideSpyProxy;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Bar2Proxy_1 = __webpack_require__(56);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BarometerProxy = (function (_super) {
	    __extends(BarometerProxy, _super);
	    function BarometerProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BarometerProxy.prototype.getBAR = function () {
	        return new Bar2Proxy_1.Bar2Proxy(this.BAR);
	    };
	    BarometerProxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    BarometerProxy.prototype.gotoBusted = function () {
	        if (this._armature.animation.lastAnimationName != "busted") {
	            this._armature.animation.play("busted");
	        }
	    };
	    Object.defineProperty(BarometerProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BarometerProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BarometerProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BarometerProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BarometerProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BarometerProxy = BarometerProxy;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var Bar2Proxy = (function (_super) {
	    __extends(Bar2Proxy, _super);
	    function Bar2Proxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Bar2Proxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    Object.defineProperty(Bar2Proxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Bar2Proxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Bar2Proxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Bar2Proxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Bar2Proxy;
	}(ProxyBase_1.ProxyBase));
	exports.Bar2Proxy = Bar2Proxy;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BlueBrushProxy = (function (_super) {
	    __extends(BlueBrushProxy, _super);
	    function BlueBrushProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BlueBrushProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BlueBrushProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(BlueBrushProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BlueBrushProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BlueBrushProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BlueBrushProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BlueBrushProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BlueBrushProxy = BlueBrushProxy;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Deco__blueKrymmelDragProxy = (function (_super) {
	    __extends(Deco__blueKrymmelDragProxy, _super);
	    function Deco__blueKrymmelDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Deco__blueKrymmelDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Deco__blueKrymmelDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Deco__blueKrymmelDragProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Deco__blueKrymmelDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Deco__blueKrymmelDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Deco__blueKrymmelDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Deco__blueKrymmelDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Deco__blueKrymmelDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Deco__blueKrymmelDragProxy;
	}(PIXI.DisplayObject));
	exports.Deco__blueKrymmelDragProxy = Deco__blueKrymmelDragProxy;


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Deco__chocolateDragProxy = (function (_super) {
	    __extends(Deco__chocolateDragProxy, _super);
	    function Deco__chocolateDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Deco__chocolateDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Deco__chocolateDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Deco__chocolateDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Deco__chocolateDragProxy.prototype.gotoDrop = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Deco__chocolateDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Deco__chocolateDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Deco__chocolateDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Deco__chocolateDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Deco__chocolateDragProxy;
	}(PIXI.DisplayObject));
	exports.Deco__chocolateDragProxy = Deco__chocolateDragProxy;


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Deco__cocosDragProxy = (function (_super) {
	    __extends(Deco__cocosDragProxy, _super);
	    function Deco__cocosDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Deco__cocosDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Deco__cocosDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Deco__cocosDragProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Deco__cocosDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Deco__cocosDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Deco__cocosDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Deco__cocosDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Deco__cocosDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Deco__cocosDragProxy;
	}(PIXI.DisplayObject));
	exports.Deco__cocosDragProxy = Deco__cocosDragProxy;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Deco__colorKrymmelDragProxy = (function (_super) {
	    __extends(Deco__colorKrymmelDragProxy, _super);
	    function Deco__colorKrymmelDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Deco__colorKrymmelDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Deco__colorKrymmelDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Deco__colorKrymmelDragProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Deco__colorKrymmelDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Deco__colorKrymmelDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Deco__colorKrymmelDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Deco__colorKrymmelDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Deco__colorKrymmelDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Deco__colorKrymmelDragProxy;
	}(PIXI.DisplayObject));
	exports.Deco__colorKrymmelDragProxy = Deco__colorKrymmelDragProxy;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var StrawberryDragProxy_1 = __webpack_require__(63);
	var BlueKrymmelDragProxy_1 = __webpack_require__(64);
	var ColorKrymmelDragProxy_1 = __webpack_require__(65);
	var PineappleDragProxy_1 = __webpack_require__(66);
	var CocosDragProxy_1 = __webpack_require__(67);
	var KiwiDragProxy_1 = __webpack_require__(68);
	var Deco__flagDragProxy_1 = __webpack_require__(69);
	var LakridsDragProxy_1 = __webpack_require__(70);
	var Deco__chocolateDragProxy_1 = __webpack_require__(59);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var Deco__DragablesProxy = (function (_super) {
	    __extends(Deco__DragablesProxy, _super);
	    function Deco__DragablesProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Deco__DragablesProxy.prototype.getStrawberryDrag = function () {
	        return new StrawberryDragProxy_1.StrawberryDragProxy(this.strawberryDrag);
	    };
	    Deco__DragablesProxy.prototype.getBlueKrymmelDrag = function () {
	        return new BlueKrymmelDragProxy_1.BlueKrymmelDragProxy(this.blueKrymmelDrag);
	    };
	    Deco__DragablesProxy.prototype.getColorKrymmelDrag = function () {
	        return new ColorKrymmelDragProxy_1.ColorKrymmelDragProxy(this.colorKrymmelDrag);
	    };
	    Deco__DragablesProxy.prototype.getPineappleDrag = function () {
	        return new PineappleDragProxy_1.PineappleDragProxy(this.pineappleDrag);
	    };
	    Deco__DragablesProxy.prototype.getCocosDrag = function () {
	        return new CocosDragProxy_1.CocosDragProxy(this.cocosDrag);
	    };
	    Deco__DragablesProxy.prototype.getKiwiDrag = function () {
	        return new KiwiDragProxy_1.KiwiDragProxy(this.kiwiDrag);
	    };
	    Deco__DragablesProxy.prototype.getFlagDrag = function () {
	        return new Deco__flagDragProxy_1.Deco__flagDragProxy(this.flagDrag);
	    };
	    Deco__DragablesProxy.prototype.getLakridsDrag = function () {
	        return new LakridsDragProxy_1.LakridsDragProxy(this.lakridsDrag);
	    };
	    Deco__DragablesProxy.prototype.getChocolateDrag = function () {
	        return new Deco__chocolateDragProxy_1.Deco__chocolateDragProxy(this.chocolateDrag);
	    };
	    Deco__DragablesProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Deco__DragablesProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Deco__DragablesProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Deco__DragablesProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Deco__DragablesProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Deco__DragablesProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Deco__DragablesProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Deco__DragablesProxy = Deco__DragablesProxy;


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var StrawberryDragProxy = (function (_super) {
	    __extends(StrawberryDragProxy, _super);
	    function StrawberryDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    StrawberryDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    StrawberryDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    StrawberryDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    StrawberryDragProxy.prototype.gotoDrop = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(StrawberryDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StrawberryDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    StrawberryDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    StrawberryDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return StrawberryDragProxy;
	}(PIXI.DisplayObject));
	exports.StrawberryDragProxy = StrawberryDragProxy;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var BlueKrymmelDragProxy = (function (_super) {
	    __extends(BlueKrymmelDragProxy, _super);
	    function BlueKrymmelDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BlueKrymmelDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BlueKrymmelDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    BlueKrymmelDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    BlueKrymmelDragProxy.prototype.gotoDrop = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(BlueKrymmelDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BlueKrymmelDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BlueKrymmelDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BlueKrymmelDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BlueKrymmelDragProxy;
	}(PIXI.DisplayObject));
	exports.BlueKrymmelDragProxy = BlueKrymmelDragProxy;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ColorKrymmelDragProxy = (function (_super) {
	    __extends(ColorKrymmelDragProxy, _super);
	    function ColorKrymmelDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    ColorKrymmelDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    ColorKrymmelDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    ColorKrymmelDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    ColorKrymmelDragProxy.prototype.gotoDrop = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(ColorKrymmelDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ColorKrymmelDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ColorKrymmelDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    ColorKrymmelDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return ColorKrymmelDragProxy;
	}(PIXI.DisplayObject));
	exports.ColorKrymmelDragProxy = ColorKrymmelDragProxy;


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var PineappleDragProxy = (function (_super) {
	    __extends(PineappleDragProxy, _super);
	    function PineappleDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    PineappleDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    PineappleDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    PineappleDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    PineappleDragProxy.prototype.gotoDrop = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(PineappleDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PineappleDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PineappleDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    PineappleDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return PineappleDragProxy;
	}(PIXI.DisplayObject));
	exports.PineappleDragProxy = PineappleDragProxy;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var CocosDragProxy = (function (_super) {
	    __extends(CocosDragProxy, _super);
	    function CocosDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    CocosDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    CocosDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    CocosDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    CocosDragProxy.prototype.gotoDrop = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(CocosDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CocosDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CocosDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    CocosDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return CocosDragProxy;
	}(PIXI.DisplayObject));
	exports.CocosDragProxy = CocosDragProxy;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var KiwiDragProxy = (function (_super) {
	    __extends(KiwiDragProxy, _super);
	    function KiwiDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    KiwiDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    KiwiDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    KiwiDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    KiwiDragProxy.prototype.gotoDrop = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(KiwiDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(KiwiDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    KiwiDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    KiwiDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return KiwiDragProxy;
	}(PIXI.DisplayObject));
	exports.KiwiDragProxy = KiwiDragProxy;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Deco__flagDragProxy = (function (_super) {
	    __extends(Deco__flagDragProxy, _super);
	    function Deco__flagDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Deco__flagDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Deco__flagDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Deco__flagDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Deco__flagDragProxy.prototype.gotoDrop = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Deco__flagDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Deco__flagDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Deco__flagDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Deco__flagDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Deco__flagDragProxy;
	}(PIXI.DisplayObject));
	exports.Deco__flagDragProxy = Deco__flagDragProxy;


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var LakridsDragProxy = (function (_super) {
	    __extends(LakridsDragProxy, _super);
	    function LakridsDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    LakridsDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    LakridsDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    LakridsDragProxy.prototype.gotoDrag1 = function () {
	        if (this._armature.animation.lastAnimationName != "drag1") {
	            this._armature.animation.play("drag1");
	        }
	    };
	    LakridsDragProxy.prototype.gotoDrag2 = function () {
	        if (this._armature.animation.lastAnimationName != "drag2") {
	            this._armature.animation.play("drag2");
	        }
	    };
	    LakridsDragProxy.prototype.gotoDrag3 = function () {
	        if (this._armature.animation.lastAnimationName != "drag3") {
	            this._armature.animation.play("drag3");
	        }
	    };
	    LakridsDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    LakridsDragProxy.prototype.gotoDrop = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(LakridsDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(LakridsDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    LakridsDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    LakridsDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return LakridsDragProxy;
	}(PIXI.DisplayObject));
	exports.LakridsDragProxy = LakridsDragProxy;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Deco__kiwiDragProxy = (function (_super) {
	    __extends(Deco__kiwiDragProxy, _super);
	    function Deco__kiwiDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Deco__kiwiDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Deco__kiwiDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Deco__kiwiDragProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Deco__kiwiDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Deco__kiwiDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Deco__kiwiDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Deco__kiwiDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Deco__kiwiDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Deco__kiwiDragProxy;
	}(PIXI.DisplayObject));
	exports.Deco__kiwiDragProxy = Deco__kiwiDragProxy;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Deco__lakridsDragProxy = (function (_super) {
	    __extends(Deco__lakridsDragProxy, _super);
	    function Deco__lakridsDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Deco__lakridsDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Deco__lakridsDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Deco__lakridsDragProxy.prototype.gotoDrag1 = function () {
	        if (this._armature.animation.lastAnimationName != "drag1") {
	            this._armature.animation.play("drag1");
	        }
	    };
	    Deco__lakridsDragProxy.prototype.gotoDrag2 = function () {
	        if (this._armature.animation.lastAnimationName != "drag2") {
	            this._armature.animation.play("drag2");
	        }
	    };
	    Deco__lakridsDragProxy.prototype.gotoDrag3 = function () {
	        if (this._armature.animation.lastAnimationName != "drag3") {
	            this._armature.animation.play("drag3");
	        }
	    };
	    Deco__lakridsDragProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Deco__lakridsDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Deco__lakridsDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Deco__lakridsDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Deco__lakridsDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Deco__lakridsDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Deco__lakridsDragProxy;
	}(PIXI.DisplayObject));
	exports.Deco__lakridsDragProxy = Deco__lakridsDragProxy;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Deco__pineappleDragProxy = (function (_super) {
	    __extends(Deco__pineappleDragProxy, _super);
	    function Deco__pineappleDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Deco__pineappleDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Deco__pineappleDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Deco__pineappleDragProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Deco__pineappleDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Deco__pineappleDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Deco__pineappleDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Deco__pineappleDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Deco__pineappleDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Deco__pineappleDragProxy;
	}(PIXI.DisplayObject));
	exports.Deco__pineappleDragProxy = Deco__pineappleDragProxy;


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Deco__strawberryDragProxy = (function (_super) {
	    __extends(Deco__strawberryDragProxy, _super);
	    function Deco__strawberryDragProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Deco__strawberryDragProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Deco__strawberryDragProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Deco__strawberryDragProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Deco__strawberryDragProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Deco__strawberryDragProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Deco__strawberryDragProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Deco__strawberryDragProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Deco__strawberryDragProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Deco__strawberryDragProxy;
	}(PIXI.DisplayObject));
	exports.Deco__strawberryDragProxy = Deco__strawberryDragProxy;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var DefaultCakeArmProxy = (function (_super) {
	    __extends(DefaultCakeArmProxy, _super);
	    function DefaultCakeArmProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    DefaultCakeArmProxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    Object.defineProperty(DefaultCakeArmProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DefaultCakeArmProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DefaultCakeArmProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    DefaultCakeArmProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return DefaultCakeArmProxy;
	}(ProxyBase_1.ProxyBase));
	exports.DefaultCakeArmProxy = DefaultCakeArmProxy;


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Disquise_bamseProxy = (function (_super) {
	    __extends(Disquise_bamseProxy, _super);
	    function Disquise_bamseProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Disquise_bamseProxy.prototype.gotoWalk = function () {
	        if (this._armature.animation.lastAnimationName != "walk") {
	            this._armature.animation.play("walk");
	        }
	    };
	    Disquise_bamseProxy.prototype.gotoSit = function () {
	        if (this._armature.animation.lastAnimationName != "sit") {
	            this._armature.animation.play("sit");
	        }
	    };
	    Disquise_bamseProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Disquise_bamseProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(Disquise_bamseProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Disquise_bamseProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Disquise_bamseProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Disquise_bamseProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Disquise_bamseProxy;
	}(PIXI.DisplayObject));
	exports.Disquise_bamseProxy = Disquise_bamseProxy;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Disquise_christianProxy = (function (_super) {
	    __extends(Disquise_christianProxy, _super);
	    function Disquise_christianProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Disquise_christianProxy.prototype.gotoWalk = function () {
	        if (this.armature.animation.lastAnimationName != "walk") {
	            this.armature.animation.gotoAndPlay("walk");
	        }
	    };
	    Disquise_christianProxy.prototype.gotoSit = function () {
	        if (this.armature.animation.lastAnimationName != "sit") {
	            this.armature.animation.gotoAndPlay("sit");
	        }
	    };
	    Disquise_christianProxy.prototype.gotoIdle = function () {
	        if (this.armature.animation.lastAnimationName != "idle") {
	            this.armature.animation.gotoAndPlay("idle");
	        }
	    };
	    Disquise_christianProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(Disquise_christianProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Disquise_christianProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this.armature.getSlots().length == 1) {
	                var slot = this.armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Disquise_christianProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this.armature);
	    };
	    Disquise_christianProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this.armature);
	    };
	    return Disquise_christianProxy;
	}(PIXI.DisplayObject));
	exports.Disquise_christianProxy = Disquise_christianProxy;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Disquise_milleProxy = (function (_super) {
	    __extends(Disquise_milleProxy, _super);
	    function Disquise_milleProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Disquise_milleProxy.prototype.gotoWalk = function () {
	        if (this._armature.animation.lastAnimationName != "walk") {
	            this._armature.animation.play("walk");
	        }
	    };
	    Disquise_milleProxy.prototype.gotoSit = function () {
	        if (this._armature.animation.lastAnimationName != "sit") {
	            this._armature.animation.play("sit");
	        }
	    };
	    Disquise_milleProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Disquise_milleProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(Disquise_milleProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Disquise_milleProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Disquise_milleProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Disquise_milleProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Disquise_milleProxy;
	}(PIXI.DisplayObject));
	exports.Disquise_milleProxy = Disquise_milleProxy;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Disquise_skaegProxy = (function (_super) {
	    __extends(Disquise_skaegProxy, _super);
	    function Disquise_skaegProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Disquise_skaegProxy.prototype.gotoWalk = function () {
	        if (this._armature.animation.lastAnimationName != "walk") {
	            this._armature.animation.play("walk");
	        }
	    };
	    Disquise_skaegProxy.prototype.gotoSit = function () {
	        if (this._armature.animation.lastAnimationName != "sit") {
	            this._armature.animation.play("sit");
	        }
	    };
	    Disquise_skaegProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Disquise_skaegProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(Disquise_skaegProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Disquise_skaegProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Disquise_skaegProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Disquise_skaegProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Disquise_skaegProxy;
	}(PIXI.DisplayObject));
	exports.Disquise_skaegProxy = Disquise_skaegProxy;


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var OrangeBrushProxy = (function (_super) {
	    __extends(OrangeBrushProxy, _super);
	    function OrangeBrushProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    OrangeBrushProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    OrangeBrushProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(OrangeBrushProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(OrangeBrushProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    OrangeBrushProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    OrangeBrushProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return OrangeBrushProxy;
	}(ProxyBase_1.ProxyBase));
	exports.OrangeBrushProxy = OrangeBrushProxy;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var PolaroidContentProxy = (function (_super) {
	    __extends(PolaroidContentProxy, _super);
	    function PolaroidContentProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    PolaroidContentProxy.prototype.gotoFarve = function () {
	        if (this._armature.animation.lastAnimationName != "farve") {
	            this._armature.animation.play("farve");
	        }
	    };
	    PolaroidContentProxy.prototype.gotoForm = function () {
	        if (this._armature.animation.lastAnimationName != "form") {
	            this._armature.animation.play("form");
	        }
	    };
	    PolaroidContentProxy.prototype.gotoSmag = function () {
	        if (this._armature.animation.lastAnimationName != "smag") {
	            this._armature.animation.play("smag");
	        }
	    };
	    Object.defineProperty(PolaroidContentProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PolaroidContentProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PolaroidContentProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    PolaroidContentProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return PolaroidContentProxy;
	}(ProxyBase_1.ProxyBase));
	exports.PolaroidContentProxy = PolaroidContentProxy;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var RedBrushProxy = (function (_super) {
	    __extends(RedBrushProxy, _super);
	    function RedBrushProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    RedBrushProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    RedBrushProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(RedBrushProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RedBrushProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RedBrushProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    RedBrushProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return RedBrushProxy;
	}(ProxyBase_1.ProxyBase));
	exports.RedBrushProxy = RedBrushProxy;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var FreeModeButtonProxy_1 = __webpack_require__(84);
	var StartButtonProxy_1 = __webpack_require__(85);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Scene0_introProxy = (function (_super) {
	    __extends(Scene0_introProxy, _super);
	    function Scene0_introProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene0_introProxy.prototype.getFreeMode = function () {
	        return new FreeModeButtonProxy_1.FreeModeButtonProxy(this.freeMode);
	    };
	    Scene0_introProxy.prototype.getPlayButton = function () {
	        return new StartButtonProxy_1.StartButtonProxy(this.playButton);
	    };
	    Scene0_introProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene0_introProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene0_introProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            var played = this._armature.animation.play("outtro");
	        }
	    };
	    Scene0_introProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Scene0_introProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(Scene0_introProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene0_introProxy.prototype, "display", {
	        get: function () {
	            var display = this._armature.display;
	            return display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene0_introProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene0_introProxy.prototype.remove = function (container) {
	        if (this.display) {
	            container.removeChild(this.display);
	        }
	        if (this._armature) {
	            dragonBones.WorldClock.clock.remove(this._armature);
	        }
	    };
	    return Scene0_introProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene0_introProxy = Scene0_introProxy;


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var FreeModeButtonProxy = (function (_super) {
	    __extends(FreeModeButtonProxy, _super);
	    function FreeModeButtonProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    FreeModeButtonProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    FreeModeButtonProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    FreeModeButtonProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(FreeModeButtonProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FreeModeButtonProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FreeModeButtonProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    FreeModeButtonProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return FreeModeButtonProxy;
	}(ProxyBase_1.ProxyBase));
	exports.FreeModeButtonProxy = FreeModeButtonProxy;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Logger_1 = __webpack_require__(4);
	var StartButtonProxy = (function (_super) {
	    __extends(StartButtonProxy, _super);
	    function StartButtonProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this.counter = 0;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    StartButtonProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    StartButtonProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    StartButtonProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            var animation = this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(StartButtonProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StartButtonProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            Logger_1.Logger.log(this, "StartButtonProxy this._armature.getSlots().length == " + this._armature.getSlots().length);
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    StartButtonProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    StartButtonProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return StartButtonProxy;
	}(ProxyBase_1.ProxyBase));
	exports.StartButtonProxy = StartButtonProxy;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var CharCardFrame0Proxy_1 = __webpack_require__(87);
	var RosaProxy_1 = __webpack_require__(89);
	var CharCardFrame1Proxy_1 = __webpack_require__(91);
	var CharCardFrame2Proxy_1 = __webpack_require__(94);
	var CharCardFrame3Proxy_1 = __webpack_require__(96);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Logger_1 = __webpack_require__(4);
	var Scene1_pickCharProxy = (function (_super) {
	    __extends(Scene1_pickCharProxy, _super);
	    function Scene1_pickCharProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        _this.proxyName = "Scene1_pickCharProxy";
	        Logger_1.Logger.log(_this, "Scene1_pickCharProxy constructor this._armature == " + _this._armature);
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene1_pickCharProxy.prototype.getCharCardFrame0 = function () {
	        return new CharCardFrame0Proxy_1.CharCardFrame0Proxy(this.charCardFrame0);
	    };
	    Scene1_pickCharProxy.prototype.getRosa = function () {
	        return new RosaProxy_1.RosaProxy(this.rosa);
	    };
	    Scene1_pickCharProxy.prototype.getCharCardFrame1 = function () {
	        return new CharCardFrame1Proxy_1.CharCardFrame1Proxy(this.charCardFrame1);
	    };
	    Scene1_pickCharProxy.prototype.getCharCardFrame2 = function () {
	        return new CharCardFrame2Proxy_1.CharCardFrame2Proxy(this.charCardFrame2);
	    };
	    Scene1_pickCharProxy.prototype.getCharCardFrame3 = function () {
	        return new CharCardFrame3Proxy_1.CharCardFrame3Proxy(this.charCardFrame3);
	    };
	    Scene1_pickCharProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene1_pickCharProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene1_pickCharProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    Scene1_pickCharProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Scene1_pickCharProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(Scene1_pickCharProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene1_pickCharProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene1_pickCharProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene1_pickCharProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene1_pickCharProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene1_pickCharProxy = Scene1_pickCharProxy;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ChristianInCardProxy_1 = __webpack_require__(88);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var CharCardFrame0Proxy = (function (_super) {
	    __extends(CharCardFrame0Proxy, _super);
	    function CharCardFrame0Proxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    CharCardFrame0Proxy.prototype.getPic = function () {
	        return new ChristianInCardProxy_1.ChristianInCardProxy(this.pic);
	    };
	    CharCardFrame0Proxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    CharCardFrame0Proxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    CharCardFrame0Proxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(CharCardFrame0Proxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame0Proxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CharCardFrame0Proxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    CharCardFrame0Proxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return CharCardFrame0Proxy;
	}(ProxyBase_1.ProxyBase));
	exports.CharCardFrame0Proxy = CharCardFrame0Proxy;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Chr_front_headProxy_1 = __webpack_require__(30);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var ChristianInCardProxy = (function (_super) {
	    __extends(ChristianInCardProxy, _super);
	    function ChristianInCardProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    ChristianInCardProxy.prototype.getHead = function () {
	        return new Chr_front_headProxy_1.Chr_front_headProxy(this.head);
	    };
	    ChristianInCardProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    ChristianInCardProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(ChristianInCardProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ChristianInCardProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ChristianInCardProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    ChristianInCardProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return ChristianInCardProxy;
	}(ProxyBase_1.ProxyBase));
	exports.ChristianInCardProxy = ChristianInCardProxy;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var HeadProxy_1 = __webpack_require__(90);
	var TypedDBFactory_1 = __webpack_require__(6);
	var RosaProxy = (function (_super) {
	    __extends(RosaProxy, _super);
	    function RosaProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    RosaProxy.prototype.getHead = function () {
	        return new HeadProxy_1.HeadProxy(this.head);
	    };
	    RosaProxy.prototype.gotoInit = function () {
	        if (this._armature.animation.lastAnimationName != "init") {
	            this._armature.animation.play("init");
	        }
	    };
	    RosaProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    RosaProxy.prototype.gotoTaste = function () {
	        if (this._armature.animation.lastAnimationName != "taste") {
	            this._armature.animation.play("taste");
	        }
	    };
	    RosaProxy.prototype.gotoSour = function () {
	        if (this._armature.animation.lastAnimationName != "sour") {
	            this._armature.animation.play("sour");
	        }
	    };
	    RosaProxy.prototype.gotoSweet = function () {
	        if (this._armature.animation.lastAnimationName != "sweet") {
	            this._armature.animation.play("sweet");
	        }
	    };
	    RosaProxy.prototype.gotoCake = function () {
	        if (this._armature.animation.lastAnimationName != "cake") {
	            this._armature.animation.play("cake");
	        }
	    };
	    RosaProxy.prototype.gotoOk = function () {
	        if (this._armature.animation.lastAnimationName != "ok") {
	            this._armature.animation.play("ok");
	        }
	    };
	    RosaProxy.prototype.gotoNogo = function () {
	        if (this._armature.animation.lastAnimationName != "nogo") {
	            this._armature.animation.play("nogo");
	        }
	    };
	    RosaProxy.prototype.gotoTalk = function () {
	        if (this._armature.animation.lastAnimationName != "talk") {
	            this._armature.animation.play("talk");
	        }
	    };
	    RosaProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Object.defineProperty(RosaProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(RosaProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    RosaProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    RosaProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return RosaProxy;
	}(ProxyBase_1.ProxyBase));
	exports.RosaProxy = RosaProxy;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var HeadProxy = (function (_super) {
	    __extends(HeadProxy, _super);
	    function HeadProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    HeadProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    HeadProxy.prototype.gotoTaste = function () {
	        if (this._armature.animation.lastAnimationName != "taste") {
	            this._armature.animation.play("taste");
	        }
	    };
	    HeadProxy.prototype.gotoSour = function () {
	        if (this._armature.animation.lastAnimationName != "sour") {
	            this._armature.animation.play("sour");
	        }
	    };
	    HeadProxy.prototype.gotoSweet = function () {
	        if (this._armature.animation.lastAnimationName != "sweet") {
	            this._armature.animation.play("sweet");
	        }
	    };
	    HeadProxy.prototype.gotoCake = function () {
	        if (this._armature.animation.lastAnimationName != "cake") {
	            this._armature.animation.play("cake");
	        }
	    };
	    HeadProxy.prototype.gotoNogo = function () {
	        if (this._armature.animation.lastAnimationName != "nogo") {
	            this._armature.animation.play("nogo");
	        }
	    };
	    HeadProxy.prototype.gotoOk = function () {
	        if (this._armature.animation.lastAnimationName != "ok") {
	            this._armature.animation.play("ok");
	        }
	    };
	    HeadProxy.prototype.gotoTalk = function () {
	        if (this._armature.animation.lastAnimationName != "talk") {
	            this._armature.animation.play("talk");
	        }
	    };
	    HeadProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(HeadProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HeadProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HeadProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    HeadProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return HeadProxy;
	}(ProxyBase_1.ProxyBase));
	exports.HeadProxy = HeadProxy;


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BamseInCardProxy_1 = __webpack_require__(92);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(4);
	var CharCardFrame1Proxy = (function (_super) {
	    __extends(CharCardFrame1Proxy, _super);
	    function CharCardFrame1Proxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        _this.proxyName = "CharCardFrame1Proxy";
	        Logger_1.Logger.log(_this, "CharCardFrame1Proxy constructor this._armature == " + _this._armature);
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    CharCardFrame1Proxy.prototype.getPic = function () {
	        return new BamseInCardProxy_1.BamseInCardProxy(this.pic);
	    };
	    CharCardFrame1Proxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    CharCardFrame1Proxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    CharCardFrame1Proxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(CharCardFrame1Proxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame1Proxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CharCardFrame1Proxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    CharCardFrame1Proxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return CharCardFrame1Proxy;
	}(ProxyBase_1.ProxyBase));
	exports.CharCardFrame1Proxy = CharCardFrame1Proxy;


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BamseheadProxy_1 = __webpack_require__(93);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BamseInCardProxy = (function (_super) {
	    __extends(BamseInCardProxy, _super);
	    function BamseInCardProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BamseInCardProxy.prototype.getHead = function () {
	        return new BamseheadProxy_1.BamseheadProxy(this.head);
	    };
	    BamseInCardProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BamseInCardProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(BamseInCardProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BamseInCardProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BamseInCardProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BamseInCardProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BamseInCardProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BamseInCardProxy = BamseInCardProxy;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BamseheadProxy = (function (_super) {
	    __extends(BamseheadProxy, _super);
	    function BamseheadProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BamseheadProxy.prototype.gotoTalk = function () {
	        if (this._armature.animation.lastAnimationName != "talk") {
	            this._armature.animation.play("talk");
	        }
	    };
	    BamseheadProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BamseheadProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(BamseheadProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BamseheadProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BamseheadProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BamseheadProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BamseheadProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BamseheadProxy = BamseheadProxy;


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SkaegInCardProxy_1 = __webpack_require__(95);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var CharCardFrame2Proxy = (function (_super) {
	    __extends(CharCardFrame2Proxy, _super);
	    function CharCardFrame2Proxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    CharCardFrame2Proxy.prototype.getPic = function () {
	        return new SkaegInCardProxy_1.SkaegInCardProxy(this.pic);
	    };
	    CharCardFrame2Proxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    CharCardFrame2Proxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    CharCardFrame2Proxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(CharCardFrame2Proxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame2Proxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CharCardFrame2Proxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    CharCardFrame2Proxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return CharCardFrame2Proxy;
	}(ProxyBase_1.ProxyBase));
	exports.CharCardFrame2Proxy = CharCardFrame2Proxy;


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var SkaegFrontHeadProxy_1 = __webpack_require__(53);
	var TypedDBFactory_1 = __webpack_require__(6);
	var SkaegInCardProxy = (function (_super) {
	    __extends(SkaegInCardProxy, _super);
	    function SkaegInCardProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    SkaegInCardProxy.prototype.getHead = function () {
	        return new SkaegFrontHeadProxy_1.SkaegFrontHeadProxy(this.head);
	    };
	    SkaegInCardProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    SkaegInCardProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(SkaegInCardProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SkaegInCardProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SkaegInCardProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    SkaegInCardProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return SkaegInCardProxy;
	}(ProxyBase_1.ProxyBase));
	exports.SkaegInCardProxy = SkaegInCardProxy;


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var MilleInCardProxy_1 = __webpack_require__(97);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var CharCardFrame3Proxy = (function (_super) {
	    __extends(CharCardFrame3Proxy, _super);
	    function CharCardFrame3Proxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    CharCardFrame3Proxy.prototype.getPic = function () {
	        return new MilleInCardProxy_1.MilleInCardProxy(this.pic);
	    };
	    CharCardFrame3Proxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    CharCardFrame3Proxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    CharCardFrame3Proxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(CharCardFrame3Proxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame3Proxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CharCardFrame3Proxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    CharCardFrame3Proxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return CharCardFrame3Proxy;
	}(ProxyBase_1.ProxyBase));
	exports.CharCardFrame3Proxy = CharCardFrame3Proxy;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var MilleFront_headProxy_1 = __webpack_require__(44);
	var TypedDBFactory_1 = __webpack_require__(6);
	var MilleInCardProxy = (function (_super) {
	    __extends(MilleInCardProxy, _super);
	    function MilleInCardProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    MilleInCardProxy.prototype.getFront_head = function () {
	        return new MilleFront_headProxy_1.MilleFront_headProxy(this.front_head);
	    };
	    MilleInCardProxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(MilleInCardProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MilleInCardProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MilleInCardProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    MilleInCardProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return MilleInCardProxy;
	}(ProxyBase_1.ProxyBase));
	exports.MilleInCardProxy = MilleInCardProxy;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var RosaProxy_1 = __webpack_require__(89);
	var DisguiseBubbleChristianProxy_1 = __webpack_require__(99);
	var DisguiseBubbleBamseProxy_1 = __webpack_require__(100);
	var DisguiseBubbleSkaegProxy_1 = __webpack_require__(101);
	var SpeechBubbleProxy_1 = __webpack_require__(102);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Scene2_pickDisquiseProxy = (function (_super) {
	    __extends(Scene2_pickDisquiseProxy, _super);
	    function Scene2_pickDisquiseProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene2_pickDisquiseProxy.prototype.getRosa = function () {
	        return new RosaProxy_1.RosaProxy(this.rosa);
	    };
	    Scene2_pickDisquiseProxy.prototype.getCharCardFrame0 = function () {
	        return new DisguiseBubbleChristianProxy_1.DisguiseBubbleChristianProxy(this.charCardFrame0);
	    };
	    Scene2_pickDisquiseProxy.prototype.getCharCardFrame1 = function () {
	        return new DisguiseBubbleBamseProxy_1.DisguiseBubbleBamseProxy(this.charCardFrame1);
	    };
	    Scene2_pickDisquiseProxy.prototype.getCharCardFrame2 = function () {
	        return new DisguiseBubbleSkaegProxy_1.DisguiseBubbleSkaegProxy(this.charCardFrame2);
	    };
	    Scene2_pickDisquiseProxy.prototype.getCharCardFrame3 = function () {
	        return null;
	    };
	    Scene2_pickDisquiseProxy.prototype.getSpeechBubble = function () {
	        return new SpeechBubbleProxy_1.SpeechBubbleProxy(this.speechBubble);
	    };
	    Scene2_pickDisquiseProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene2_pickDisquiseProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene2_pickDisquiseProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    Scene2_pickDisquiseProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Scene2_pickDisquiseProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene2_pickDisquiseProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene2_pickDisquiseProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene2_pickDisquiseProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene2_pickDisquiseProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene2_pickDisquiseProxy = Scene2_pickDisquiseProxy;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Disquise_christianProxy_1 = __webpack_require__(77);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var DisguiseBubbleChristianProxy = (function (_super) {
	    __extends(DisguiseBubbleChristianProxy, _super);
	    function DisguiseBubbleChristianProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    DisguiseBubbleChristianProxy.prototype.getDisquise = function () {
	        return new Disquise_christianProxy_1.Disquise_christianProxy(this.disquise);
	    };
	    DisguiseBubbleChristianProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    DisguiseBubbleChristianProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    DisguiseBubbleChristianProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(DisguiseBubbleChristianProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleChristianProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DisguiseBubbleChristianProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    DisguiseBubbleChristianProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return DisguiseBubbleChristianProxy;
	}(ProxyBase_1.ProxyBase));
	exports.DisguiseBubbleChristianProxy = DisguiseBubbleChristianProxy;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Disquise_bamseProxy_1 = __webpack_require__(76);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var DisguiseBubbleBamseProxy = (function (_super) {
	    __extends(DisguiseBubbleBamseProxy, _super);
	    function DisguiseBubbleBamseProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    DisguiseBubbleBamseProxy.prototype.getDisquise = function () {
	        return new Disquise_bamseProxy_1.Disquise_bamseProxy(this.disquise);
	    };
	    DisguiseBubbleBamseProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    DisguiseBubbleBamseProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    DisguiseBubbleBamseProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(DisguiseBubbleBamseProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleBamseProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DisguiseBubbleBamseProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    DisguiseBubbleBamseProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return DisguiseBubbleBamseProxy;
	}(ProxyBase_1.ProxyBase));
	exports.DisguiseBubbleBamseProxy = DisguiseBubbleBamseProxy;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Disquise_skaegProxy_1 = __webpack_require__(79);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var DisguiseBubbleSkaegProxy = (function (_super) {
	    __extends(DisguiseBubbleSkaegProxy, _super);
	    function DisguiseBubbleSkaegProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    DisguiseBubbleSkaegProxy.prototype.getDisquise = function () {
	        return new Disquise_skaegProxy_1.Disquise_skaegProxy(this.disquise);
	    };
	    DisguiseBubbleSkaegProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    DisguiseBubbleSkaegProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    DisguiseBubbleSkaegProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(DisguiseBubbleSkaegProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleSkaegProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DisguiseBubbleSkaegProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    DisguiseBubbleSkaegProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return DisguiseBubbleSkaegProxy;
	}(ProxyBase_1.ProxyBase));
	exports.DisguiseBubbleSkaegProxy = DisguiseBubbleSkaegProxy;


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var SpeechBubbleProxy = (function (_super) {
	    __extends(SpeechBubbleProxy, _super);
	    function SpeechBubbleProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    SpeechBubbleProxy.prototype.gotoBamse = function () {
	        if (this._armature.animation.lastAnimationName != "bamse") {
	            this._armature.animation.play("bamse");
	        }
	    };
	    SpeechBubbleProxy.prototype.gotoChristian = function () {
	        if (this._armature.animation.lastAnimationName != "christian") {
	            this._armature.animation.play("christian");
	        }
	    };
	    SpeechBubbleProxy.prototype.gotoSkaeg = function () {
	        if (this._armature.animation.lastAnimationName != "skaeg") {
	            this._armature.animation.play("skaeg");
	        }
	    };
	    SpeechBubbleProxy.prototype.gotoMille = function () {
	        if (this._armature.animation.lastAnimationName != "mille") {
	            this._armature.animation.play("mille");
	        }
	    };
	    Object.defineProperty(SpeechBubbleProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SpeechBubbleProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SpeechBubbleProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    SpeechBubbleProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return SpeechBubbleProxy;
	}(ProxyBase_1.ProxyBase));
	exports.SpeechBubbleProxy = SpeechBubbleProxy;


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var PolaroidProxy_1 = __webpack_require__(22);
	var NextArrowProxy_1 = __webpack_require__(104);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Scene5_picturesProxy = (function (_super) {
	    __extends(Scene5_picturesProxy, _super);
	    function Scene5_picturesProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene5_picturesProxy.prototype.getPolaorid1 = function () {
	        return new PolaroidProxy_1.PolaroidProxy(this.polaorid1);
	    };
	    Scene5_picturesProxy.prototype.getPolaorid0 = function () {
	        return new PolaroidProxy_1.PolaroidProxy(this.polaorid0);
	    };
	    Scene5_picturesProxy.prototype.getPolaorid2 = function () {
	        return new PolaroidProxy_1.PolaroidProxy(this.polaorid2);
	    };
	    Scene5_picturesProxy.prototype.getNextButton = function () {
	        return new NextArrowProxy_1.NextArrowProxy(this.nextButton);
	    };
	    Scene5_picturesProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene5_picturesProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene5_picturesProxy.prototype.gotoHint = function () {
	        if (this._armature.animation.lastAnimationName != "hint") {
	            this._armature.animation.play("hint");
	        }
	    };
	    Scene5_picturesProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    Scene5_picturesProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Scene5_picturesProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(Scene5_picturesProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene5_picturesProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene5_picturesProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene5_picturesProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene5_picturesProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene5_picturesProxy = Scene5_picturesProxy;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var NextArrowProxy = (function (_super) {
	    __extends(NextArrowProxy, _super);
	    function NextArrowProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    NextArrowProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    NextArrowProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    NextArrowProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(NextArrowProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NextArrowProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NextArrowProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    NextArrowProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return NextArrowProxy;
	}(ProxyBase_1.ProxyBase));
	exports.NextArrowProxy = NextArrowProxy;


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var Ingredience_yeastProxy_1 = __webpack_require__(106);
	var MagreteBowlProxy_1 = __webpack_require__(107);
	var Ingredience_sugarProxy_1 = __webpack_require__(109);
	var RosaProxy_1 = __webpack_require__(89);
	var Ingredience_milkProxy_1 = __webpack_require__(110);
	var Ingredience_flourProxy_1 = __webpack_require__(111);
	var Ingredience_oilProxy_1 = __webpack_require__(112);
	var Ingredience_cacaoProxy_1 = __webpack_require__(113);
	var NextArrowProxy_1 = __webpack_require__(104);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Logger_1 = __webpack_require__(4);
	var Scene6_mixDefaultsProxy = (function (_super) {
	    __extends(Scene6_mixDefaultsProxy, _super);
	    function Scene6_mixDefaultsProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        Logger_1.Logger.log(_this, "Scene6_mixDefaultsProxy this.ingredience_yeast === " + _this.ingredience_yeast);
	        Logger_1.Logger.log(_this, "Scene6_mixDefaultsProxy this.magreteBowl === " + _this.magreteBowl);
	        Logger_1.Logger.log(_this, "Scene6_mixDefaultsProxy this.ingredience_sugar === " + _this.ingredience_sugar);
	        Logger_1.Logger.log(_this, "Scene6_mixDefaultsProxy this.rosa === " + _this.rosa);
	        Logger_1.Logger.log(_this, "Scene6_mixDefaultsProxy this.ingredience_milk === " + _this.ingredience_milk);
	        Logger_1.Logger.log(_this, "Scene6_mixDefaultsProxy this.ingredience_flour === " + _this.ingredience_flour);
	        Logger_1.Logger.log(_this, "Scene6_mixDefaultsProxy this.ingredience_oil === " + _this.ingredience_oil);
	        Logger_1.Logger.log(_this, "Scene6_mixDefaultsProxy this.ingredience_cacao === " + _this.ingredience_cacao);
	        Logger_1.Logger.log(_this, "Scene6_mixDefaultsProxy this.nextArrow === " + _this.nextArrow);
	        return _this;
	    }
	    Scene6_mixDefaultsProxy.prototype.getIngredience_yeast = function () {
	        return new Ingredience_yeastProxy_1.Ingredience_yeastProxy(this.ingredience_yeast);
	    };
	    Scene6_mixDefaultsProxy.prototype.getMagreteBowl = function () {
	        return new MagreteBowlProxy_1.MagreteBowlProxy(this.magreteBowl);
	    };
	    Scene6_mixDefaultsProxy.prototype.getIngredience_sugar = function () {
	        Logger_1.Logger.log(this, "Scene6_mixDefaultsProxy getIngredience_sugar ingredience_sugar === " + this.ingredience_sugar);
	        return new Ingredience_sugarProxy_1.Ingredience_sugarProxy(this.ingredience_sugar);
	    };
	    Scene6_mixDefaultsProxy.prototype.getRosa = function () {
	        return new RosaProxy_1.RosaProxy(this.rosa);
	    };
	    Scene6_mixDefaultsProxy.prototype.getIngredience_milk = function () {
	        return new Ingredience_milkProxy_1.Ingredience_milkProxy(this.ingredience_milk);
	    };
	    Scene6_mixDefaultsProxy.prototype.getIngredience_flour = function () {
	        return new Ingredience_flourProxy_1.Ingredience_flourProxy(this.ingredience_flour);
	    };
	    Scene6_mixDefaultsProxy.prototype.getIngredience_oil = function () {
	        return new Ingredience_oilProxy_1.Ingredience_oilProxy(this.ingredience_oil);
	    };
	    Scene6_mixDefaultsProxy.prototype.getIngredience_cacao = function () {
	        return new Ingredience_cacaoProxy_1.Ingredience_cacaoProxy(this.ingredience_cacao);
	    };
	    Scene6_mixDefaultsProxy.prototype.getNextArrow = function () {
	        return new NextArrowProxy_1.NextArrowProxy(this.nextArrow);
	    };
	    Scene6_mixDefaultsProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene6_mixDefaultsProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene6_mixDefaultsProxy.prototype.gotoReady = function () {
	        if (this._armature.animation.lastAnimationName != "ready") {
	            this._armature.animation.play("ready");
	        }
	    };
	    Scene6_mixDefaultsProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    Scene6_mixDefaultsProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Scene6_mixDefaultsProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(Scene6_mixDefaultsProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene6_mixDefaultsProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene6_mixDefaultsProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene6_mixDefaultsProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene6_mixDefaultsProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene6_mixDefaultsProxy = Scene6_mixDefaultsProxy;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Ingredience_yeastProxy = (function (_super) {
	    __extends(Ingredience_yeastProxy, _super);
	    function Ingredience_yeastProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Ingredience_yeastProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Ingredience_yeastProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Ingredience_yeastProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Ingredience_yeastProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Ingredience_yeastProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Ingredience_yeastProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Ingredience_yeastProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Ingredience_yeastProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Ingredience_yeastProxy;
	}(PIXI.DisplayObject));
	exports.Ingredience_yeastProxy = Ingredience_yeastProxy;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var SmokePuffAnimProxy_1 = __webpack_require__(108);
	var TypedDBFactory_1 = __webpack_require__(6);
	var MagreteBowlProxy = (function (_super) {
	    __extends(MagreteBowlProxy, _super);
	    function MagreteBowlProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    MagreteBowlProxy.prototype.getSmokePuff = function () {
	        return new SmokePuffAnimProxy_1.SmokePuffAnimProxy(this.smokePuff);
	    };
	    MagreteBowlProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    MagreteBowlProxy.prototype.gotoDej_1 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_1") {
	            this._armature.animation.play("dej_1");
	        }
	    };
	    MagreteBowlProxy.prototype.gotoDej_2 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_2") {
	            this._armature.animation.play("dej_2");
	        }
	    };
	    MagreteBowlProxy.prototype.gotoDej_3 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_3") {
	            this._armature.animation.play("dej_3");
	        }
	    };
	    MagreteBowlProxy.prototype.gotoDej_4 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_4") {
	            this._armature.animation.play("dej_4");
	        }
	    };
	    MagreteBowlProxy.prototype.gotoDej_5 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_5") {
	            this._armature.animation.play("dej_5");
	        }
	    };
	    MagreteBowlProxy.prototype.gotoDej_6 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_6") {
	            this._armature.animation.play("dej_6");
	        }
	    };
	    MagreteBowlProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(MagreteBowlProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MagreteBowlProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MagreteBowlProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    MagreteBowlProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return MagreteBowlProxy;
	}(ProxyBase_1.ProxyBase));
	exports.MagreteBowlProxy = MagreteBowlProxy;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var SmokePuffAnimProxy = (function (_super) {
	    __extends(SmokePuffAnimProxy, _super);
	    function SmokePuffAnimProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    SmokePuffAnimProxy.prototype.gotoDej_1 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_1") {
	            this._armature.animation.play("dej_1");
	        }
	    };
	    SmokePuffAnimProxy.prototype.gotoDej_2 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_2") {
	            this._armature.animation.play("dej_2");
	        }
	    };
	    SmokePuffAnimProxy.prototype.gotoDej_3 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_3") {
	            this._armature.animation.play("dej_3");
	        }
	    };
	    SmokePuffAnimProxy.prototype.gotoDej_4 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_4") {
	            this._armature.animation.play("dej_4");
	        }
	    };
	    SmokePuffAnimProxy.prototype.gotoDej_5 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_5") {
	            this._armature.animation.play("dej_5");
	        }
	    };
	    SmokePuffAnimProxy.prototype.gotoDej_6 = function () {
	        if (this._armature.animation.lastAnimationName != "dej_6") {
	            this._armature.animation.play("dej_6");
	        }
	    };
	    Object.defineProperty(SmokePuffAnimProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SmokePuffAnimProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SmokePuffAnimProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    SmokePuffAnimProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return SmokePuffAnimProxy;
	}(ProxyBase_1.ProxyBase));
	exports.SmokePuffAnimProxy = SmokePuffAnimProxy;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Ingredience_sugarProxy = (function (_super) {
	    __extends(Ingredience_sugarProxy, _super);
	    function Ingredience_sugarProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Ingredience_sugarProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Ingredience_sugarProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Ingredience_sugarProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Ingredience_sugarProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Ingredience_sugarProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Ingredience_sugarProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Ingredience_sugarProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Ingredience_sugarProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Ingredience_sugarProxy;
	}(PIXI.DisplayObject));
	exports.Ingredience_sugarProxy = Ingredience_sugarProxy;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Ingredience_milkProxy = (function (_super) {
	    __extends(Ingredience_milkProxy, _super);
	    function Ingredience_milkProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Ingredience_milkProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Ingredience_milkProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Ingredience_milkProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Ingredience_milkProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Ingredience_milkProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Ingredience_milkProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Ingredience_milkProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Ingredience_milkProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Ingredience_milkProxy;
	}(PIXI.DisplayObject));
	exports.Ingredience_milkProxy = Ingredience_milkProxy;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Ingredience_flourProxy = (function (_super) {
	    __extends(Ingredience_flourProxy, _super);
	    function Ingredience_flourProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Ingredience_flourProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Ingredience_flourProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Ingredience_flourProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Ingredience_flourProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Ingredience_flourProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Ingredience_flourProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Ingredience_flourProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Ingredience_flourProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Ingredience_flourProxy;
	}(PIXI.DisplayObject));
	exports.Ingredience_flourProxy = Ingredience_flourProxy;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Ingredience_oilProxy = (function (_super) {
	    __extends(Ingredience_oilProxy, _super);
	    function Ingredience_oilProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Ingredience_oilProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Ingredience_oilProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Ingredience_oilProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Ingredience_oilProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Ingredience_oilProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Ingredience_oilProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Ingredience_oilProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Ingredience_oilProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Ingredience_oilProxy;
	}(PIXI.DisplayObject));
	exports.Ingredience_oilProxy = Ingredience_oilProxy;


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Ingredience_cacaoProxy = (function (_super) {
	    __extends(Ingredience_cacaoProxy, _super);
	    function Ingredience_cacaoProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Ingredience_cacaoProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Ingredience_cacaoProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Ingredience_cacaoProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Ingredience_cacaoProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Ingredience_cacaoProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Ingredience_cacaoProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Ingredience_cacaoProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Ingredience_cacaoProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Ingredience_cacaoProxy;
	}(PIXI.DisplayObject));
	exports.Ingredience_cacaoProxy = Ingredience_cacaoProxy;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var Wrongtaste_potatosProxy_1 = __webpack_require__(115);
	var MagreteBowlProxy_1 = __webpack_require__(107);
	var Wrongtaste_strawberriesProxy_1 = __webpack_require__(116);
	var Wrongtaste_watermelonProxy_1 = __webpack_require__(117);
	var RosaProxy_1 = __webpack_require__(89);
	var PandekageogIsProxy_1 = __webpack_require__(118);
	var Taste_christianProxy_1 = __webpack_require__(119);
	var Taste_2_bamseProxy_1 = __webpack_require__(120);
	var Taste_4_milleProxy_1 = __webpack_require__(122);
	var PolaroidProxy_1 = __webpack_require__(22);
	var NextArrowProxy_1 = __webpack_require__(104);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Scene7_specialTasteProxy = (function (_super) {
	    __extends(Scene7_specialTasteProxy, _super);
	    function Scene7_specialTasteProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene7_specialTasteProxy.prototype.getWrongtaste_potatos = function () {
	        return new Wrongtaste_potatosProxy_1.Wrongtaste_potatosProxy(this.wrongtaste_potatos);
	    };
	    Scene7_specialTasteProxy.prototype.getMagreteBowl = function () {
	        return new MagreteBowlProxy_1.MagreteBowlProxy(this.magreteBowl);
	    };
	    Scene7_specialTasteProxy.prototype.getWrongtaste_strawberries = function () {
	        return new Wrongtaste_strawberriesProxy_1.Wrongtaste_strawberriesProxy(this.wrongtaste_strawberries);
	    };
	    Scene7_specialTasteProxy.prototype.getWrongtaste_watermelon = function () {
	        return new Wrongtaste_watermelonProxy_1.Wrongtaste_watermelonProxy(this.wrongtaste_watermelon);
	    };
	    Scene7_specialTasteProxy.prototype.getRosa = function () {
	        return new RosaProxy_1.RosaProxy(this.rosa);
	    };
	    Scene7_specialTasteProxy.prototype.getTaste_3_skaeg = function () {
	        return new PandekageogIsProxy_1.PandekageogIsProxy(this.Taste_3_skaeg);
	    };
	    Scene7_specialTasteProxy.prototype.getTaste_1_christian = function () {
	        return new Taste_christianProxy_1.Taste_christianProxy(this.Taste_1_christian);
	    };
	    Scene7_specialTasteProxy.prototype.getTaste_2_bamse = function () {
	        return new Taste_2_bamseProxy_1.Taste_2_bamseProxy(this.Taste_2_bamse);
	    };
	    Scene7_specialTasteProxy.prototype.getTaste_4_mille = function () {
	        return new Taste_4_milleProxy_1.Taste_4_milleProxy(this.Taste_4_mille);
	    };
	    Scene7_specialTasteProxy.prototype.getPolaroid = function () {
	        return new PolaroidProxy_1.PolaroidProxy(this.polaroid);
	    };
	    Scene7_specialTasteProxy.prototype.getArrowNext = function () {
	        return new NextArrowProxy_1.NextArrowProxy(this.arrowNext);
	    };
	    Scene7_specialTasteProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene7_specialTasteProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene7_specialTasteProxy.prototype.gotoReady = function () {
	        if (this._armature.animation.lastAnimationName != "ready") {
	            this._armature.animation.play("ready");
	        }
	    };
	    Scene7_specialTasteProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    Scene7_specialTasteProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Scene7_specialTasteProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(Scene7_specialTasteProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene7_specialTasteProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene7_specialTasteProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene7_specialTasteProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene7_specialTasteProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene7_specialTasteProxy = Scene7_specialTasteProxy;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Wrongtaste_potatosProxy = (function (_super) {
	    __extends(Wrongtaste_potatosProxy, _super);
	    function Wrongtaste_potatosProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Wrongtaste_potatosProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Wrongtaste_potatosProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Wrongtaste_potatosProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Wrongtaste_potatosProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Wrongtaste_potatosProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Wrongtaste_potatosProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Wrongtaste_potatosProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Wrongtaste_potatosProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Wrongtaste_potatosProxy;
	}(PIXI.DisplayObject));
	exports.Wrongtaste_potatosProxy = Wrongtaste_potatosProxy;


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Wrongtaste_strawberriesProxy = (function (_super) {
	    __extends(Wrongtaste_strawberriesProxy, _super);
	    function Wrongtaste_strawberriesProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Wrongtaste_strawberriesProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Wrongtaste_strawberriesProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Wrongtaste_strawberriesProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Wrongtaste_strawberriesProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Wrongtaste_strawberriesProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Wrongtaste_strawberriesProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Wrongtaste_strawberriesProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Wrongtaste_strawberriesProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Wrongtaste_strawberriesProxy;
	}(PIXI.DisplayObject));
	exports.Wrongtaste_strawberriesProxy = Wrongtaste_strawberriesProxy;


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Wrongtaste_watermelonProxy = (function (_super) {
	    __extends(Wrongtaste_watermelonProxy, _super);
	    function Wrongtaste_watermelonProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Wrongtaste_watermelonProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Wrongtaste_watermelonProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Wrongtaste_watermelonProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Wrongtaste_watermelonProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Wrongtaste_watermelonProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Wrongtaste_watermelonProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Wrongtaste_watermelonProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Wrongtaste_watermelonProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Wrongtaste_watermelonProxy;
	}(PIXI.DisplayObject));
	exports.Wrongtaste_watermelonProxy = Wrongtaste_watermelonProxy;


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var PandekageogIsProxy = (function (_super) {
	    __extends(PandekageogIsProxy, _super);
	    function PandekageogIsProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    PandekageogIsProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    PandekageogIsProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    PandekageogIsProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    PandekageogIsProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(PandekageogIsProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(PandekageogIsProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    PandekageogIsProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    PandekageogIsProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return PandekageogIsProxy;
	}(PIXI.DisplayObject));
	exports.PandekageogIsProxy = PandekageogIsProxy;


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Taste_christianProxy = (function (_super) {
	    __extends(Taste_christianProxy, _super);
	    function Taste_christianProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Taste_christianProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Taste_christianProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Taste_christianProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Taste_christianProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Taste_christianProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Taste_christianProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Taste_christianProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Taste_christianProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Taste_christianProxy;
	}(PIXI.DisplayObject));
	exports.Taste_christianProxy = Taste_christianProxy;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var HonningDropProxy_1 = __webpack_require__(121);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Taste_2_bamseProxy = (function (_super) {
	    __extends(Taste_2_bamseProxy, _super);
	    function Taste_2_bamseProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Taste_2_bamseProxy.prototype.getHoneyDrop = function () {
	        return new HonningDropProxy_1.HonningDropProxy(this.honeyDrop);
	    };
	    Taste_2_bamseProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Taste_2_bamseProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Taste_2_bamseProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Taste_2_bamseProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Taste_2_bamseProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Taste_2_bamseProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Taste_2_bamseProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Taste_2_bamseProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Taste_2_bamseProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Taste_2_bamseProxy = Taste_2_bamseProxy;


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var HonningDropProxy = (function (_super) {
	    __extends(HonningDropProxy, _super);
	    function HonningDropProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    HonningDropProxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(HonningDropProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HonningDropProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HonningDropProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    HonningDropProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return HonningDropProxy;
	}(ProxyBase_1.ProxyBase));
	exports.HonningDropProxy = HonningDropProxy;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var Taste_4_milleProxy = (function (_super) {
	    __extends(Taste_4_milleProxy, _super);
	    function Taste_4_milleProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    Taste_4_milleProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Taste_4_milleProxy.prototype.gotoDrag = function () {
	        if (this._armature.animation.lastAnimationName != "drag") {
	            this._armature.animation.play("drag");
	        }
	    };
	    Taste_4_milleProxy.prototype.gotoDrop = function () {
	        if (this._armature.animation.lastAnimationName != "drop") {
	            this._armature.animation.play("drop");
	        }
	    };
	    Taste_4_milleProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Taste_4_milleProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Taste_4_milleProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Taste_4_milleProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Taste_4_milleProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Taste_4_milleProxy;
	}(PIXI.DisplayObject));
	exports.Taste_4_milleProxy = Taste_4_milleProxy;


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var HandMixerButtonArmProxy_1 = __webpack_require__(124);
	var FingerSpinnerProxy_1 = __webpack_require__(125);
	var NextArrowProxy_1 = __webpack_require__(104);
	var HandMixerArmProxy_1 = __webpack_require__(126);
	var ScreenSplatsProxy_1 = __webpack_require__(131);
	var WRLRLRLRProxy_1 = __webpack_require__(132);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Scene8a_handMixingSceneProxy = (function (_super) {
	    __extends(Scene8a_handMixingSceneProxy, _super);
	    function Scene8a_handMixingSceneProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene8a_handMixingSceneProxy.prototype.getHandMixerButtonArm = function () {
	        return new HandMixerButtonArmProxy_1.HandMixerButtonArmProxy(this.handMixerButtonArm);
	    };
	    Scene8a_handMixingSceneProxy.prototype.getSpinner = function () {
	        return new FingerSpinnerProxy_1.FingerSpinnerProxy(this.spinner);
	    };
	    Scene8a_handMixingSceneProxy.prototype.getCloseButton = function () {
	        return new NextArrowProxy_1.NextArrowProxy(this.closeButton);
	    };
	    Scene8a_handMixingSceneProxy.prototype.getMixer = function () {
	        return new HandMixerArmProxy_1.HandMixerArmProxy(this.mixer);
	    };
	    Scene8a_handMixingSceneProxy.prototype.getSplats = function () {
	        return new ScreenSplatsProxy_1.ScreenSplatsProxy(this.splats);
	    };
	    Scene8a_handMixingSceneProxy.prototype.getWRLRLRLR = function () {
	        return new WRLRLRLRProxy_1.WRLRLRLRProxy(this.WRLRLRLR);
	    };
	    Scene8a_handMixingSceneProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene8a_handMixingSceneProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene8a_handMixingSceneProxy.prototype.gotoHand = function () {
	        if (this._armature.animation.lastAnimationName != "hand") {
	            this._armature.animation.play("hand");
	        }
	    };
	    Scene8a_handMixingSceneProxy.prototype.gotoMixer = function () {
	        if (this._armature.animation.lastAnimationName != "mixer") {
	            this._armature.animation.play("mixer");
	        }
	    };
	    Scene8a_handMixingSceneProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    Scene8a_handMixingSceneProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Scene8a_handMixingSceneProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(Scene8a_handMixingSceneProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene8a_handMixingSceneProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene8a_handMixingSceneProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene8a_handMixingSceneProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene8a_handMixingSceneProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene8a_handMixingSceneProxy = Scene8a_handMixingSceneProxy;


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var HandMixerButtonArmProxy = (function (_super) {
	    __extends(HandMixerButtonArmProxy, _super);
	    function HandMixerButtonArmProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    HandMixerButtonArmProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    HandMixerButtonArmProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    HandMixerButtonArmProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(HandMixerButtonArmProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HandMixerButtonArmProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HandMixerButtonArmProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    HandMixerButtonArmProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return HandMixerButtonArmProxy;
	}(ProxyBase_1.ProxyBase));
	exports.HandMixerButtonArmProxy = HandMixerButtonArmProxy;


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var FingerSpinnerProxy = (function (_super) {
	    __extends(FingerSpinnerProxy, _super);
	    function FingerSpinnerProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    FingerSpinnerProxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    Object.defineProperty(FingerSpinnerProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FingerSpinnerProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FingerSpinnerProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    FingerSpinnerProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return FingerSpinnerProxy;
	}(ProxyBase_1.ProxyBase));
	exports.FingerSpinnerProxy = FingerSpinnerProxy;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var HandMixerBodyProxy_1 = __webpack_require__(127);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var HandMixerArmProxy = (function (_super) {
	    __extends(HandMixerArmProxy, _super);
	    function HandMixerArmProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    HandMixerArmProxy.prototype.getMixerObj = function () {
	        return new HandMixerBodyProxy_1.HandMixerBodyProxy(this.mixerObj);
	    };
	    HandMixerArmProxy.prototype.gotoOff = function () {
	        if (this._armature.animation.lastAnimationName != "off") {
	            this._armature.animation.play("off");
	        }
	    };
	    HandMixerArmProxy.prototype.gotoSpeed1 = function () {
	        if (this._armature.animation.lastAnimationName != "speed1") {
	            this._armature.animation.play("speed1");
	        }
	    };
	    HandMixerArmProxy.prototype.gotoSpeed2 = function () {
	        if (this._armature.animation.lastAnimationName != "speed2") {
	            this._armature.animation.play("speed2");
	        }
	    };
	    HandMixerArmProxy.prototype.gotoSpeed3 = function () {
	        if (this._armature.animation.lastAnimationName != "speed3") {
	            this._armature.animation.play("speed3");
	        }
	    };
	    Object.defineProperty(HandMixerArmProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HandMixerArmProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HandMixerArmProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    HandMixerArmProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return HandMixerArmProxy;
	}(ProxyBase_1.ProxyBase));
	exports.HandMixerArmProxy = HandMixerArmProxy;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var MixerButton2ArmProxy_1 = __webpack_require__(128);
	var MixerButton3ArmProxy_1 = __webpack_require__(129);
	var MixerButton1ArmProxy_1 = __webpack_require__(130);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var HandMixerBodyProxy = (function (_super) {
	    __extends(HandMixerBodyProxy, _super);
	    function HandMixerBodyProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    HandMixerBodyProxy.prototype.getMixerButton2Arm = function () {
	        return new MixerButton2ArmProxy_1.MixerButton2ArmProxy(this.mixerButton2Arm);
	    };
	    HandMixerBodyProxy.prototype.getMixerButton3Arm = function () {
	        return new MixerButton3ArmProxy_1.MixerButton3ArmProxy(this.mixerButton3Arm);
	    };
	    HandMixerBodyProxy.prototype.getMixerButton1Arm = function () {
	        return new MixerButton1ArmProxy_1.MixerButton1ArmProxy(this.mixerButton1Arm);
	    };
	    HandMixerBodyProxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    Object.defineProperty(HandMixerBodyProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HandMixerBodyProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HandMixerBodyProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    HandMixerBodyProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return HandMixerBodyProxy;
	}(ProxyBase_1.ProxyBase));
	exports.HandMixerBodyProxy = HandMixerBodyProxy;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var MixerButton2ArmProxy = (function (_super) {
	    __extends(MixerButton2ArmProxy, _super);
	    function MixerButton2ArmProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    MixerButton2ArmProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    MixerButton2ArmProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    MixerButton2ArmProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(MixerButton2ArmProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MixerButton2ArmProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MixerButton2ArmProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    MixerButton2ArmProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return MixerButton2ArmProxy;
	}(ProxyBase_1.ProxyBase));
	exports.MixerButton2ArmProxy = MixerButton2ArmProxy;


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var MixerButton3ArmProxy = (function (_super) {
	    __extends(MixerButton3ArmProxy, _super);
	    function MixerButton3ArmProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    MixerButton3ArmProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    MixerButton3ArmProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    MixerButton3ArmProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(MixerButton3ArmProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MixerButton3ArmProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MixerButton3ArmProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    MixerButton3ArmProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return MixerButton3ArmProxy;
	}(ProxyBase_1.ProxyBase));
	exports.MixerButton3ArmProxy = MixerButton3ArmProxy;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var MixerButton1ArmProxy = (function (_super) {
	    __extends(MixerButton1ArmProxy, _super);
	    function MixerButton1ArmProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    MixerButton1ArmProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    MixerButton1ArmProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    MixerButton1ArmProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(MixerButton1ArmProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MixerButton1ArmProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MixerButton1ArmProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    MixerButton1ArmProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return MixerButton1ArmProxy;
	}(ProxyBase_1.ProxyBase));
	exports.MixerButton1ArmProxy = MixerButton1ArmProxy;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ScreenSplatsProxy = (function (_super) {
	    __extends(ScreenSplatsProxy, _super);
	    function ScreenSplatsProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    ScreenSplatsProxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    ScreenSplatsProxy.prototype.gotoSplat = function () {
	        if (this._armature.animation.lastAnimationName != "splat") {
	            this._armature.animation.play("splat");
	        }
	    };
	    Object.defineProperty(ScreenSplatsProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ScreenSplatsProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ScreenSplatsProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    ScreenSplatsProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return ScreenSplatsProxy;
	}(ProxyBase_1.ProxyBase));
	exports.ScreenSplatsProxy = ScreenSplatsProxy;


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var WRLRLRLRProxy = (function (_super) {
	    __extends(WRLRLRLRProxy, _super);
	    function WRLRLRLRProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    WRLRLRLRProxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    WRLRLRLRProxy.prototype.gotoLoop1 = function () {
	        if (this._armature.animation.lastAnimationName != "loop1") {
	            this._armature.animation.play("loop1");
	        }
	    };
	    WRLRLRLRProxy.prototype.gotoLoop2 = function () {
	        if (this._armature.animation.lastAnimationName != "loop2") {
	            this._armature.animation.play("loop2");
	        }
	    };
	    WRLRLRLRProxy.prototype.gotoLoop3 = function () {
	        if (this._armature.animation.lastAnimationName != "loop3") {
	            this._armature.animation.play("loop3");
	        }
	    };
	    Object.defineProperty(WRLRLRLRProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WRLRLRLRProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    WRLRLRLRProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    WRLRLRLRProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return WRLRLRLRProxy;
	}(ProxyBase_1.ProxyBase));
	exports.WRLRLRLRProxy = WRLRLRLRProxy;


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var DragHelpArrowProxy_1 = __webpack_require__(134);
	var SmokeAnimArmatureProxy_1 = __webpack_require__(135);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Scene8b_cakeInOutOvenProxy = (function (_super) {
	    __extends(Scene8b_cakeInOutOvenProxy, _super);
	    function Scene8b_cakeInOutOvenProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene8b_cakeInOutOvenProxy.prototype.getArrowHitter = function () {
	        return new DragHelpArrowProxy_1.DragHelpArrowProxy(this.arrowHitter);
	    };
	    Scene8b_cakeInOutOvenProxy.prototype.getSteam = function () {
	        return new SmokeAnimArmatureProxy_1.SmokeAnimArmatureProxy(this.steam);
	    };
	    Scene8b_cakeInOutOvenProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene8b_cakeInOutOvenProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene8b_cakeInOutOvenProxy.prototype.gotoSetClock = function () {
	        if (this._armature.animation.lastAnimationName != "setClock") {
	            this._armature.animation.play("setClock");
	        }
	    };
	    Scene8b_cakeInOutOvenProxy.prototype.gotoPause = function () {
	        if (this._armature.animation.lastAnimationName != "pause") {
	            this._armature.animation.play("pause");
	        }
	    };
	    Scene8b_cakeInOutOvenProxy.prototype.gotoReady = function () {
	        if (this._armature.animation.lastAnimationName != "ready") {
	            this._armature.animation.play("ready");
	        }
	    };
	    Scene8b_cakeInOutOvenProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    Scene8b_cakeInOutOvenProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Scene8b_cakeInOutOvenProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(Scene8b_cakeInOutOvenProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene8b_cakeInOutOvenProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene8b_cakeInOutOvenProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene8b_cakeInOutOvenProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene8b_cakeInOutOvenProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene8b_cakeInOutOvenProxy = Scene8b_cakeInOutOvenProxy;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var DragHelpArrowProxy = (function (_super) {
	    __extends(DragHelpArrowProxy, _super);
	    function DragHelpArrowProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    DragHelpArrowProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    DragHelpArrowProxy.prototype.gotoSetClock = function () {
	        if (this._armature.animation.lastAnimationName != "setClock") {
	            this._armature.animation.play("setClock");
	        }
	    };
	    DragHelpArrowProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    DragHelpArrowProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    DragHelpArrowProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(DragHelpArrowProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DragHelpArrowProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DragHelpArrowProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    DragHelpArrowProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return DragHelpArrowProxy;
	}(ProxyBase_1.ProxyBase));
	exports.DragHelpArrowProxy = DragHelpArrowProxy;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var SmokeAnimArmatureProxy = (function (_super) {
	    __extends(SmokeAnimArmatureProxy, _super);
	    function SmokeAnimArmatureProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    SmokeAnimArmatureProxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(SmokeAnimArmatureProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SmokeAnimArmatureProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SmokeAnimArmatureProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    SmokeAnimArmatureProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return SmokeAnimArmatureProxy;
	}(ProxyBase_1.ProxyBase));
	exports.SmokeAnimArmatureProxy = SmokeAnimArmatureProxy;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var CakeArmProxy_1 = __webpack_require__(137);
	var DecoSelectionProxy_1 = __webpack_require__(138);
	var DragablesProxy_1 = __webpack_require__(139);
	var GlazeingButtonProxy_1 = __webpack_require__(140);
	var UndoButtonProxy_1 = __webpack_require__(143);
	var NextArrowProxy_1 = __webpack_require__(104);
	var BadGuy_skaeg__pic_placeholderProxy_1 = __webpack_require__(144);
	var ClearButtonProxy_1 = __webpack_require__(145);
	var PolaroidProxy_1 = __webpack_require__(22);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Scene9_DecorationProxy = (function (_super) {
	    __extends(Scene9_DecorationProxy, _super);
	    function Scene9_DecorationProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene9_DecorationProxy.prototype.getHardCake = function () {
	        return new CakeArmProxy_1.CakeArmProxy(this.hardCake);
	    };
	    Scene9_DecorationProxy.prototype.getDecoSelectionColorkrymmel = function () {
	        return new DecoSelectionProxy_1.DecoSelectionProxy(this.decoSelectionColorkrymmel);
	    };
	    Scene9_DecorationProxy.prototype.getDecoSelectionChocolate = function () {
	        return new DecoSelectionProxy_1.DecoSelectionProxy(this.decoSelectionChocolate);
	    };
	    Scene9_DecorationProxy.prototype.getDecoSelectionFlag = function () {
	        return new DecoSelectionProxy_1.DecoSelectionProxy(this.decoSelectionFlag);
	    };
	    Scene9_DecorationProxy.prototype.getDecoSelectionBluekrymmel = function () {
	        return new DecoSelectionProxy_1.DecoSelectionProxy(this.decoSelectionBluekrymmel);
	    };
	    Scene9_DecorationProxy.prototype.getDecoSelectionCocos = function () {
	        return new DecoSelectionProxy_1.DecoSelectionProxy(this.decoSelectionCocos);
	    };
	    Scene9_DecorationProxy.prototype.getDecoSelectionPineapple = function () {
	        return new DecoSelectionProxy_1.DecoSelectionProxy(this.decoSelectionPineapple);
	    };
	    Scene9_DecorationProxy.prototype.getDecoSelectionStrawberry = function () {
	        return new DecoSelectionProxy_1.DecoSelectionProxy(this.decoSelectionStrawberry);
	    };
	    Scene9_DecorationProxy.prototype.getDecoSelectionKiwi = function () {
	        return new DecoSelectionProxy_1.DecoSelectionProxy(this.decoSelectionKiwi);
	    };
	    Scene9_DecorationProxy.prototype.getDecoSelectionLakrids = function () {
	        return new DecoSelectionProxy_1.DecoSelectionProxy(this.decoSelectionLakrids);
	    };
	    Scene9_DecorationProxy.prototype.getDragables = function () {
	        return new DragablesProxy_1.DragablesProxy(this.dragables);
	    };
	    Scene9_DecorationProxy.prototype.getGlazeingButtonRed = function () {
	        return new GlazeingButtonProxy_1.GlazeingButtonProxy(this.glazeingButtonRed);
	    };
	    Scene9_DecorationProxy.prototype.getGlazeingButtonOrange = function () {
	        return new GlazeingButtonProxy_1.GlazeingButtonProxy(this.glazeingButtonOrange);
	    };
	    Scene9_DecorationProxy.prototype.getGlazeingButtonWhite = function () {
	        return new GlazeingButtonProxy_1.GlazeingButtonProxy(this.glazeingButtonWhite);
	    };
	    Scene9_DecorationProxy.prototype.getGlazeingButtonBlue = function () {
	        return new GlazeingButtonProxy_1.GlazeingButtonProxy(this.glazeingButtonBlue);
	    };
	    Scene9_DecorationProxy.prototype.getUndoButton = function () {
	        return new UndoButtonProxy_1.UndoButtonProxy(this.undoButton);
	    };
	    Scene9_DecorationProxy.prototype.getNextArrow = function () {
	        return new NextArrowProxy_1.NextArrowProxy(this.nextArrow);
	    };
	    Scene9_DecorationProxy.prototype.getPlaceholder = function () {
	        return new BadGuy_skaeg__pic_placeholderProxy_1.BadGuy_skaeg__pic_placeholderProxy(this.placeholder);
	    };
	    Scene9_DecorationProxy.prototype.getClearButton = function () {
	        return new ClearButtonProxy_1.ClearButtonProxy(this.clearButton);
	    };
	    Scene9_DecorationProxy.prototype.getPolaroid = function () {
	        return new PolaroidProxy_1.PolaroidProxy(this.polaroid);
	    };
	    Scene9_DecorationProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene9_DecorationProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene9_DecorationProxy.prototype.gotoOutro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    Scene9_DecorationProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Scene9_DecorationProxy.prototype.gotoOuttro = function () {
	        this.gotoOutro();
	    };
	    Object.defineProperty(Scene9_DecorationProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene9_DecorationProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene9_DecorationProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene9_DecorationProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene9_DecorationProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene9_DecorationProxy = Scene9_DecorationProxy;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var CakeArmProxy = (function (_super) {
	    __extends(CakeArmProxy, _super);
	    function CakeArmProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    CakeArmProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    CakeArmProxy.prototype.gotoHidden = function () {
	        if (this._armature.animation.lastAnimationName != "hidden") {
	            this._armature.animation.play("hidden");
	        }
	    };
	    CakeArmProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(CakeArmProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CakeArmProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CakeArmProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    CakeArmProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return CakeArmProxy;
	}(ProxyBase_1.ProxyBase));
	exports.CakeArmProxy = CakeArmProxy;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var DecoSelectionProxy = (function (_super) {
	    __extends(DecoSelectionProxy, _super);
	    function DecoSelectionProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    DecoSelectionProxy.prototype.gotoOff = function () {
	        if (this._armature.animation.lastAnimationName != "off") {
	            this._armature.animation.play("off");
	        }
	    };
	    DecoSelectionProxy.prototype.gotoOn = function () {
	        if (this._armature.animation.lastAnimationName != "on") {
	            this._armature.animation.play("on");
	        }
	    };
	    Object.defineProperty(DecoSelectionProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DecoSelectionProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DecoSelectionProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    DecoSelectionProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return DecoSelectionProxy;
	}(ProxyBase_1.ProxyBase));
	exports.DecoSelectionProxy = DecoSelectionProxy;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var StrawberryDragProxy_1 = __webpack_require__(63);
	var BlueKrymmelDragProxy_1 = __webpack_require__(64);
	var ColorKrymmelDragProxy_1 = __webpack_require__(65);
	var PineappleDragProxy_1 = __webpack_require__(66);
	var CocosDragProxy_1 = __webpack_require__(67);
	var KiwiDragProxy_1 = __webpack_require__(68);
	var Deco__flagDragProxy_1 = __webpack_require__(69);
	var LakridsDragProxy_1 = __webpack_require__(70);
	var Deco__chocolateDragProxy_1 = __webpack_require__(59);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var DragablesProxy = (function (_super) {
	    __extends(DragablesProxy, _super);
	    function DragablesProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    DragablesProxy.prototype.getStrawberryDrag = function () {
	        return new StrawberryDragProxy_1.StrawberryDragProxy(this.strawberryDrag);
	    };
	    DragablesProxy.prototype.getBlueKrymmelDrag = function () {
	        return new BlueKrymmelDragProxy_1.BlueKrymmelDragProxy(this.blueKrymmelDrag);
	    };
	    DragablesProxy.prototype.getColorKrymmelDrag = function () {
	        return new ColorKrymmelDragProxy_1.ColorKrymmelDragProxy(this.colorKrymmelDrag);
	    };
	    DragablesProxy.prototype.getPineappleDrag = function () {
	        return new PineappleDragProxy_1.PineappleDragProxy(this.pineappleDrag);
	    };
	    DragablesProxy.prototype.getCocosDrag = function () {
	        return new CocosDragProxy_1.CocosDragProxy(this.cocosDrag);
	    };
	    DragablesProxy.prototype.getKiwiDrag = function () {
	        return new KiwiDragProxy_1.KiwiDragProxy(this.kiwiDrag);
	    };
	    DragablesProxy.prototype.getFlagDrag = function () {
	        return new Deco__flagDragProxy_1.Deco__flagDragProxy(this.flagDrag);
	    };
	    DragablesProxy.prototype.getLakridsDrag = function () {
	        return new LakridsDragProxy_1.LakridsDragProxy(this.lakridsDrag);
	    };
	    DragablesProxy.prototype.getChocolateDrag = function () {
	        return new Deco__chocolateDragProxy_1.Deco__chocolateDragProxy(this.chocolateDrag);
	    };
	    DragablesProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    DragablesProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(DragablesProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DragablesProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DragablesProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    DragablesProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return DragablesProxy;
	}(ProxyBase_1.ProxyBase));
	exports.DragablesProxy = DragablesProxy;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TriangleHitboxProxy_1 = __webpack_require__(141);
	var GlazingOutlineProxy_1 = __webpack_require__(142);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var GlazeingButtonProxy = (function (_super) {
	    __extends(GlazeingButtonProxy, _super);
	    function GlazeingButtonProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    GlazeingButtonProxy.prototype.getHitbox = function () {
	        return new TriangleHitboxProxy_1.TriangleHitboxProxy(this.hitbox);
	    };
	    GlazeingButtonProxy.prototype.getOutline = function () {
	        return new GlazingOutlineProxy_1.GlazingOutlineProxy(this.outline);
	    };
	    GlazeingButtonProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    GlazeingButtonProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    GlazeingButtonProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(GlazeingButtonProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GlazeingButtonProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GlazeingButtonProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    GlazeingButtonProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return GlazeingButtonProxy;
	}(ProxyBase_1.ProxyBase));
	exports.GlazeingButtonProxy = GlazeingButtonProxy;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TriangleHitboxProxy = (function (_super) {
	    __extends(TriangleHitboxProxy, _super);
	    function TriangleHitboxProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    TriangleHitboxProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    TriangleHitboxProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(TriangleHitboxProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TriangleHitboxProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TriangleHitboxProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    TriangleHitboxProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return TriangleHitboxProxy;
	}(ProxyBase_1.ProxyBase));
	exports.TriangleHitboxProxy = TriangleHitboxProxy;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var GlazingOutlineProxy = (function (_super) {
	    __extends(GlazingOutlineProxy, _super);
	    function GlazingOutlineProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    GlazingOutlineProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    GlazingOutlineProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(GlazingOutlineProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GlazingOutlineProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GlazingOutlineProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    GlazingOutlineProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return GlazingOutlineProxy;
	}(ProxyBase_1.ProxyBase));
	exports.GlazingOutlineProxy = GlazingOutlineProxy;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var UndoButtonProxy = (function (_super) {
	    __extends(UndoButtonProxy, _super);
	    function UndoButtonProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    UndoButtonProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    UndoButtonProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    UndoButtonProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(UndoButtonProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(UndoButtonProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    UndoButtonProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	        var int = Math.floor(3.2);
	    };
	    UndoButtonProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return UndoButtonProxy;
	}(ProxyBase_1.ProxyBase));
	exports.UndoButtonProxy = UndoButtonProxy;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_skaeg__pic_placeholderProxy = (function (_super) {
	    __extends(BadGuy_skaeg__pic_placeholderProxy, _super);
	    function BadGuy_skaeg__pic_placeholderProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    BadGuy_skaeg__pic_placeholderProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_skaeg__pic_placeholderProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(BadGuy_skaeg__pic_placeholderProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_skaeg__pic_placeholderProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_skaeg__pic_placeholderProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_skaeg__pic_placeholderProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_skaeg__pic_placeholderProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_skaeg__pic_placeholderProxy = BadGuy_skaeg__pic_placeholderProxy;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var ClearButtonProxy = (function (_super) {
	    __extends(ClearButtonProxy, _super);
	    function ClearButtonProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    ClearButtonProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    ClearButtonProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    ClearButtonProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(ClearButtonProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ClearButtonProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ClearButtonProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    ClearButtonProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return ClearButtonProxy;
	}(ProxyBase_1.ProxyBase));
	exports.ClearButtonProxy = ClearButtonProxy;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var CakeArmProxy_1 = __webpack_require__(137);
	var NextArrowProxy_1 = __webpack_require__(104);
	var ClearButtonProxy_1 = __webpack_require__(145);
	var CakeCutShapesProxy_1 = __webpack_require__(147);
	var HoldingHandLeftProxy_1 = __webpack_require__(148);
	var PolaroidProxy_1 = __webpack_require__(22);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Logger_1 = __webpack_require__(4);
	var Scene9b_cutCakeProxy = (function (_super) {
	    __extends(Scene9b_cutCakeProxy, _super);
	    function Scene9b_cutCakeProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this.gotoOuttro = function () {
	            if (_this._armature.animation.lastAnimationName != "outtro") {
	                _this._armature.animation.play("outtro");
	            }
	        };
	        Logger_1.Logger.log(_this, "Scene9b_cutCakeProxy  constructor");
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene9b_cutCakeProxy.prototype.getHardCake = function () {
	        return new CakeArmProxy_1.CakeArmProxy(this.hardCake);
	    };
	    Scene9b_cutCakeProxy.prototype.getNextArrow = function () {
	        return new NextArrowProxy_1.NextArrowProxy(this.nextArrow);
	    };
	    Scene9b_cutCakeProxy.prototype.getClearButton = function () {
	        return new ClearButtonProxy_1.ClearButtonProxy(this.clearButton);
	    };
	    Scene9b_cutCakeProxy.prototype.getCakeCutShape = function () {
	        return new CakeCutShapesProxy_1.CakeCutShapesProxy(this.cakeCutShape);
	    };
	    Scene9b_cutCakeProxy.prototype.getHoldingHandLeft = function () {
	        return new HoldingHandLeftProxy_1.HoldingHandLeftProxy(this.holdingHandLeft);
	    };
	    Scene9b_cutCakeProxy.prototype.getHoldingHandLeft0 = function () {
	        return new HoldingHandLeftProxy_1.HoldingHandLeftProxy(this.holdingHandLeft0);
	    };
	    Scene9b_cutCakeProxy.prototype.getPolaroid = function () {
	        return new PolaroidProxy_1.PolaroidProxy(this.polaroid);
	    };
	    Scene9b_cutCakeProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene9b_cutCakeProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene9b_cutCakeProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Object.defineProperty(Scene9b_cutCakeProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene9b_cutCakeProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene9b_cutCakeProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene9b_cutCakeProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene9b_cutCakeProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene9b_cutCakeProxy = Scene9b_cutCakeProxy;


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BadGuy_skaeg__cakeShapeProxy_1 = __webpack_require__(50);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var CakeCutShapesProxy = (function (_super) {
	    __extends(CakeCutShapesProxy, _super);
	    function CakeCutShapesProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    CakeCutShapesProxy.prototype.getCakeShape = function () {
	        return new BadGuy_skaeg__cakeShapeProxy_1.BadGuy_skaeg__cakeShapeProxy(this.cakeShape);
	    };
	    CakeCutShapesProxy.prototype.gotoEmpty = function () {
	        if (this._armature.animation.lastAnimationName != "empty") {
	            this._armature.animation.play("empty");
	        }
	    };
	    CakeCutShapesProxy.prototype.gotoSkaeg = function () {
	        if (this._armature.animation.lastAnimationName != "skaeg") {
	            this._armature.animation.play("skaeg");
	        }
	    };
	    CakeCutShapesProxy.prototype.gotoChristian = function () {
	        if (this._armature.animation.lastAnimationName != "christian") {
	            this._armature.animation.play("christian");
	        }
	    };
	    CakeCutShapesProxy.prototype.gotoBamse = function () {
	        if (this._armature.animation.lastAnimationName != "bamse") {
	            this._armature.animation.play("bamse");
	        }
	    };
	    CakeCutShapesProxy.prototype.gotoMille = function () {
	        if (this._armature.animation.lastAnimationName != "mille") {
	            this._armature.animation.play("mille");
	        }
	    };
	    Object.defineProperty(CakeCutShapesProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CakeCutShapesProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CakeCutShapesProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    CakeCutShapesProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return CakeCutShapesProxy;
	}(ProxyBase_1.ProxyBase));
	exports.CakeCutShapesProxy = CakeCutShapesProxy;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var HoldingHandLeftProxy = (function (_super) {
	    __extends(HoldingHandLeftProxy, _super);
	    function HoldingHandLeftProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    HoldingHandLeftProxy.prototype.gotoUnnamed = function () {
	        if (this._armature.animation.lastAnimationName != "unnamed") {
	            this._armature.animation.play("unnamed");
	        }
	    };
	    Object.defineProperty(HoldingHandLeftProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HoldingHandLeftProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HoldingHandLeftProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    HoldingHandLeftProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return HoldingHandLeftProxy;
	}(ProxyBase_1.ProxyBase));
	exports.HoldingHandLeftProxy = HoldingHandLeftProxy;


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var HoldingHandLeftProxy_1 = __webpack_require__(148);
	var Pic_placeholderProxy_1 = __webpack_require__(23);
	var EndShoe1Proxy_1 = __webpack_require__(150);
	var WalkingTilesProxy_1 = __webpack_require__(151);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Scene10_walksceneProxy = (function (_super) {
	    __extends(Scene10_walksceneProxy, _super);
	    function Scene10_walksceneProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene10_walksceneProxy.prototype.getRightHand = function () {
	        return new HoldingHandLeftProxy_1.HoldingHandLeftProxy(this.rightHand);
	    };
	    Scene10_walksceneProxy.prototype.getLeftHand = function () {
	        return new HoldingHandLeftProxy_1.HoldingHandLeftProxy(this.leftHand);
	    };
	    Scene10_walksceneProxy.prototype.getPlaceholder = function () {
	        return new Pic_placeholderProxy_1.Pic_placeholderProxy(this.placeholder);
	    };
	    Scene10_walksceneProxy.prototype.getEndShoe1_0 = function () {
	        return new EndShoe1Proxy_1.EndShoe1Proxy(this.endShoe1_0);
	    };
	    Scene10_walksceneProxy.prototype.getWalkingTils2 = function () {
	        return new WalkingTilesProxy_1.WalkingTilesProxy(this.walkingTils2);
	    };
	    Scene10_walksceneProxy.prototype.getEndShoe1 = function () {
	        return new EndShoe1Proxy_1.EndShoe1Proxy(this.endShoe1);
	    };
	    Scene10_walksceneProxy.prototype.getWalkingTils1 = function () {
	        return new WalkingTilesProxy_1.WalkingTilesProxy(this.walkingTils1);
	    };
	    Scene10_walksceneProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene10_walksceneProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene10_walksceneProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    Scene10_walksceneProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Scene10_walksceneProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(Scene10_walksceneProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene10_walksceneProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene10_walksceneProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene10_walksceneProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene10_walksceneProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene10_walksceneProxy = Scene10_walksceneProxy;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var EndShoe1Proxy = (function (_super) {
	    __extends(EndShoe1Proxy, _super);
	    function EndShoe1Proxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    EndShoe1Proxy.prototype.gotoBrown = function () {
	        if (this._armature.animation.lastAnimationName != "brown") {
	            this._armature.animation.play("brown");
	        }
	    };
	    EndShoe1Proxy.prototype.gotoRed = function () {
	        if (this._armature.animation.lastAnimationName != "red") {
	            this._armature.animation.play("red");
	        }
	    };
	    EndShoe1Proxy.prototype.gotoMille = function () {
	        if (this._armature.animation.lastAnimationName != "mille") {
	            this._armature.animation.play("mille");
	        }
	    };
	    Object.defineProperty(EndShoe1Proxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EndShoe1Proxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    EndShoe1Proxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    EndShoe1Proxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return EndShoe1Proxy;
	}(ProxyBase_1.ProxyBase));
	exports.EndShoe1Proxy = EndShoe1Proxy;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var WalkingTilesProxy = (function (_super) {
	    __extends(WalkingTilesProxy, _super);
	    function WalkingTilesProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    WalkingTilesProxy.prototype.gotoStatic = function () {
	        if (this._armature.animation.lastAnimationName != "static") {
	            this._armature.animation.play("static");
	        }
	    };
	    Object.defineProperty(WalkingTilesProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(WalkingTilesProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    WalkingTilesProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    WalkingTilesProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return WalkingTilesProxy;
	}(ProxyBase_1.ProxyBase));
	exports.WalkingTilesProxy = WalkingTilesProxy;


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var DoorBellBgProxy_1 = __webpack_require__(153);
	var EndCaracterProxy_1 = __webpack_require__(154);
	var FreeModeButtonProxy_1 = __webpack_require__(84);
	var ReplayButtonProxy_1 = __webpack_require__(156);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Logger_1 = __webpack_require__(4);
	var Scene11_caracterThanksProxy = (function (_super) {
	    __extends(Scene11_caracterThanksProxy, _super);
	    function Scene11_caracterThanksProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene11_caracterThanksProxy.prototype.getDoorBellBg = function () {
	        return new DoorBellBgProxy_1.DoorBellBgProxy(this.doorBellBg);
	    };
	    Scene11_caracterThanksProxy.prototype.getCaracter = function () {
	        Logger_1.Logger.log(this, "Scene11_caracterThanksProxy getCaracter this.caracter== " + this.caracter);
	        return new EndCaracterProxy_1.EndCaracterProxy(this.caracter);
	    };
	    Scene11_caracterThanksProxy.prototype.getFreeModeButton = function () {
	        return new FreeModeButtonProxy_1.FreeModeButtonProxy(this.freeModeButton);
	    };
	    Scene11_caracterThanksProxy.prototype.getReplayButton = function () {
	        return new ReplayButtonProxy_1.ReplayButtonProxy(this.replayButton);
	    };
	    Scene11_caracterThanksProxy.prototype.gotoDefault = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    Scene11_caracterThanksProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene11_caracterThanksProxy.prototype.gotoFadeToBlack = function () {
	        if (this._armature.animation.lastAnimationName != "fadeToBlack") {
	            this._armature.animation.play("fadeToBlack");
	        }
	    };
	    Scene11_caracterThanksProxy.prototype.gotoReplay = function () {
	        if (this._armature.animation.lastAnimationName != "replay") {
	            this._armature.animation.play("replay");
	        }
	    };
	    Scene11_caracterThanksProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    Scene11_caracterThanksProxy.prototype.gotoIdle = function () {
	        this.gotoDefault();
	    };
	    Scene11_caracterThanksProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(Scene11_caracterThanksProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene11_caracterThanksProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene11_caracterThanksProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene11_caracterThanksProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene11_caracterThanksProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene11_caracterThanksProxy = Scene11_caracterThanksProxy;


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var DoorBellBgProxy = (function (_super) {
	    __extends(DoorBellBgProxy, _super);
	    function DoorBellBgProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    DoorBellBgProxy.prototype.gotoSkaeg = function () {
	        if (this._armature.animation.lastAnimationName != "skaeg") {
	            this._armature.animation.play("skaeg");
	        }
	    };
	    DoorBellBgProxy.prototype.gotoBamse = function () {
	        if (this._armature.animation.lastAnimationName != "bamse") {
	            this._armature.animation.play("bamse");
	        }
	    };
	    DoorBellBgProxy.prototype.gotoChristian = function () {
	        if (this._armature.animation.lastAnimationName != "christian") {
	            this._armature.animation.play("christian");
	        }
	    };
	    DoorBellBgProxy.prototype.gotoMille = function () {
	        if (this._armature.animation.lastAnimationName != "mille") {
	            this._armature.animation.play("mille");
	        }
	    };
	    Object.defineProperty(DoorBellBgProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DoorBellBgProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DoorBellBgProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    DoorBellBgProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return DoorBellBgProxy;
	}(ProxyBase_1.ProxyBase));
	exports.DoorBellBgProxy = DoorBellBgProxy;


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SkaegInDoorProxy_1 = __webpack_require__(155);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var Logger_1 = __webpack_require__(4);
	var EndCaracterProxy = (function (_super) {
	    __extends(EndCaracterProxy, _super);
	    function EndCaracterProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    EndCaracterProxy.prototype.getCaracter = function () {
	        Logger_1.Logger.log(this, "EndCaracterProxy getCaracter this.caracter== " + this.caracter);
	        return new SkaegInDoorProxy_1.SkaegInDoorProxy(this.caracter);
	    };
	    EndCaracterProxy.prototype.gotoSkaeg = function () {
	        if (this._armature.animation.lastAnimationName != "skaeg") {
	            this._armature.animation.play("skaeg");
	        }
	    };
	    EndCaracterProxy.prototype.gotoChristian = function () {
	        Logger_1.Logger.log(this, "EndCaracterProxy gotoChristian");
	        if (this._armature.animation.lastAnimationName != "christian") {
	            this._armature.animation.play("christian");
	        }
	    };
	    EndCaracterProxy.prototype.gotoBamse = function () {
	        if (this._armature.animation.lastAnimationName != "bamse") {
	            this._armature.animation.play("bamse");
	        }
	    };
	    EndCaracterProxy.prototype.gotoMille = function () {
	        if (this._armature.animation.lastAnimationName != "mille") {
	            this._armature.animation.play("mille");
	        }
	    };
	    Object.defineProperty(EndCaracterProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(EndCaracterProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    EndCaracterProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    EndCaracterProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return EndCaracterProxy;
	}(ProxyBase_1.ProxyBase));
	exports.EndCaracterProxy = EndCaracterProxy;


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var SkaegFrontHeadProxy_1 = __webpack_require__(53);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Logger_1 = __webpack_require__(4);
	var SkaegInDoorProxy = (function (_super) {
	    __extends(SkaegInDoorProxy, _super);
	    function SkaegInDoorProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    SkaegInDoorProxy.prototype.getHead = function () {
	        Logger_1.Logger.log(this, "SkaegInDoorProxy getHead this.head== " + this.head);
	        return new SkaegFrontHeadProxy_1.SkaegFrontHeadProxy(this.head);
	    };
	    SkaegInDoorProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    SkaegInDoorProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(SkaegInDoorProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(SkaegInDoorProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    SkaegInDoorProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    SkaegInDoorProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return SkaegInDoorProxy;
	}(ProxyBase_1.ProxyBase));
	exports.SkaegInDoorProxy = SkaegInDoorProxy;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ReplayButtonProxy = (function (_super) {
	    __extends(ReplayButtonProxy, _super);
	    function ReplayButtonProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    ReplayButtonProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    ReplayButtonProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    ReplayButtonProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(ReplayButtonProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ReplayButtonProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ReplayButtonProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    ReplayButtonProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return ReplayButtonProxy;
	}(ProxyBase_1.ProxyBase));
	exports.ReplayButtonProxy = ReplayButtonProxy;


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Chr_front_headProxy_1 = __webpack_require__(30);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var ChristianInDoorProxy = (function (_super) {
	    __extends(ChristianInDoorProxy, _super);
	    function ChristianInDoorProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    ChristianInDoorProxy.prototype.getHead = function () {
	        return new Chr_front_headProxy_1.Chr_front_headProxy(this.head);
	    };
	    ChristianInDoorProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    ChristianInDoorProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(ChristianInDoorProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ChristianInDoorProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ChristianInDoorProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    ChristianInDoorProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return ChristianInDoorProxy;
	}(ProxyBase_1.ProxyBase));
	exports.ChristianInDoorProxy = ChristianInDoorProxy;


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var BamseheadProxy_1 = __webpack_require__(93);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BamseInDoorProxy = (function (_super) {
	    __extends(BamseInDoorProxy, _super);
	    function BamseInDoorProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BamseInDoorProxy.prototype.getBamsehead = function () {
	        return new BamseheadProxy_1.BamseheadProxy(this.bamsehead);
	    };
	    BamseInDoorProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BamseInDoorProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(BamseInDoorProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BamseInDoorProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BamseInDoorProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BamseInDoorProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BamseInDoorProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BamseInDoorProxy = BamseInDoorProxy;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var MilleFront_headProxy_1 = __webpack_require__(44);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var BadGuy_mille__milleInDoorProxy = (function (_super) {
	    __extends(BadGuy_mille__milleInDoorProxy, _super);
	    function BadGuy_mille__milleInDoorProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    BadGuy_mille__milleInDoorProxy.prototype.getHead = function () {
	        return new MilleFront_headProxy_1.MilleFront_headProxy(this.head);
	    };
	    BadGuy_mille__milleInDoorProxy.prototype.gotoIdle = function () {
	        if (this._armature.animation.lastAnimationName != "idle") {
	            this._armature.animation.play("idle");
	        }
	    };
	    BadGuy_mille__milleInDoorProxy.prototype.gotoDefault = function () {
	        this.gotoIdle();
	    };
	    Object.defineProperty(BadGuy_mille__milleInDoorProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_mille__milleInDoorProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_mille__milleInDoorProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    BadGuy_mille__milleInDoorProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return BadGuy_mille__milleInDoorProxy;
	}(ProxyBase_1.ProxyBase));
	exports.BadGuy_mille__milleInDoorProxy = BadGuy_mille__milleInDoorProxy;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var Pic_placeholderProxy_1 = __webpack_require__(23);
	var PolaroidProxy_1 = __webpack_require__(22);
	var HoldingHandLeftProxy_1 = __webpack_require__(148);
	var FreeModeButtonProxy_1 = __webpack_require__(84);
	var NextArrowProxy_1 = __webpack_require__(104);
	var ReplayButtonProxy_1 = __webpack_require__(156);
	var ShootPictureProxy_1 = __webpack_require__(21);
	var WalkingTilesProxy_1 = __webpack_require__(151);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Scene12_freemodeProxy = (function (_super) {
	    __extends(Scene12_freemodeProxy, _super);
	    function Scene12_freemodeProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    Scene12_freemodeProxy.prototype.getPlaceholder = function () {
	        return new Pic_placeholderProxy_1.Pic_placeholderProxy(this.placeholder);
	    };
	    Scene12_freemodeProxy.prototype.getPolaorid2 = function () {
	        return new PolaroidProxy_1.PolaroidProxy(this.polaorid2);
	    };
	    Scene12_freemodeProxy.prototype.getHoldingHandLeft = function () {
	        return new HoldingHandLeftProxy_1.HoldingHandLeftProxy(this.holdingHandLeft);
	    };
	    Scene12_freemodeProxy.prototype.getHoldingHandLeft0 = function () {
	        return new HoldingHandLeftProxy_1.HoldingHandLeftProxy(this.holdingHandLeft0);
	    };
	    Scene12_freemodeProxy.prototype.getPolaorid1 = function () {
	        return new PolaroidProxy_1.PolaroidProxy(this.polaorid1);
	    };
	    Scene12_freemodeProxy.prototype.getPolaorid0 = function () {
	        return new PolaroidProxy_1.PolaroidProxy(this.polaorid0);
	    };
	    Scene12_freemodeProxy.prototype.getCamButton = function () {
	        return new FreeModeButtonProxy_1.FreeModeButtonProxy(this.camButton);
	    };
	    Scene12_freemodeProxy.prototype.getNextArrow = function () {
	        return new NextArrowProxy_1.NextArrowProxy(this.nextArrow);
	    };
	    Scene12_freemodeProxy.prototype.getFreeModeButton = function () {
	        return new FreeModeButtonProxy_1.FreeModeButtonProxy(this.freeModeButton);
	    };
	    Scene12_freemodeProxy.prototype.getReplayButton = function () {
	        return new ReplayButtonProxy_1.ReplayButtonProxy(this.replayButton);
	    };
	    Scene12_freemodeProxy.prototype.getShootPicture = function () {
	        return new ShootPictureProxy_1.ShootPictureProxy(this.shootPicture);
	    };
	    Scene12_freemodeProxy.prototype.getWalkingTiles = function () {
	        return new WalkingTilesProxy_1.WalkingTilesProxy(this.walkingTiles);
	    };
	    Scene12_freemodeProxy.prototype.gotoIntro = function () {
	        if (this._armature.animation.lastAnimationName != "intro") {
	            this._armature.animation.play("intro");
	        }
	    };
	    Scene12_freemodeProxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            this._armature.animation.play("loop");
	        }
	    };
	    Scene12_freemodeProxy.prototype.gotoShoot = function () {
	        if (this._armature.animation.lastAnimationName != "shoot") {
	            this._armature.animation.play("shoot");
	        }
	    };
	    Scene12_freemodeProxy.prototype.gotoButton = function () {
	        if (this._armature.animation.lastAnimationName != "button") {
	            this._armature.animation.play("button");
	        }
	    };
	    Scene12_freemodeProxy.prototype.gotoOuttro = function () {
	        if (this._armature.animation.lastAnimationName != "outtro") {
	            this._armature.animation.play("outtro");
	        }
	    };
	    Scene12_freemodeProxy.prototype.gotoOutro = function () {
	        this.gotoOuttro();
	    };
	    Object.defineProperty(Scene12_freemodeProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Scene12_freemodeProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Scene12_freemodeProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    Scene12_freemodeProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return Scene12_freemodeProxy;
	}(ProxyBase_1.ProxyBase));
	exports.Scene12_freemodeProxy = Scene12_freemodeProxy;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchGuideProxy = (function (_super) {
	    __extends(TouchGuideProxy, _super);
	    function TouchGuideProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    TouchGuideProxy.prototype.gotoLoop = function () {
	        if (this._armature.animation.lastAnimationName != "loop") {
	            var check = this._armature.animation.play("loop");
	        }
	    };
	    Object.defineProperty(TouchGuideProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TouchGuideProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TouchGuideProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    TouchGuideProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return TouchGuideProxy;
	}(ProxyBase_1.ProxyBase));
	exports.TouchGuideProxy = TouchGuideProxy;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var BadGuy_christian__spyGlassProxy_1 = __webpack_require__(39);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var BadGuy_christian__spyGlassButton = (function (_super) {
	    __extends(BadGuy_christian__spyGlassButton, _super);
	    function BadGuy_christian__spyGlassButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    BadGuy_christian__spyGlassButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(BadGuy_christian__spyGlassButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__spyGlassButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(BadGuy_christian__spyGlassButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BadGuy_christian__spyGlassButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return BadGuy_christian__spyGlassButton;
	}(BadGuy_christian__spyGlassProxy_1.BadGuy_christian__spyGlassProxy));
	exports.BadGuy_christian__spyGlassButton = BadGuy_christian__spyGlassButton;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Logger_1 = __webpack_require__(4);
	var AudioPlayer = (function () {
	    function AudioPlayer() {
	        if (AudioPlayer._instance) {
	            throw new Error("Error: Instantiation failed: Use AudioPlayer.getInstance() instead of new.");
	        }
	    }
	    AudioPlayer.getInstance = function () {
	        if (AudioPlayer._instance == null) {
	            AudioPlayer._instance = new AudioPlayer();
	            AudioPlayer._instance.init();
	        }
	        return AudioPlayer._instance;
	    };
	    Object.defineProperty(AudioPlayer, "instantiated", {
	        get: function () {
	            return Boolean(AudioPlayer._instance);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AudioPlayer.prototype.init = function () {
	        this._soundNames = [];
	        this._sounds = [];
	    };
	    AudioPlayer.prototype.playSound = function (soundName, loops, volume, fadeTime, starttime) {
	        if (loops === void 0) { loops = 0; }
	        if (volume === void 0) { volume = this.volume; }
	        if (fadeTime === void 0) { fadeTime = 0; }
	        if (starttime === void 0) { starttime = 0; }
	        var sound;
	        try {
	            sound = createjs.Sound.play(soundName, createjs.Sound.INTERRUPT_EARLY, 0, 0, loops, volume);
	            sound.uniqueId = soundName;
	        }
	        catch (error) {
	            Logger_1.Logger.log(this, "playSound ERROR");
	        }
	        return sound;
	    };
	    AudioPlayer.prototype.playRandomSound = function (sounds) {
	        var sound;
	        return sound;
	    };
	    AudioPlayer.prototype.fadeAllTo = function (volume, time) {
	        Logger_1.Logger.log(this, "fadeAllTo");
	    };
	    AudioPlayer.prototype.stopSound = function (soundName) {
	        var sound = this.getSoundByName(soundName);
	        Logger_1.Logger.log(this, "stopSound sound == " + sound);
	        sound.stop();
	    };
	    AudioPlayer.prototype.stopAllSounds = function () {
	        createjs.Sound.stop();
	    };
	    AudioPlayer.prototype.getSoundByName = function (name) {
	        var sound = this._sounds[this._soundNames.lastIndexOf(name)];
	        return sound;
	    };
	    AudioPlayer.prototype.removeSoundByName = function (name) {
	        var index = this._soundNames.lastIndexOf(name);
	        if (index > -1) {
	            this._soundNames.splice(index, 1);
	            this._sounds.splice(index, 1);
	        }
	    };
	    Object.defineProperty(AudioPlayer.prototype, "volume", {
	        get: function () {
	            return this._volume;
	        },
	        set: function (pVolume) {
	            this._volume = pVolume;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AudioPlayer.prototype.onSoundComplete = function (e) {
	        Logger_1.Logger.log(this, "AudioPlayer onSOundComplete");
	        Logger_1.Logger.log(this, "AudioPlayer onSOundComplete e.uni " + e.target);
	    };
	    AudioPlayer.destroySingleton = function () {
	        if (AudioPlayer.instantiated) {
	            AudioPlayer._instance.destroy();
	        }
	    };
	    AudioPlayer.prototype.destroy = function () {
	        AudioPlayer._instance = null;
	    };
	    return AudioPlayer;
	}());
	AudioPlayer.EVENT_SOUND_STARTED = "EVENT_SOUND_STARTED";
	AudioPlayer.EVENT_SOUND_FINISHED = "EVENT_SOUND_FINISHED";
	AudioPlayer.SOUND_GENERIC_BUTTON_PRESS = "GenericButtonPress";
	AudioPlayer.SOUND_SINGLE_PAGE_TURN = "SinglePageTurnSound";
	AudioPlayer.SOUND_MULTI_PAGE_TURN = "MultiPageTurnSound";
	AudioPlayer.SOUND_VO_HOME = "VOHomeSound";
	AudioPlayer.SOUND_VO_READ_AGAIN = "VOReadAgainSound";
	AudioPlayer.SOUND_VO_PREVIOUS_PAGE = "VOPreviousPage";
	AudioPlayer.SOUND_VO_NEXT_PAGE = "VONextPage";
	AudioPlayer.SOUND_POPUP_ANIMATION_AUDIO = "popup_animation_audio";
	AudioPlayer.SOUND_INTRO_MUSIC = "introMusic";
	AudioPlayer.NAV_BAR_BUTTON_SOUND = "NavBarButtonSound";
	AudioPlayer.STORY_BUTTON_READ_AND_PLAY = "button_readAndPlay";
	AudioPlayer.STORY_BUTTON_READ_IT_MYSELF = "button_readItMyself";
	AudioPlayer.STORY_BUTTON_READ_TO_ME = "button_readToMe";
	AudioPlayer.STORY_BUTTON_SING_TO_ME = "button_singToMe";
	AudioPlayer.STORY_BUTTON_SING_WITH_ME = "button_singWithMe";
	AudioPlayer.END_SCREEN_THE = "end_screen_the";
	AudioPlayer.END_SCREEN_END = "end_screen_end";
	AudioPlayer.END_SCREEN_THE_END = "end_screen_the_end";
	exports.AudioPlayer = AudioPlayer;


/***/ },
/* 164 */
/***/ function(module, exports) {

	"use strict";
	var SoundNames = (function () {
	    function SoundNames() {
	    }
	    return SoundNames;
	}());
	SoundNames.S04_ROSA_02_BILLEDER_AF_FARVE = "04_Rosa_02-billeder-af-farve";
	SoundNames.S04_ROSA_02_BILLEDER_AF_FORM = "04_Rosa_02-billeder-af-form";
	SoundNames.S04_ROSA_02_BILLEDER_AF_SMAG = "04_Rosa_02-billeder-af-smag";
	SoundNames.S08_ROSA_02_SAA_ER_KAGEN_KLAR_TIL_OVN = "08_Rosa_02-saa-er-kagen-klar-til-ovn";
	SoundNames.S08_ROSA_04_VIL_DU_SAETTE_AEGGEURET = "08_Rosa_04-vil-du-saette-aeggeuret";
	SoundNames.S08_ROSA_05_SAA_ER_DER_VIST_EN_KAGE_DER_VIL_UD_AF_OVNEN = "08_Rosa_05-saa-er-der-vist-en-kage-der-vil-ud-af-ovnen";
	SoundNames.S08_ROSA_06_UHM_DEN_DUFTER_GODT = "08_Rosa_06-uhm-den-dufter-godt";
	SoundNames.S10_ROSA_01_SAA_ER_KAGEN_FAERDIG_LAD_OS_KOMME_AFSTED_MED_DEN = "10_Rosa_01-saa-er-kagen-faerdig-lad-os-komme-afsted-med-den";
	SoundNames.S10_ROSA_03_LAD_OS_KOMME_AFSTED_MED_DEN = "10_Rosa_03-lad-os-komme-afsted-med-den";
	SoundNames.S11_ROSA_01_OK_NU_RINGER_JEGPAA_SAA = "11_Rosa_01-ok-nu-ringer-jegpaa-saa";
	SoundNames.S11_ROSA_02_DET_HARVAERET_SUPERFEDT_AT_BAGE_MED_DIG = "11_Rosa_02-det-harvaeret-superfedt-at-bage-med-dig";
	SoundNames.S11_ROSA_03_HELD_OG_LYKKE_MED_AT_AFLEVERE_KAGEN = "11_Rosa_03-held-og-lykke-med-at-aflevere-kagen";
	SoundNames.S12_ROSA_01_GODT_GAAET = "12_Rosa_01-godt-gaaet";
	SoundNames.S03_BAMSE_SPEAKS_HOV_HVAD_VAR_DET_2 = "s03-Bamse-speaks-Hov-hvad-let-det-2";
	SoundNames.S03_BAMSE_SPEAKS_HOV_HVAD_VAR_DET = "s03-Bamse-speaks-Hov-hvad-let-det";
	SoundNames.S03_BAMSE_SPEAKS_INTRO_BITE00_MOLODI = "s03-bamse-speaks-intro-bite00-molodi";
	SoundNames.S03_BAMSE_SPEAKS_INTRO_BITE01_JODLELOHOOHOO = "s03-bamse-speaks-intro-bite01-jodlelohoohoo";
	SoundNames.S03_BAMSE_SPEAKS_INTRO_BITE02_JODLESANGEN = "s03-bamse-speaks-intro-bite02-jodlesangen";
	SoundNames.S03_BAMSE_SPEAKS_INTRO_BITE04_BUMMELUMMELUM = "s03-bamse-speaks-intro-bite04-bummelummelum";
	SoundNames.S03_BAMSE_SPEAKS_INTRO_BITE05_SULTEN = "s03-bamse-speaks-intro-bite05-sulten";
	SoundNames.S11_01_BAMSE_SPEAKS_NEJ_EN_LAEKKER_KAGE_DU_HAR_BAGT = "s11-01-Bamse-speaks-nej-en-laekker-kage-du-har-bagt";
	SoundNames.S11_BAMSE_THANKS = "S11_bamse_thanks";
	SoundNames.S03_BAMSE_SPEAKS_IKKE_SET_FOER = "s03-Bamse-speaks-ikke-set-foer";
	SoundNames.S03_KRISTIAN_SPEAKS_HMM = "s03-kristian-speaks-hmm";
	SoundNames.S03_KRISTIAN_SPEAKS_HOERTE_DU_DET = "s03-kristian-speaks-hoerte_du_det";
	SoundNames.S03_KRISTIAN_SPEAKS_HOV_HVAD_VAR_DET = "s03-kristian-speaks-hov_hvad_var_det";
	SoundNames.S03_KRISTIAN_SPEAKS_SIKKE_EN_UNDERLIG_LYD = "s03-kristian-speaks-sikke_en_underlig_lyd";
	SoundNames.S03_KRISTIAN_SPEAKS_IDLE1 = "s03-kristian-speaks-idle1";
	SoundNames.S03_KRISTIAN_SPEAKS_IDLE2 = "s03-kristian-speaks-idle2";
	SoundNames.S03_KRISTIAN_SPEAKS_IDLE3 = "s03-kristian-speaks-idle3";
	SoundNames.S11_01_KRISTIAN_SPEAKS_EJ_HVOR_SER_DEN_KAGE_LAEKKER_UD_ER_DEN_TIL_MIG = "s11-01-kristian-speaks-ej_hvor_ser_den_kage_laekker_ud_er_den_til_mig";
	SoundNames.S11_CHRISTIAN_THANKS = "S11_christian_thanks";
	SoundNames.S03_KRISTIAN_SPEAKS_HVAD_I_ALVERDEN_IKKE_SET_FOER = "s03-kristian-speaks-hvad_i_alverden_ikke_set_foer";
	SoundNames.S03_MILLE_SPEAKS_HVAD_ER_DET_FOR_EN_UNDERLIG_LYD = "s03-mille-speaks-hvad_er_det_for_en_underlig_lyd";
	SoundNames.S03_MILLE_SPEAKS_HVAD_I_ALVERDEN_IKKE_SET_FOER = "s03-mille-speaks-hvad_i_alverden_ikke_set_foer";
	SoundNames.S03_MILLE_SPEAKS_HVAD_VAR_DET = "s03-mille-speaks-hvad_var_det";
	SoundNames.S03_MILLE_SPEAKS_JEG_SYNES_JEG_HORTE_NOGET = "s03-mille-speaks-jeg_synes_jeg_horte_noget";
	SoundNames.S03_MILLE_SPEAKS_PAS_PAA_FUGLEN_NOEDLANDER = "s03-mille_speaks_pas_paa_fuglen_noedlander";
	SoundNames.S03_MILLE_SPEAKS_GRIBE_HIMSTERGIMSFUGLEN = "s03_mille_speaks_gribe_himstergimsfuglen";
	SoundNames.S03_MILLE_SPEAKS_HVORFOR_VIRKER_KAMERAET_NU_IKKE = "s03_mille_speaks_hvorfor_virker_kameraet_nu_ikke";
	SoundNames.S11_1_MILLE_SPEAKS_HYGGELIGT_DU_KOM = "s11_1_mille_speaks_hyggeligt_du_kom";
	SoundNames.S11_2_MILLE_SPEAKS_MEGASJOV_KAGE = "s11_2_mille_speaks_megasjov_kage";
	SoundNames.S01_MILLE_SPEAKS_BOERNEBANDEN_TIL_AT_HJAELPE = "s01-mille-speaks-boernebanden_til_at_hjaelpe";
	SoundNames.S01_MILLE_SPEAKS_BYDE_FUGLEN_PAA_KAGE = "s01-mille-speaks-byde_fuglen_paa_kage";
	SoundNames.S01_MILLE_SPEAKS_HEJ_GODT_AT_SE_DIG = "s01-mille-speaks-hej_godt_at_se_dig";
	SoundNames.S03_SKAEG_SPEAKS_HMMM_MYSTISK = "s03-skaeg-speaks-hmmm_mystisk";
	SoundNames.S03_SKAEG_SPEAKS_HOV_HVAD_VAR_DET = "s03-skaeg-speaks-hov_hvad_var_det";
	SoundNames.S03_SKAEG_SPEAKS_SIKKE_EN_UMDERLIG_LYD = "s03-skaeg-speaks-sikke_en_umderlig_lyd";
	SoundNames.S03_SKAEG_SPEAKS_EN_TO_OG_DER_ER_TRE = "s03-skaeg-speaks-en_to_og_der_er_tre";
	SoundNames.S03_SKAEG_SPEAKS_FIRE_OG_FEM_OG_SEKS_ER_DEROVRE = "s03-skaeg-speaks-fire_og_fem_og_seks_er_derovre";
	SoundNames.S03_SKAEG_SPEAKS_HVOR_POKKER_ER_SYV = "s03-skaeg-speaks-hvor_pokker_er_syv";
	SoundNames.S11_01_SKAEG_SPEAKS_KAGE_TIL_MIG = "s11-01-skaeg-speaks-kage_til_mig";
	SoundNames.S11_02_SKAEG_SPEAKS_SKAL_VI_IKKE_SMAGE_PAA_KAGEN = "s11-02-skaeg-speaks-skal_vi_ikke_smage_paa_kagen";
	SoundNames.S03_SKAEG_SPEAKS_HVAD_I_ALVERDEN_ER_DET = "s03-skaeg-speaks-hvad_i_alverden_er_det";
	SoundNames.S00_ROSA_12_EJD_DET_TROR_JEG_IKKE_ER_DEN_HELT_RIGTIGE = "00_Rosa_12-ejd-det-tror-jeg-ikke-er-den-helt-rigtige";
	SoundNames.S00_ROSA_36_DET_TROR_JEG_HAN_BLIVER_GLAD_FOR_DET_HER = "00_Rosa_36-det-tror-jeg-han-bliver-glad-for-det-her";
	SoundNames.S01_ROSA_01_HEJ_VIL_DU_VAERE = "01_Rosa_01-hej-vil-du-vaere";
	SoundNames.S02_ROSA_01_OK_NU_GAELDER_DET_OM = "02_Rosa_01-ok-nu-gaelder-det-om";
	SoundNames.S02_ROSA_02_NU_SKAL_VI_SNIGE_OS_FORBI = "02_Rosa_02-nu-skal-vi-snige-os-forbi";
	SoundNames.S03_ROSA_01_JA = "03_Rosa_01-ja";
	SoundNames.S03_ROSA_02_HVOR_ER_DU_GOD = "03_Rosa_02-hvor-er-du-god";
	SoundNames.S03_ROSA_03_FORSIGTIG = "03_Rosa_03-forsigtig";
	SoundNames.S03_ROSA_04_AAH_NEJ = "03_Rosa_04-aah-nej";
	SoundNames.S03_ROSA_05_OEV_VI_MAA_PROEVE_IGEN = "03_Rosa_05-oev-vi-maa-proeve-igen";
	SoundNames.S03_ROSA_06_TRYK_PAA_SKAERMEN_FOR_AT_GP = "03_Rosa_06-tryk-paa-skaermen-for-at-gp";
	SoundNames.S04_ROSA_01_YES_VI_KLAREDE_DET = "04_Rosa_01-yes-vi-klarede-det";
	SoundNames.S04_ROSA_02_NU_SKAL_VI_TAGE_BILLEDER = "04_Rosa_02-nu-skal-vi-tage-billeder";
	SoundNames.S04_ROSA_03_JA_SAADAN_SE_UD = "04_Rosa_03-ja-saadan-se-ud";
	SoundNames.S04_ROSA_04_SUPER_DET_ER_EN_GOD_SMAG = "04_Rosa_04-super-det-er-en-god-smag";
	SoundNames.S04_ROSA_05_JA_FLOT_FARVE = "04_Rosa_05-ja-flot-farve";
	SoundNames.S04_ROSA_06_DET_TROR_JEG_SMAG = "04_Rosa_06-det-tror-jeg-smag";
	SoundNames.S04_ROSA_07_SNUPPER_DU_IKKE_ET_SPIONBILLEDE_AF_DEN = "04_Rosa_07-snupper-du-ikke-et-spionbillede-af-den";
	SoundNames.S04_ROSA_08_GODT_KLARET_LAD_OS_KOMME_TILBAGE = "04_Rosa_08-godt-klaret-lad-os-komme-tilbage";
	SoundNames.S04_ROSA_09_TRYK_RUND_TIL_DU_FINDER = "04_Rosa_09-tryk-rund-til-du-finder";
	SoundNames.S04_ROSA_10_MON_VI_KAN_TAENDE_FOR_MYSTERIO = "04_Rosa_10-mon-vi-kan-taende-for-mysterio";
	SoundNames.S05_ROSA_01_OK_KAGESPION = "05_Rosa_01-ok-kagespion";
	SoundNames.S06_ROSA_01_VI_STARTER_MED_AT_LAVE_EN_DEJ = "06_Rosa_01-vi-starter-med-at-lave-en-dej";
	SoundNames.S06_ROSA_02_YES_DEN_SKAL_I = "06_Rosa_02-yes-den-skal-i";
	SoundNames.S06_ROSA_03_JA_DEN_SKAL_I = "06_Rosa_03-ja-den-skal-i";
	SoundNames.S06_ROSA_04_YES = "06_Rosa_04-yes";
	SoundNames.S06_ROSA_05_DEN_ER_GOD = "06_Rosa_05-den-er-god";
	SoundNames.S06_ROSA_06_JA = "06_Rosa_06-ja";
	SoundNames.S06_ROSA_07_SAADAN = "06_Rosa_07-saadan";
	SoundNames.S06_ROSA_19_SMAG_MILK = "06_Rosa_19-smag_milk";
	SoundNames.S06_ROSA_20_SMAG_SUGAR = "06_Rosa_20-smag_sugar";
	SoundNames.S06_ROSA_21_SMAG_YEAST = "06_Rosa_21-smag_yeast";
	SoundNames.S06_ROSA_24_SMAG_CACAO = "06_Rosa_24-smag_cacao";
	SoundNames.S07_ROSA_01_VI_SKAL_FINDE_DEN_HELT_RIGTIGE_KAGESMAG = "07_Rosa_01-vi-skal-finde-den-helt-rigtige-kagesmag";
	SoundNames.S07_ROSA_03_UF_DEN_ER_SUR = "07_Rosa_03-uf-den-er-sur";
	SoundNames.S07_ROSA_07_AHR_DET_ER_LAEKKERT = "07_Rosa_07-ahr-det-er-laekkert";
	SoundNames.S07_ROSA_10_DET_SMAGER_IKKE_RIGTIG_AFSAA_MEGET_DET_HER = "07_Rosa_10-det-smager-ikke-rigtig-afsaa-meget-det-her";
	SoundNames.S07_ROSA_11_SMAG_FLOUR = "07_Rosa_11-smag_flour";
	SoundNames.S07_ROSA_12_SMAG_OIL = "07_Rosa_12-smag_oil";
	SoundNames.S07_ROSA_14_UH_DET_ER__EN_GOD_KAGESAMG = "07_Rosa_14-uh-det-er--en-god-kagesamg";
	SoundNames.S07_ROSA_18_UHMM_DER_HAR_DU_FUNDET_NOGET_HODT_NOGET = "07_Rosa_18-uhmm-der-har-du-fundet-noget_hodt_noget";
	SoundNames.S08_ROSA_01_SAA_KSLA_DER_BLANDES_MED_FINGERE_ELLER_HAANDMIXER = "08_Rosa_01-saa-ksla-der-blandes-med-fingere-eller-haandmixer";
	SoundNames.S09_ROSA_01_NU_ER_DET_TID_TIL_AT_SKAERE_KAGEN = "09_Rosa_01-nu-er-det-tid-til-at-skaere-kagen";
	SoundNames.S09_ROSA_02_NU_SKAL_VI_HAVE_PYNTET_KAGEN = "09_Rosa_02-nu-skal-vi-have-pyntet-kagen";
	SoundNames.S09_ROSA_03_EJ_HVOR_BLIVER_DEN_FLOT = "09_Rosa_03-ej-hvor-bliver-den-flot";
	SoundNames.S09_ROSA_04_DET_BLIVER_ATLSAA_EN_SUPERFLOT_KAGE = "09_Rosa_04-det-bliver-atlsaa-en-superflot-kage";
	SoundNames.S09_ROSA_05_JA_DET_SER_GODT_UD = "09_Rosa_05-ja-det-ser-godt-ud";
	SoundNames.S09_ROSA_06_UHM_DEN_BLIVER_RIGTIG_LAEKKER = "09_Rosa_06-uhm-den-bliver-rigtig-laekker";
	SoundNames.FREEMODE_ROSA = "Freemode_rosa";
	SoundNames.S08A_DEJ_RAMMER_KANT_01 = "s08a-dej_rammer_kant-01";
	SoundNames.S08A_DEJ_RAMMER_KANT_02 = "s08a-dej_rammer_kant-02";
	SoundNames.SPOTTED = "spotted";
	SoundNames.DICESWING3 = "diceSwing3";
	SoundNames.FFFFFFP = "ffffffp";
	SoundNames.FX_HOLOGRAM_ZAPZOING = "fx_hologram_zapzoing";
	SoundNames.FX_MYSTERIO_BOOT_DR = "fx_mysterio_boot_dr";
	SoundNames.FX_SWISH01_LOW = "fx_swish01_low";
	SoundNames.FX_SWISH02 = "fx_swish02";
	SoundNames.FX_TOK = "fx_tok";
	SoundNames.HARDSTEP_A = "hardStep_A";
	SoundNames.HARDSTEP_B = "hardStep_B";
	SoundNames.RUB_SQUEAK = "rub-squeak";
	SoundNames.S03_SKRIDT_1 = "s03-skridt-1";
	SoundNames.S03_SKRIDT_A = "s03-skridt-A";
	SoundNames.S03_SKRIDT_B = "s03-skridt-B";
	SoundNames.S04_KAMERA = "s04-kamera";
	SoundNames.S05_MAGNETKLIK_01 = "s05-magnetklik_01";
	SoundNames.S05_MAGNETKLIK_02 = "s05-magnetklik_02";
	SoundNames.S06_DEJ_AAEG = "s06-dej-aaeg";
	SoundNames.S06_NY_KAKAO_01 = "s06-ny_kakao_01";
	SoundNames.S06_NY_MAELK_01 = "s06-ny_maelk_01";
	SoundNames.S06_NY_MAELK_HAELDER = "s06-ny_maelk_haelder";
	SoundNames.S06_NY_MEL_01 = "s06-ny_mel_01";
	SoundNames.S06_NY_MEL_KOMMER_I_01 = "s06-ny_mel_kommer_i_01";
	SoundNames.S06_NY_OLIE_01 = "s06-ny_olie_01";
	SoundNames.S06_NY_OLIE_02 = "s06-ny_olie_02";
	SoundNames.S06_NY_SUKKER_01 = "s06-ny_sukker_01";
	SoundNames.S06_NY_SUKKER_HAELDER03 = "s06-ny_sukker_haelder03";
	SoundNames.S08A_DEJ_KANT_NY = "s08a-dej-kant-ny";
	SoundNames.S08A_DEJ_SPLAT = "s08a-dej-splat";
	SoundNames.S08B_NYT_UR_DING03 = "s08b-nyt_ur_ding03";
	SoundNames.S08B_NYT_UR_SAETTES01 = "s08b-nyt_ur_saettes01";
	SoundNames.S08B_NYT_UR_TIKKER02 = "s08b-nyt_ur_tikker02";
	SoundNames.S08B_NY_OVN_01 = "s08b-ny_ovn_01";
	SoundNames.S08B_NY_OVN_02 = "s08b-ny_ovn_02";
	SoundNames.S08B_NY_OVN_03 = "s08b-ny_ovn_03";
	SoundNames.S08B_NY_OVN_04 = "s08b-ny_ovn_04";
	SoundNames.S11_BAMSE_SPEAKS_NEJ_EN_LAEKKER_KAGE_DU_HAR_BAGT = "s11-Bamse-speaks-nej-en-laekker-kage-du-har-bagt";
	SoundNames.S11_DOOR_OPEN_01 = "s11-door_open_01";
	SoundNames.S11_KLOKKE_02 = "s11-klokke_02";
	SoundNames.SCENE0SWING = "scene0Swing";
	SoundNames.SMALLTABLESOUND1 = "smallTableSound1";
	SoundNames.SMALLTABLESOUND2 = "smallTableSound2";
	SoundNames.SMALLTABLESOUND3 = "smallTableSound3";
	SoundNames.SMALLTABLESOUND4 = "smallTableSound4";
	SoundNames.SMALLTABLESOUND5 = "smallTableSound5";
	SoundNames.SMALLTABLESOUND6 = "smallTableSound6";
	SoundNames.STUFINTHEBACK = "stufIntheback";
	SoundNames.SWISH = "swish";
	SoundNames.SWISH_FAST_LOW = "swish_fast_low";
	SoundNames.TRIPLE_SWOOSH_HI = "triple_swoosh_hi";
	SoundNames.UI_KLIK = "ui_klik";
	exports.SoundNames = SoundNames;


/***/ },
/* 165 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ButtonEvent = (function (_super) {
	    __extends(ButtonEvent, _super);
	    function ButtonEvent() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ButtonEvent.prototype.ButtonEvent = function (type, button, bubbles, data) {
	        if (bubbles === void 0) { bubbles = false; }
	        if (data === void 0) { data = null; }
	        this.button = button;
	    };
	    return ButtonEvent;
	}(Event));
	ButtonEvent.CLICKED = "click";
	ButtonEvent.TOUCH = "touch";
	exports.ButtonEvent = ButtonEvent;


/***/ },
/* 166 */
/***/ function(module, exports) {

	"use strict";
	var TouchPhase = (function () {
	    function TouchPhase() {
	    }
	    return TouchPhase;
	}());
	TouchPhase.BEGAN = "began";
	TouchPhase.ENDED = "ended";
	TouchPhase.HOVER = "hover";
	TouchPhase.MOVED = "moved";
	TouchPhase.STATIONARY = "stationary";
	exports.TouchPhase = TouchPhase;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var Color_clueProxy_1 = __webpack_require__(14);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var Color_clueButton = (function (_super) {
	    __extends(Color_clueButton, _super);
	    function Color_clueButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    Color_clueButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(Color_clueButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Color_clueButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Color_clueButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Color_clueButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this._armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return Color_clueButton;
	}(Color_clueProxy_1.Color_clueProxy));
	exports.Color_clueButton = Color_clueButton;


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var Form_clueProxy_1 = __webpack_require__(19);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var Form_clueButton = (function (_super) {
	    __extends(Form_clueButton, _super);
	    function Form_clueButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    Form_clueButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(Form_clueButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Form_clueButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Form_clueButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Form_clueButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return Form_clueButton;
	}(Form_clueProxy_1.Form_clueProxy));
	exports.Form_clueButton = Form_clueButton;


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var Taste_clueProxy_1 = __webpack_require__(20);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var Taste_clueButton = (function (_super) {
	    __extends(Taste_clueButton, _super);
	    function Taste_clueButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    Taste_clueButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(Taste_clueButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Taste_clueButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Taste_clueButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Taste_clueButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return Taste_clueButton;
	}(Taste_clueProxy_1.Taste_clueProxy));
	exports.Taste_clueButton = Taste_clueButton;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var StartButtonProxy_1 = __webpack_require__(85);
	var TypedDBFactory_1 = __webpack_require__(6);
	var Logger_1 = __webpack_require__(4);
	var StartButtonButton = (function (_super) {
	    __extends(StartButtonButton, _super);
	    function StartButtonButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        _this.interactive = true;
	        _this.disabled = true;
	        _this.armature.display.on(ButtonEvent_1.ButtonEvent.CLICKED, _this.buttonTouched);
	        _this.armature.display.on("touchstart", _this.buttonTouched);
	        _this.armature.display.on("mousedown", _this.buttonTouched);
	        _this.armature.display.on("mouseup", _this.buttonTouched);
	        return _this;
	    }
	    StartButtonButton.prototype.dispose = function () {
	        this.armature.display.off(ButtonEvent_1.ButtonEvent.CLICKED, this.buttonTouched);
	    };
	    Object.defineProperty(StartButtonButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StartButtonButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            Logger_1.Logger.log(this, "StartButtonButton  disabled  value == " + value);
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            Logger_1.Logger.log(this, "StartButtonButton  disabled  btn == " + btn);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StartButtonButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    StartButtonButton.prototype.buttonTouched = function (event) {
	        Logger_1.Logger.log(this, "StartButtonButton  buttonTouched");
	        Logger_1.Logger.log(this, "StartButtonButton  buttonTouched  event.currentTarget === " + event.currentTarget);
	        var touch = event.currentTarget;
	        Logger_1.Logger.log(this, "StartButtonButton  buttonTouched     touch == " + touch);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (event.type) {
	                case "touchstart":
	                case "mousedown":
	                    btn.gotoDown();
	                    break;
	                case "touchend":
	                case "mouseup":
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return StartButtonButton;
	}(StartButtonProxy_1.StartButtonProxy));
	exports.StartButtonButton = StartButtonButton;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var CharCardFrame0Proxy_1 = __webpack_require__(87);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var CharCardFrame0Button = (function (_super) {
	    __extends(CharCardFrame0Button, _super);
	    function CharCardFrame0Button(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    CharCardFrame0Button.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(CharCardFrame0Button.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame0Button.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame0Button.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CharCardFrame0Button.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return CharCardFrame0Button;
	}(CharCardFrame0Proxy_1.CharCardFrame0Proxy));
	exports.CharCardFrame0Button = CharCardFrame0Button;


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var CharCardFrame1Proxy_1 = __webpack_require__(91);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var CharCardFrame1Button = (function (_super) {
	    __extends(CharCardFrame1Button, _super);
	    function CharCardFrame1Button(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    CharCardFrame1Button.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(CharCardFrame1Button.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame1Button.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame1Button.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CharCardFrame1Button.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return CharCardFrame1Button;
	}(CharCardFrame1Proxy_1.CharCardFrame1Proxy));
	exports.CharCardFrame1Button = CharCardFrame1Button;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var CharCardFrame2Proxy_1 = __webpack_require__(94);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var CharCardFrame2Button = (function (_super) {
	    __extends(CharCardFrame2Button, _super);
	    function CharCardFrame2Button(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this.selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    CharCardFrame2Button.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(CharCardFrame2Button.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame2Button.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame2Button.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CharCardFrame2Button.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this._armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return CharCardFrame2Button;
	}(CharCardFrame2Proxy_1.CharCardFrame2Proxy));
	exports.CharCardFrame2Button = CharCardFrame2Button;


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var CharCardFrame3Proxy_1 = __webpack_require__(96);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var CharCardFrame3Button = (function (_super) {
	    __extends(CharCardFrame3Button, _super);
	    function CharCardFrame3Button(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    CharCardFrame3Button.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(CharCardFrame3Button.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame3Button.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(CharCardFrame3Button.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CharCardFrame3Button.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this._armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return CharCardFrame3Button;
	}(CharCardFrame3Proxy_1.CharCardFrame3Proxy));
	exports.CharCardFrame3Button = CharCardFrame3Button;


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var DisguiseBubbleChristianProxy_1 = __webpack_require__(99);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var DisguiseBubbleChristianButton = (function (_super) {
	    __extends(DisguiseBubbleChristianButton, _super);
	    function DisguiseBubbleChristianButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    DisguiseBubbleChristianButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(DisguiseBubbleChristianButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleChristianButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleChristianButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DisguiseBubbleChristianButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return DisguiseBubbleChristianButton;
	}(DisguiseBubbleChristianProxy_1.DisguiseBubbleChristianProxy));
	exports.DisguiseBubbleChristianButton = DisguiseBubbleChristianButton;


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var DisguiseBubbleBamseProxy_1 = __webpack_require__(100);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var DisguiseBubbleBamseButton = (function (_super) {
	    __extends(DisguiseBubbleBamseButton, _super);
	    function DisguiseBubbleBamseButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    DisguiseBubbleBamseButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(DisguiseBubbleBamseButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleBamseButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleBamseButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DisguiseBubbleBamseButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return DisguiseBubbleBamseButton;
	}(DisguiseBubbleBamseProxy_1.DisguiseBubbleBamseProxy));
	exports.DisguiseBubbleBamseButton = DisguiseBubbleBamseButton;


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var DisguiseBubbleSkaegProxy_1 = __webpack_require__(101);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var DisguiseBubbleSkaegButton = (function (_super) {
	    __extends(DisguiseBubbleSkaegButton, _super);
	    function DisguiseBubbleSkaegButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    DisguiseBubbleSkaegButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(DisguiseBubbleSkaegButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleSkaegButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleSkaegButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DisguiseBubbleSkaegButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return DisguiseBubbleSkaegButton;
	}(DisguiseBubbleSkaegProxy_1.DisguiseBubbleSkaegProxy));
	exports.DisguiseBubbleSkaegButton = DisguiseBubbleSkaegButton;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var DisguiseBubbleMilleProxy_1 = __webpack_require__(179);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var DisguiseBubbleMilleButton = (function (_super) {
	    __extends(DisguiseBubbleMilleButton, _super);
	    function DisguiseBubbleMilleButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    DisguiseBubbleMilleButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(DisguiseBubbleMilleButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleMilleButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleMilleButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DisguiseBubbleMilleButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return DisguiseBubbleMilleButton;
	}(DisguiseBubbleMilleProxy_1.DisguiseBubbleMilleProxy));
	exports.DisguiseBubbleMilleButton = DisguiseBubbleMilleButton;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Disquise_milleProxy_1 = __webpack_require__(78);
	var TypedDBFactory_1 = __webpack_require__(6);
	var ProxyBase_1 = __webpack_require__(8);
	var DisguiseBubbleMilleProxy = (function (_super) {
	    __extends(DisguiseBubbleMilleProxy, _super);
	    function DisguiseBubbleMilleProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        _this.setSlotChildArmature();
	        return _this;
	    }
	    DisguiseBubbleMilleProxy.prototype.getDisquise = function () {
	        return new Disquise_milleProxy_1.Disquise_milleProxy(this.disquise);
	    };
	    DisguiseBubbleMilleProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    DisguiseBubbleMilleProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    DisguiseBubbleMilleProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(DisguiseBubbleMilleProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DisguiseBubbleMilleProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DisguiseBubbleMilleProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    DisguiseBubbleMilleProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return DisguiseBubbleMilleProxy;
	}(ProxyBase_1.ProxyBase));
	exports.DisguiseBubbleMilleProxy = DisguiseBubbleMilleProxy;


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var HandMixerButtonArmProxy_1 = __webpack_require__(124);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var HandMixerButtonArmButton = (function (_super) {
	    __extends(HandMixerButtonArmButton, _super);
	    function HandMixerButtonArmButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    HandMixerButtonArmButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(HandMixerButtonArmButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HandMixerButtonArmButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(HandMixerButtonArmButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    HandMixerButtonArmButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return HandMixerButtonArmButton;
	}(HandMixerButtonArmProxy_1.HandMixerButtonArmProxy));
	exports.HandMixerButtonArmButton = HandMixerButtonArmButton;


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var MixerButton2ArmProxy_1 = __webpack_require__(128);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var MixerButton2ArmButton = (function (_super) {
	    __extends(MixerButton2ArmButton, _super);
	    function MixerButton2ArmButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    MixerButton2ArmButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(MixerButton2ArmButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MixerButton2ArmButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MixerButton2ArmButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MixerButton2ArmButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return MixerButton2ArmButton;
	}(MixerButton2ArmProxy_1.MixerButton2ArmProxy));
	exports.MixerButton2ArmButton = MixerButton2ArmButton;


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var MixerButton3ArmProxy_1 = __webpack_require__(129);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var MixerButton3ArmButton = (function (_super) {
	    __extends(MixerButton3ArmButton, _super);
	    function MixerButton3ArmButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    MixerButton3ArmButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(MixerButton3ArmButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MixerButton3ArmButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MixerButton3ArmButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MixerButton3ArmButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return MixerButton3ArmButton;
	}(MixerButton3ArmProxy_1.MixerButton3ArmProxy));
	exports.MixerButton3ArmButton = MixerButton3ArmButton;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var MixerButton1ArmProxy_1 = __webpack_require__(130);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var MixerButton1ArmButton = (function (_super) {
	    __extends(MixerButton1ArmButton, _super);
	    function MixerButton1ArmButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    MixerButton1ArmButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(MixerButton1ArmButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MixerButton1ArmButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MixerButton1ArmButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    MixerButton1ArmButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return MixerButton1ArmButton;
	}(MixerButton1ArmProxy_1.MixerButton1ArmProxy));
	exports.MixerButton1ArmButton = MixerButton1ArmButton;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var GlazeingButtonProxy_1 = __webpack_require__(140);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var GlazeingButtonButton = (function (_super) {
	    __extends(GlazeingButtonButton, _super);
	    function GlazeingButtonButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    GlazeingButtonButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(GlazeingButtonButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GlazeingButtonButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(GlazeingButtonButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    GlazeingButtonButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return GlazeingButtonButton;
	}(GlazeingButtonProxy_1.GlazeingButtonProxy));
	exports.GlazeingButtonButton = GlazeingButtonButton;


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var UndoButtonProxy_1 = __webpack_require__(143);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var UndoButtonButton = (function (_super) {
	    __extends(UndoButtonButton, _super);
	    function UndoButtonButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    UndoButtonButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(UndoButtonButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(UndoButtonButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(UndoButtonButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    UndoButtonButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this._armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return UndoButtonButton;
	}(UndoButtonProxy_1.UndoButtonProxy));
	exports.UndoButtonButton = UndoButtonButton;


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var ClearButtonProxy_1 = __webpack_require__(145);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var Logger_1 = __webpack_require__(4);
	var ClearButtonButton = (function (_super) {
	    __extends(ClearButtonButton, _super);
	    function ClearButtonButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    ClearButtonButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(ClearButtonButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ClearButtonButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this._armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ClearButtonButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ClearButtonButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this._armature.display);
	        Logger_1.Logger.log(this, "buttonTouched");
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return ClearButtonButton;
	}(ClearButtonProxy_1.ClearButtonProxy));
	exports.ClearButtonButton = ClearButtonButton;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var FreeModeButtonProxy_1 = __webpack_require__(84);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var FreeModeButtonButton = (function (_super) {
	    __extends(FreeModeButtonButton, _super);
	    function FreeModeButtonButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    FreeModeButtonButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(FreeModeButtonButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FreeModeButtonButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(FreeModeButtonButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    FreeModeButtonButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return FreeModeButtonButton;
	}(FreeModeButtonProxy_1.FreeModeButtonProxy));
	exports.FreeModeButtonButton = FreeModeButtonButton;


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var NextArrowProxy_1 = __webpack_require__(104);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var NextArrowButton = (function (_super) {
	    __extends(NextArrowButton, _super);
	    function NextArrowButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    NextArrowButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(NextArrowButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NextArrowButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NextArrowButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NextArrowButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return NextArrowButton;
	}(NextArrowProxy_1.NextArrowProxy));
	exports.NextArrowButton = NextArrowButton;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var ReplayButtonProxy_1 = __webpack_require__(156);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var ReplayButtonButton = (function (_super) {
	    __extends(ReplayButtonButton, _super);
	    function ReplayButtonButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    ReplayButtonButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(ReplayButtonButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ReplayButtonButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ReplayButtonButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ReplayButtonButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return ReplayButtonButton;
	}(ReplayButtonProxy_1.ReplayButtonProxy));
	exports.ReplayButtonButton = ReplayButtonButton;


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var ButtonEvent_1 = __webpack_require__(165);
	var StartButtonGameProxy_1 = __webpack_require__(191);
	var TypedDBFactory_1 = __webpack_require__(6);
	var TouchPhase_1 = __webpack_require__(166);
	var StartButtonGameButton = (function (_super) {
	    __extends(StartButtonGameButton, _super);
	    function StartButtonGameButton(armature) {
	        var _this = _super.call(this, armature) || this;
	        _this._selected = false;
	        armature.display.addListener("TOUCH", _this.buttonTouched);
	        return _this;
	    }
	    StartButtonGameButton.prototype.dispose = function () {
	        this.armature.display.removeListener("TOUCH", this.buttonTouched);
	    };
	    Object.defineProperty(StartButtonGameButton.prototype, "isToggle", {
	        get: function () {
	            return this._isToggle;
	        },
	        set: function (value) {
	            this._isToggle = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StartButtonGameButton.prototype, "disabled", {
	        get: function () {
	            return this._disabled;
	        },
	        set: function (value) {
	            this._disabled = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                btn.gotoDisabled();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StartButtonGameButton.prototype, "selected", {
	        get: function () {
	            return this._selected;
	        },
	        set: function (value) {
	            this._selected = value;
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._selected) {
	                btn.gotoDown();
	            }
	            else {
	                btn.gotoUp();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    StartButtonGameButton.prototype.buttonTouched = function (event) {
	        var touch = event.getTouch(this.armature.display);
	        if (touch) {
	            var btn = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(this.armature.display);
	            if (this._disabled) {
	                return;
	            }
	            switch (touch.phase) {
	                case TouchPhase_1.TouchPhase.BEGAN:
	                    btn.gotoDown();
	                    break;
	                case TouchPhase_1.TouchPhase.ENDED:
	                    if (this._isToggle) {
	                        this.selected = !this._selected;
	                    }
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.UI_KLIK);
	                    btn.gotoUp();
	                    dispatchEvent(new ButtonEvent_1.ButtonEvent(ButtonEvent_1.ButtonEvent.CLICKED, this));
	                    break;
	            }
	        }
	    };
	    return StartButtonGameButton;
	}(StartButtonGameProxy_1.StartButtonGameProxy));
	exports.StartButtonGameButton = StartButtonGameButton;


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ProxyBase_1 = __webpack_require__(8);
	var TypedDBFactory_1 = __webpack_require__(6);
	var StartButtonGameProxy = (function (_super) {
	    __extends(StartButtonGameProxy, _super);
	    function StartButtonGameProxy(armature) {
	        var _this = _super.call(this) || this;
	        _this._armature = armature;
	        TypedDBFactory_1.TypedDBFactory.setProxyFromDisplay(_this._armature.display, _this);
	        return _this;
	    }
	    StartButtonGameProxy.prototype.gotoUp = function () {
	        if (this._armature.animation.lastAnimationName != "up") {
	            this._armature.animation.play("up");
	        }
	    };
	    StartButtonGameProxy.prototype.gotoDown = function () {
	        if (this._armature.animation.lastAnimationName != "down") {
	            this._armature.animation.play("down");
	        }
	    };
	    StartButtonGameProxy.prototype.gotoDisabled = function () {
	        if (this._armature.animation.lastAnimationName != "disabled") {
	            this._armature.animation.play("disabled");
	        }
	    };
	    Object.defineProperty(StartButtonGameProxy.prototype, "armature", {
	        get: function () {
	            return this._armature;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(StartButtonGameProxy.prototype, "display", {
	        get: function () {
	            return this._armature.display;
	        },
	        set: function (newDisplay) {
	            if (this._armature.getSlots().length == 1) {
	                var slot = this._armature.getSlots()[0];
	                if (!slot) {
	                    throw new Error("Could not find the armature slot");
	                }
	                if (slot.display) {
	                }
	                slot.display = newDisplay;
	            }
	            else {
	                throw new Error("You cannot change display of armature containing more than one bone!");
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    StartButtonGameProxy.prototype.show = function (container) {
	        container.addChild(this.display);
	        dragonBones.WorldClock.clock.add(this._armature);
	    };
	    StartButtonGameProxy.prototype.remove = function (container) {
	        container.removeChild(this.display);
	        dragonBones.WorldClock.clock.remove(this._armature);
	    };
	    return StartButtonGameProxy;
	}(ProxyBase_1.ProxyBase));
	exports.StartButtonGameProxy = StartButtonGameProxy;


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Rosa_1 = __webpack_require__(193);
	var Logger_1 = __webpack_require__(4);
	var Initializer = (function () {
	    function Initializer() {
	    }
	    Initializer.prototype.setCallbacks = function (initDoneCallback, exitCallback, showLoaderCallBack, hideLoaderCallBack, debugCallBack) {
	        Logger_1.Logger.log(this, "setCallbacks");
	        Initializer.initDoneCallbackFunction = initDoneCallback;
	        Initializer.exitCallbackFunction = exitCallback;
	        Initializer.showLoaderCallbackFunction = showLoaderCallBack;
	        Initializer.hideLoaderCallbackFunction = hideLoaderCallBack;
	        Initializer.debugCallbackFunction = debugCallBack;
	    };
	    Initializer.prototype.startGame = function (subGameToStart) {
	        Logger_1.Logger.log(this, "startGame  subGameToStart == " + subGameToStart);
	        this._subGameToStart = subGameToStart;
	        this.onInitDone();
	    };
	    Initializer.prototype.backButtonCallbackProxy = function () {
	        if (Initializer.backButtonCallback != null) {
	            Initializer.backButtonCallback();
	        }
	    };
	    Initializer.prototype.getUseWideStage = function () {
	        return true;
	    };
	    Initializer.prototype.onInitDone = function () {
	        Logger_1.Logger.log(this, "onInitDone");
	        var game = new Rosa_1.Rosa(true);
	        Logger_1.Logger.log(this, "game == " + game);
	    };
	    return Initializer;
	}());
	exports.Initializer = Initializer;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var MainView_1 = __webpack_require__(194);
	var Initializer_1 = __webpack_require__(192);
	var Logger_1 = __webpack_require__(4);
	var Rosa = (function (_super) {
	    __extends(Rosa, _super);
	    function Rosa(debug, assetPrefix) {
	        if (debug === void 0) { debug = true; }
	        if (assetPrefix === void 0) { assetPrefix = "rosa_game_assets/"; }
	        var _this = _super.call(this) || this;
	        Logger_1.Logger.log(_this, "Rosa(debug == " + _this.debug);
	        Logger_1.Logger.log(_this, "Rosa(assetPrefix == " + _this.assetPrefix);
	        _this.assetPrefix = assetPrefix;
	        _this.debug = debug;
	        _this.init();
	        return _this;
	    }
	    Rosa.prototype.init = function (event) {
	        if (event === void 0) { event = null; }
	        Logger_1.Logger.log(this, "Rosa init");
	        this.setupAssetManager();
	        this.starLoading();
	        if (!this.debug) {
	            Initializer_1.Initializer.showLoaderCallbackFunction();
	        }
	    };
	    Rosa.prototype.setupAssetManager = function () {
	        Logger_1.Logger.log(this, "Rosa.setupAssetManager()");
	    };
	    Rosa.prototype.starLoading = function () {
	        Logger_1.Logger.log(this, "Rosa.starLoading()");
	        if (this.debug) {
	        }
	        this.validateData();
	    };
	    Rosa.prototype.validateData = function () {
	        Logger_1.Logger.log(this, "Rosa validateData()");
	        this.startApp();
	    };
	    Rosa.prototype.startApp = function () {
	        Logger_1.Logger.log(this, "Rosa.startApp()");
	        this.mainView = new MainView_1.MainView();
	        this.mainView.addListener("KILL_GAME", this.onkillGame);
	        this.addChild(this.mainView);
	        if (!this.debug) {
	            Initializer_1.Initializer.hideLoaderCallbackFunction();
	        }
	        if (this.debug) {
	        }
	    };
	    Rosa.prototype.onkillGame = function (e) {
	        Logger_1.Logger.log(this, "Rosa.onkillGame(e)");
	        this.mainView.removeListener("KILL_GAME", this.onkillGame);
	        this.removeChild(this.mainView);
	        this.endGame();
	    };
	    Rosa.prototype.endGame = function () {
	        Logger_1.Logger.log(this, "endGame");
	        if (!this.debug) {
	            Initializer_1.Initializer.exitCallbackFunction();
	        }
	    };
	    Rosa.prototype.getInitializer = function () {
	        if (!this._initializer) {
	            this._initializer = new Initializer_1.Initializer();
	            return this._initializer;
	        }
	        Logger_1.Logger.log(this, "getInitializer");
	    };
	    return Rosa;
	}(PIXI.Sprite));
	exports.Rosa = Rosa;


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AssetLoader_1 = __webpack_require__(3);
	var AudioPlayer_1 = __webpack_require__(163);
	var SceneEvent_1 = __webpack_require__(195);
	var Model_1 = __webpack_require__(5);
	var Scene_01_IntroView_1 = __webpack_require__(196);
	var Scene_02_PickCharView_1 = __webpack_require__(199);
	var Scene_03_PickDisguise_1 = __webpack_require__(200);
	var Scene_04_SneakGameView_1 = __webpack_require__(201);
	var Scene_05_GatherCluesView_1 = __webpack_require__(203);
	var Scene_06_PresentCluesView_1 = __webpack_require__(204);
	var Scene_07_BasicIngredientsView_1 = __webpack_require__(206);
	var Scene_080_CutCakeView_1 = __webpack_require__(208);
	var Scene_081_DecorateCakeView_1 = __webpack_require__(209);
	var Scene_08_TasteIngredientsView_1 = __webpack_require__(210);
	var Scene_08a_Mixing_1 = __webpack_require__(211);
	var Scene_09_OvenView_1 = __webpack_require__(212);
	var Scene_10_WalkView_1 = __webpack_require__(213);
	var Scene_11_CharThanksView_1 = __webpack_require__(214);
	var Scene_12_FreeModePresentView_1 = __webpack_require__(215);
	var Logger_1 = __webpack_require__(4);
	var Button_1 = __webpack_require__(216);
	var ButtonEvent_1 = __webpack_require__(165);
	var SoundEvent_1 = __webpack_require__(217);
	var SoundEventManager_1 = __webpack_require__(218);
	var MainView = (function (_super) {
	    __extends(MainView, _super);
	    function MainView() {
	        var _this = _super.call(this) || this;
	        _this.isMuted = false;
	        _this.old_w = AssetLoader_1.AssetLoader.STAGE_WIDTH;
	        _this.old_h = AssetLoader_1.AssetLoader.STAGE_HEIGHT;
	        _this.new_w = 1;
	        _this.new_h = 1;
	        _this.currentSceneIndex = 0;
	        _this.buttonClicked = function (event) {
	            Logger_1.Logger.log(_this, "MainView buttonClicked");
	        };
	        _this.textureCompleteHandler1 = function (resources) {
	            Logger_1.Logger.log(_this, "MainView textureCompleteHandler1");
	            _this.setupRosa();
	            _this.setupUI();
	            _this.sceneContainer.addListener(SceneEvent_1.SceneEvent.REPLAY_FREEMODE, _this.onReplayFreemode);
	            _this.sceneContainer.addListener(SceneEvent_1.SceneEvent.REPLAY_STORY, _this.onReplayStory);
	        };
	        _this.handleSceneProgress = function (event) {
	            Logger_1.Logger.log(_this, "MainView MainView handleSceneProgress event.type == " + event.type);
	            Logger_1.Logger.log(_this, "MainView MainView handleSceneProgress event.nextSceneIndex == " + event.nextSceneIndex);
	            _this.removeScene();
	            switch (event.type) {
	                case SceneEvent_1.SceneEvent.JUMP:
	                    _this.currentSceneIndex = event.nextSceneIndex;
	                    break;
	                case SceneEvent_1.SceneEvent.NEXT:
	                    _this.currentSceneIndex++;
	                    break;
	                case SceneEvent_1.SceneEvent.PREVIOUS:
	                    _this.currentSceneIndex--;
	                    break;
	            }
	            _this.addScene();
	        };
	        _this.backButtonClicked = function (event) {
	            Logger_1.Logger.log(_this, "MainView MainView backButtonClicked");
	            _this.disposeCharacter();
	            if (_this.currentSceneIndex == Model_1.Model.SCENE_INTRO) {
	                _this.dispose();
	            }
	            else {
	                _this.handleSceneProgress(new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.JUMP, Model_1.Model.SCENE_INTRO, true));
	            }
	        };
	        _this.handleResize = function (event) {
	            if (event === void 0) { event = null; }
	            _this.new_w = window.innerWidth;
	            _this.new_h = window.innerHeight;
	            _this.r_old = _this.old_w / _this.old_h;
	            _this.r_new = _this.new_w / _this.new_h;
	            var width;
	            var height;
	            if (_this.r_old > _this.r_new) {
	                width = _this.new_w;
	                height = width / _this.r_old;
	            }
	            else {
	                height = _this.new_h;
	                width = height * _this.r_old;
	            }
	            AssetLoader_1.AssetLoader.getInstance().rosaCanvas.style.width = width + "px";
	            AssetLoader_1.AssetLoader.getInstance().rosaCanvas.style.height = height + "px";
	            _this.new_w = width;
	            _this.new_h = height;
	        };
	        _this.init();
	        return _this;
	    }
	    MainView.prototype.added = function (event) {
	    };
	    MainView.prototype.init = function () {
	        Logger_1.Logger.log(this, "MainView init");
	        AudioPlayer_1.AudioPlayer.getInstance().volume = .8;
	        this.addListener("CLICKED", this.buttonClicked);
	        AssetLoader_1.AssetLoader.getInstance().init(this.textureCompleteHandler1);
	        AssetLoader_1.AssetLoader.getInstance().stage.addChild(this);
	        var aspect = AssetLoader_1.AssetLoader.getInstance().rosaCanvas.clientWidth / AssetLoader_1.AssetLoader.getInstance().rosaCanvas.clientHeight;
	        Logger_1.Logger.log(this, "MainView MainView init  aspect == " + aspect);
	        $(window).on('resize', this.handleResize);
	        this.handleResize();
	    };
	    MainView.prototype.setupRosa = function () {
	        Logger_1.Logger.log(this, "MainView setupRosa");
	        this.scenes = [];
	        this.scenes.push(new Scene_01_IntroView_1.Scene_01_IntroView());
	        this.scenes.push(new Scene_02_PickCharView_1.Scene_02_PickCharView());
	        this.scenes.push(new Scene_03_PickDisguise_1.Scene_03_PickDisguise());
	        this.scenes.push(new Scene_04_SneakGameView_1.Scene_04_SneakGameView());
	        this.scenes.push(new Scene_05_GatherCluesView_1.Scene_05_GatherCluesView());
	        this.scenes.push(new Scene_06_PresentCluesView_1.Scene_06_PresentCluesView());
	        this.scenes.push(new Scene_07_BasicIngredientsView_1.Scene_07_BasicIngredientsView());
	        this.scenes.push(new Scene_08_TasteIngredientsView_1.Scene_08_TasteIngredientsView());
	        this.scenes.push(new Scene_08a_Mixing_1.Scene_08a_Mixing());
	        this.scenes.push(new Scene_09_OvenView_1.Scene_09_OvenView());
	        this.scenes.push(new Scene_080_CutCakeView_1.Scene_080_CutCakeView());
	        this.scenes.push(new Scene_081_DecorateCakeView_1.Scene_081_DecorateCakeView());
	        this.scenes.push(new Scene_10_WalkView_1.Scene_10_WalkView());
	        this.scenes.push(new Scene_11_CharThanksView_1.Scene_11_CharThanksView());
	        this.scenes.push(new Scene_12_FreeModePresentView_1.Scene_12_FreeModePresentView());
	        this.on(SceneEvent_1.SceneEvent.NEXT, this.handleSceneProgress);
	        this.on(SceneEvent_1.SceneEvent.PREVIOUS, this.handleSceneProgress);
	        this.on(SceneEvent_1.SceneEvent.JUMP, this.handleSceneProgress);
	        this._typeddb = AssetLoader_1.AssetLoader.getInstance().typeddb;
	        this.currentSceneIndex = Model_1.Model.SCENE_INTRO;
	        this.sceneContainer = new PIXI.Container();
	        this.addChild(this.sceneContainer);
	        this.addScene();
	    };
	    MainView.prototype.setupUI = function () {
	        Logger_1.Logger.log(this, "MainView setupUI");
	        this.backButton = new Button_1.Button();
	        this.backButton.addChild(PIXI.Sprite.fromFrame("BackArrow"));
	        this.backButton.x = 10;
	        this.backButton.y = 10;
	        this.backButton.on(ButtonEvent_1.ButtonEvent.CLICKED, this.backButtonClicked);
	        AssetLoader_1.AssetLoader.getInstance().stage.addChild(this.backButton);
	    };
	    MainView.prototype.setupSoundManager = function () {
	        Logger_1.Logger.log(this, "MainView setupSoundManager");
	        SoundEventManager_1.SoundEventManager.getInstance().addListener(SoundEvent_1.SoundEvent.SOUND, this.playSound);
	    };
	    MainView.prototype.setupSounds = function () {
	        Logger_1.Logger.log(this, "MainView setupSounds");
	    };
	    MainView.rosaSpeak = function (soundName, rosa) {
	        Logger_1.Logger.log(this, "MainView rosaSpeak : soundName == " + soundName);
	        AudioPlayer_1.AudioPlayer.getInstance().playSound(soundName);
	        rosa.gotoTalk();
	        rosa.getHead().gotoTalk();
	    };
	    MainView.rosaSpeakWithoutState = function (soundName, rosa) {
	        Logger_1.Logger.log(this, "MainView rosaSpeakWithoutState : soundName == " + soundName);
	        AudioPlayer_1.AudioPlayer.getInstance().playSound(soundName);
	        rosa.gotoDefault();
	        rosa.getHead().gotoDefault();
	    };
	    MainView.rosaSpeakRandom = function (sounds, rosa) {
	        Logger_1.Logger.log(this, "MainView rosaSpeakRandom : sounds == " + sounds);
	        AudioPlayer_1.AudioPlayer.getInstance().playRandomSound(sounds);
	        rosa.gotoDefault();
	        rosa.getHead().gotoDefault();
	    };
	    MainView.rosaSpeakDone = function () {
	    };
	    MainView.prototype.playSound = function (event) {
	        Logger_1.Logger.log(this, "MainView Play sound:");
	        if (event.sound.indexOf("splat") == -1 && event.sound.indexOf("skridt-A") == -1) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	        }
	        var soundName = event.sound.substr(0, event.sound.length - 4);
	        soundName = this.strReplace(soundName, "å", "aa");
	        AudioPlayer_1.AudioPlayer.getInstance().playSound(soundName);
	    };
	    MainView.prototype.removeScene = function () {
	        Logger_1.Logger.log(this, "MainView removeScene");
	        var currentScene = this.scenes[this.currentSceneIndex];
	        Logger_1.Logger.log(this, "MainView removeScene  currentScene == " + currentScene);
	        currentScene.teardown();
	        this.sceneContainer.removeChild(currentScene);
	    };
	    MainView.prototype.addScene = function () {
	        Logger_1.Logger.log(this, "MainView MainView addScene");
	        var currentScene = this.scenes[this.currentSceneIndex];
	        Logger_1.Logger.log(this, "MainView MainView addScene  currentScene == " + currentScene);
	        currentScene.setup(this._typeddb);
	        this.sceneContainer.addChild(currentScene);
	        currentScene.on(SceneEvent_1.SceneEvent.NEXT, this.handleSceneProgress);
	        currentScene.on(SceneEvent_1.SceneEvent.PREVIOUS, this.handleSceneProgress);
	        currentScene.on(SceneEvent_1.SceneEvent.JUMP, this.handleSceneProgress);
	    };
	    MainView.prototype.disposeCharacter = function () {
	        Logger_1.Logger.log(this, "MainView disposeCharacter");
	        var model = Model_1.Model.getInstance();
	        if (model.charIsSelected) {
	            var characterName = Model_1.Model.getInstance().getSelectedCharName();
	            Logger_1.Logger.log(this, "MainView disposeCharacter characterName == " + characterName);
	            var assetsToRemove = [
	                "Scene3_{char}_bg",
	                "Scene4_{char}_bg",
	                "background-{char}",
	                "inside-{char}",
	                "texture-{char}"
	            ];
	            for (var _i = 0, assetsToRemove_1 = assetsToRemove; _i < assetsToRemove_1.length; _i++) {
	                var assetToRemove = assetsToRemove_1[_i];
	                assetToRemove = assetToRemove.replace(/\{char\}/g, characterName);
	                Logger_1.Logger.log(this, "MainView Removing character texture '" + assetToRemove + "'");
	                AssetLoader_1.AssetLoader.getInstance().removeTexture(assetToRemove, true);
	                Logger_1.Logger.log(this, "MainView Removing character texture atlas '" + assetToRemove + "' from dragonBones..");
	                this._typeddb._factory.removeTextureAtlasData(assetToRemove);
	                Logger_1.Logger.log(this, "MainView Removing character texture atlas '" + assetToRemove + "'");
	                AssetLoader_1.AssetLoader.getInstance().removeTextureAtlas(assetToRemove, true);
	            }
	            model.charIsSelected = false;
	        }
	    };
	    MainView.prototype.onReplayStory = function (event) {
	        Logger_1.Logger.log(this, "MainView MainView onReplayStory");
	        Model_1.Model.getInstance().gameMode = Model_1.Model.MODE_STORY;
	        this.disposeCharacter();
	        this.handleSceneProgress(new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.JUMP, Model_1.Model.SCENE_PICK_CHAR, true));
	    };
	    MainView.prototype.onReplayFreemode = function (event) {
	        Logger_1.Logger.log(this, "MainView MainView onReplayFreemode");
	        Model_1.Model.getInstance().gameMode = Model_1.Model.MODE_FREE;
	        this.disposeCharacter();
	        this.handleSceneProgress(new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.JUMP, Model_1.Model.SCENE_PRESENT_CLUES, true));
	    };
	    MainView.prototype.strReplace = function (str, search, replace) {
	        return str.split(search).join(replace);
	    };
	    MainView.prototype.dispose = function () {
	        Logger_1.Logger.log(this, "MainView disposing MainView");
	        if (Model_1.Model.getInstance().cakeTexture != null) {
	            Model_1.Model.getInstance().cakeTexture = null;
	        }
	        this.sceneContainer.removeListener(SceneEvent_1.SceneEvent.REPLAY_FREEMODE, this.onReplayFreemode);
	        this.sceneContainer.removeListener(SceneEvent_1.SceneEvent.REPLAY_STORY, this.onReplayStory);
	        this.removeScene();
	        this.backButton.dispose();
	        dragonBones.WorldClock.clock.clear();
	    };
	    return MainView;
	}(PIXI.Sprite));
	MainView.DELAY_TEST_NEXT_SCENE = 4000;
	exports.MainView = MainView;


/***/ },
/* 195 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SceneEvent = (function (_super) {
	    __extends(SceneEvent, _super);
	    function SceneEvent(type, nextSceneIndex, bubbles, data) {
	        if (bubbles === void 0) { bubbles = false; }
	        if (data === void 0) { data = null; }
	        var _this = _super.call(this) || this;
	        _this.type = type;
	        _this.nextSceneIndex = nextSceneIndex;
	        return _this;
	    }
	    return SceneEvent;
	}(PIXI.utils.EventEmitter));
	SceneEvent.SCENEEVENT = "SceneEvent";
	SceneEvent.JUMP = "SceneEvent.jump";
	SceneEvent.NEXT = "SceneEvent.next";
	SceneEvent.PREVIOUS = "SceneEvent.previous";
	SceneEvent.REPLAY_FREEMODE = "SceneEvent.replayFreeMode";
	SceneEvent.REPLAY_STORY = "SceneEvent.replayStoryMode";
	exports.SceneEvent = SceneEvent;


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var ButtonEvent_1 = __webpack_require__(165);
	var SceneEvent_1 = __webpack_require__(195);
	var StartButtonButton_1 = __webpack_require__(170);
	var Backgrounds_1 = __webpack_require__(198);
	var FreeModeButtonButton_1 = __webpack_require__(187);
	var Model_1 = __webpack_require__(5);
	var Logger_1 = __webpack_require__(4);
	var MainView_1 = __webpack_require__(194);
	var Scene_01_IntroView = (function (_super) {
	    __extends(Scene_01_IntroView, _super);
	    function Scene_01_IntroView() {
	        var _this = _super.call(this) || this;
	        _this.gotoIntro = function () {
	            Logger_1.Logger.log(_this, "Scene_01_IntroView  gotoIntro");
	            _this.introScene.display.visible = true;
	            _this.introScene.gotoIntro();
	            setTimeout(function () { return _this.onPlayButtonClicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	        };
	        _this.onPlayButtonClicked = function (event) {
	            Logger_1.Logger.log(_this, "Scene_01_IntroView  onPlayButtonClicked");
	            Model_1.Model.getInstance().gameMode = Model_1.Model.MODE_STORY;
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(Model_1.Model.MUSIC_ROSA_HYGGE, 1000, Model_1.Model.VOLUME_MUSIC);
	            _this.playOutroNext();
	        };
	        _this.onFreeButtonClicked = function (event) {
	            Logger_1.Logger.log(_this, "Scene_01_IntroView  onFreeButtonClicked");
	            Model_1.Model.getInstance().gameMode = Model_1.Model.MODE_FREE;
	            _this.playOutroJump();
	        };
	        _this.proceed = function (event) {
	            Logger_1.Logger.log(_this, "Scene_01_IntroView  proceed");
	            _this.introScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.NEXT, sceneEvent);
	        };
	        _this.jumpToPhotos = function (event) {
	            _this.introScene.armature.removeEventListener(dragonBones.EventObject.COMPLETE, _this.jumpToPhotos, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.JUMP, Model_1.Model.SCENE_PRESENT_CLUES, true);
	        };
	        return _this;
	    }
	    Scene_01_IntroView.prototype.setup = function (typeddb) {
	        var _this = this;
	        Logger_1.Logger.log(this, "Scene_01_IntroView  setup  typeddb == " + typeddb);
	        Model_1.Model.getInstance().reset();
	        this._typeddb = typeddb;
	        this.background = PIXI.Sprite.fromFrame(Backgrounds_1.Backgrounds.SCENE0_BG);
	        AssetLoader_1.AssetLoader.getInstance().stage.addChild(this.background);
	        this.introScene = this._typeddb.buildScene0_introArmature();
	        this.introScene.display.x = 0;
	        this.introScene.display.y = 0;
	        this.introScene.display.visible = false;
	        this.introScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        setTimeout(function () { return _this.gotoIntro(); }, 1000);
	        Logger_1.Logger.log(this, "Scene_01_IntroView  setup  this.introScene == " + this.introScene);
	        this.playButton = new StartButtonButton_1.StartButtonButton(this.introScene.getPlayButton().armature);
	        this.freeButton = new FreeModeButtonButton_1.FreeModeButtonButton(this.introScene.getFreeMode().armature);
	        this.playButton.on(ButtonEvent_1.ButtonEvent.CLICKED, this.onPlayButtonClicked);
	        this.freeButton.on(ButtonEvent_1.ButtonEvent.CLICKED, this.onFreeButtonClicked);
	        this.playButton.interactive = true;
	        Logger_1.Logger.log(this, "Scene_01_IntroView  setup  this.playButton == " + this.playButton);
	        AudioPlayer_1.AudioPlayer.getInstance().playSound(Model_1.Model.MUSIC_ROSA_HYGGE, 1000, Model_1.Model.VOLUME_MUSIC);
	    };
	    Scene_01_IntroView.prototype.teardown = function () {
	        Logger_1.Logger.log(this, "Scene_01_IntroView  teardown");
	        if (this.playButton) {
	            this.playButton.off(ButtonEvent_1.ButtonEvent.CLICKED, this.onPlayButtonClicked);
	        }
	        if (this.freeButton) {
	            this.freeButton.off(ButtonEvent_1.ButtonEvent.CLICKED, this.onFreeButtonClicked);
	        }
	        this.introScene.remove(this.introScene.proxyDisplay);
	        AssetLoader_1.AssetLoader.getInstance().stage.removeChild(this.background);
	    };
	    Scene_01_IntroView.prototype.playOutroNext = function () {
	        Logger_1.Logger.log(this, "Scene_01_IntroView  playOutroNext");
	        this.introScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.proceed, this);
	        this.introScene.gotoOuttro();
	    };
	    Scene_01_IntroView.prototype.playOutroJump = function () {
	        this.introScene.armature.addEventListener(dragonBones.EventObject.COMPLETE, this.jumpToPhotos, this);
	        this.introScene.gotoOuttro();
	    };
	    return Scene_01_IntroView;
	}(SceneBase_1.SceneBase));
	exports.Scene_01_IntroView = Scene_01_IntroView;


/***/ },
/* 197 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SceneBase = (function (_super) {
	    __extends(SceneBase, _super);
	    function SceneBase() {
	        var _this = _super.call(this) || this;
	        _this.interactive = true;
	        return _this;
	    }
	    SceneBase.prototype.setup = function (typed) {
	    };
	    SceneBase.prototype.teardown = function () {
	    };
	    SceneBase.prototype.isIntersecting = function (r1, r2) {
	        return !(r2.x > (r1.x + r1.width) || (r2.x + r2.width) < r1.x || r2.y > (r1.y + r1.height) || (r2.y + r2.height) < r1.y);
	    };
	    return SceneBase;
	}(PIXI.Sprite));
	exports.SceneBase = SceneBase;


/***/ },
/* 198 */
/***/ function(module, exports) {

	"use strict";
	var Backgrounds = (function () {
	    function Backgrounds() {
	    }
	    return Backgrounds;
	}());
	Backgrounds.HANDMIXER = "handMixer";
	Backgrounds.SCENE0_BG = "Scene0_bg";
	Backgrounds.SCENE1_BG = "Scene1_bg";
	Backgrounds.SCENE3_BAMSE_BG = "Scene3_bamse_bg";
	Backgrounds.SCENE3_CHRISTIAN_BG = "Scene3_christian_bg";
	Backgrounds.SCENE3_MILLE_BG = "Scene3_mille_bg";
	Backgrounds.SCENE3_SKAEG_BG = "Scene3_skaeg_bg";
	Backgrounds.SCENE4_BAMSE_BG = "Scene4_bamse_bg";
	Backgrounds.SCENE4_CHRISTIAN_BG = "Scene4_christian_bg";
	Backgrounds.SCENE4_MILLE_BG = "Scene4_mille_bg";
	Backgrounds.SCENE4_SKAEG_BG = "Scene4_skaeg_bg";
	Backgrounds.SCENE8_BG = "Scene8_bg";
	Backgrounds.SCENE9A_CUTOUT = "Scene9a_cutOut";
	Backgrounds.SCENE9_BG = "Scene9_bg";
	exports.Backgrounds = Backgrounds;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundNames_1 = __webpack_require__(164);
	var AudioPlayer_1 = __webpack_require__(163);
	var SceneBase_1 = __webpack_require__(197);
	var AssetLoader_1 = __webpack_require__(3);
	var ButtonEvent_1 = __webpack_require__(165);
	var SceneEvent_1 = __webpack_require__(195);
	var CharCardFrame0Button_1 = __webpack_require__(171);
	var CharCardFrame1Button_1 = __webpack_require__(172);
	var CharCardFrame2Button_1 = __webpack_require__(173);
	var Backgrounds_1 = __webpack_require__(198);
	var Model_1 = __webpack_require__(5);
	var MainView_1 = __webpack_require__(194);
	var Logger_1 = __webpack_require__(4);
	var Scene_02_PickCharView = (function (_super) {
	    __extends(Scene_02_PickCharView, _super);
	    function Scene_02_PickCharView() {
	        var _this = _super.call(this) || this;
	        _this.charFrameButton0Clicked = function (event) {
	            Logger_1.Logger.log(_this, "charFrameButton0Clicked");
	            _this.removeButtonListeners();
	            Model_1.Model.getInstance().selectedChar = 0;
	            _this.loadCharacterBackgrounds();
	        };
	        _this.charFrameButton1Clicked = function (event) {
	            Logger_1.Logger.log(_this, "charFrameButton1Clicked");
	            _this.removeButtonListeners();
	            Model_1.Model.getInstance().selectedChar = 1;
	            _this.loadCharacterBackgrounds();
	        };
	        _this.charFrameButton2Clicked = function (event) {
	            Logger_1.Logger.log(_this, "charFrameButton2Clicked");
	            _this.removeButtonListeners();
	            Model_1.Model.getInstance().selectedChar = 2;
	            _this.loadCharacterBackgrounds();
	        };
	        _this.charFrameButton3Clicked = function (event) {
	            Logger_1.Logger.log(_this, "charFrameButton3Clicked");
	            _this.removeButtonListeners();
	            Model_1.Model.getInstance().selectedChar = 3;
	            _this.loadCharacterBackgrounds();
	        };
	        _this.playOutro = function () {
	            Logger_1.Logger.log(_this, "playOutro");
	            _this.pickcharScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            _this.pickcharScene.gotoOuttro();
	        };
	        _this.proceed = function (event) {
	            Logger_1.Logger.log(_this, "Scene_02_PickCharView  proceed");
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            Model_1.Model.getInstance().usedDisguises[0] = false;
	            Model_1.Model.getInstance().usedDisguises[1] = false;
	            Model_1.Model.getInstance().usedDisguises[2] = false;
	            Model_1.Model.getInstance().usedDisguises[3] = false;
	            _this.pickcharScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.NEXT, sceneEvent);
	        };
	        return _this;
	    }
	    Scene_02_PickCharView.prototype.setup = function (typeddb) {
	        var _this = this;
	        this._typeddb = typeddb;
	        this.background = PIXI.Sprite.fromFrame(Backgrounds_1.Backgrounds.SCENE1_BG);
	        AssetLoader_1.AssetLoader.getInstance().stage.addChild(this.background);
	        this.pickcharScene = this._typeddb.buildScene1_pickCharArmature();
	        this.pickcharScene.display.x = 0;
	        this.pickcharScene.display.y = 0;
	        this.pickcharScene.display.visible = true;
	        this.pickcharScene.gotoIntro();
	        this.pickcharScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        setTimeout(function () { return _this.charFrameButton0Clicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	        MainView_1.MainView.rosaSpeak(SoundNames_1.SoundNames.S01_ROSA_01_HEJ_VIL_DU_VAERE, this.pickcharScene.getRosa());
	        this.charFrameButton0 = new CharCardFrame0Button_1.CharCardFrame0Button(this.pickcharScene.getCharCardFrame0().armature);
	        this.charFrameButton1 = new CharCardFrame1Button_1.CharCardFrame1Button(this.pickcharScene.getCharCardFrame1().armature);
	        this.charFrameButton2 = new CharCardFrame2Button_1.CharCardFrame2Button(this.pickcharScene.getCharCardFrame2().armature);
	        this.charFrameButton0.on(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton0Clicked);
	        this.charFrameButton1.on(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton1Clicked);
	        this.charFrameButton2.on(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton2Clicked);
	    };
	    Scene_02_PickCharView.prototype.teardown = function () {
	        this.removeButtonListeners();
	        this.charFrameButton0.dispose();
	        this.charFrameButton1.dispose();
	        this.charFrameButton2.dispose();
	        this.pickcharScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	        AssetLoader_1.AssetLoader.getInstance().stage.removeChild(this.background);
	    };
	    Scene_02_PickCharView.prototype.removeButtonListeners = function () {
	        this.charFrameButton0.off(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton0Clicked);
	        this.charFrameButton1.off(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton1Clicked);
	        this.charFrameButton2.off(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton2Clicked);
	    };
	    Scene_02_PickCharView.prototype.loadCharacterBackgrounds = function () {
	        var characterName = Model_1.Model.getInstance().getSelectedCharName();
	        Logger_1.Logger.log(this, "loadCharacterBackgrounds characterName == " + characterName);
	        Model_1.Model.getInstance().charIsSelected = true;
	        AssetLoader_1.AssetLoader.getInstance().loadAdditional(characterName, this.playOutro);
	    };
	    return Scene_02_PickCharView;
	}(SceneBase_1.SceneBase));
	exports.Scene_02_PickCharView = Scene_02_PickCharView;


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundNames_1 = __webpack_require__(164);
	var AudioPlayer_1 = __webpack_require__(163);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var SceneEvent_1 = __webpack_require__(195);
	var CharCardFrame0Button_1 = __webpack_require__(171);
	var CharCardFrame1Button_1 = __webpack_require__(172);
	var CharCardFrame2Button_1 = __webpack_require__(173);
	var Backgrounds_1 = __webpack_require__(198);
	var Model_1 = __webpack_require__(5);
	var ButtonEvent_1 = __webpack_require__(165);
	var MainView_1 = __webpack_require__(194);
	var Logger_1 = __webpack_require__(4);
	var Scene_03_PickDisguise = (function (_super) {
	    __extends(Scene_03_PickDisguise, _super);
	    function Scene_03_PickDisguise() {
	        var _this = _super.call(this) || this;
	        _this.charFrameButton0Clicked = function (event) {
	            _this.selectDisguise(0);
	        };
	        _this.charFrameButton1Clicked = function (event) {
	            _this.selectDisguise(1);
	        };
	        _this.charFrameButton2Clicked = function (event) {
	            _this.selectDisguise(2);
	        };
	        _this.playOutro = function () {
	            Logger_1.Logger.log(_this, "Scene_03)PickDisguise playOutro");
	            _this.pickDisguiseScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            _this.pickDisguiseScene.gotoOuttro();
	        };
	        _this.proceed = function (event) {
	            Logger_1.Logger.log(_this, "proceed");
	            _this.pickDisguiseScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.NEXT, sceneEvent);
	        };
	        return _this;
	    }
	    Scene_03_PickDisguise.prototype.setup = function (typeddb) {
	        var _this = this;
	        this._typeddb = typeddb;
	        this.background = PIXI.Sprite.fromFrame(Backgrounds_1.Backgrounds.SCENE1_BG);
	        AssetLoader_1.AssetLoader.getInstance().stage.addChild(this.background);
	        this.pickDisguiseScene = this._typeddb.buildScene2_pickDisquiseArmature();
	        this.pickDisguiseScene.display.x = 0;
	        this.pickDisguiseScene.display.y = 0;
	        this.pickDisguiseScene.gotoIntro();
	        this.pickDisguiseScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        switch (Model_1.Model.getInstance().selectedChar) {
	            case Model_1.Model.CHAR_CHRISTIAN:
	                this.pickDisguiseScene.getSpeechBubble().gotoChristian();
	                break;
	            case Model_1.Model.CHAR_BAMSE:
	                this.pickDisguiseScene.getSpeechBubble().gotoBamse();
	                break;
	            case Model_1.Model.CHAR_SKAEG:
	                this.pickDisguiseScene.getSpeechBubble().gotoSkaeg();
	                break;
	            case Model_1.Model.CHAR_MILLE:
	                this.pickDisguiseScene.getSpeechBubble().gotoMille();
	                break;
	        }
	        for (var i = 0; i < 3; i++) {
	            this.pickDisguiseScene["getCharCardFrame" + i]().getDisquise().gotoIdle();
	        }
	        Logger_1.Logger.log(this, "Model.getInstance().usedDisguises[1] == " + Model_1.Model.getInstance().usedDisguises[1]);
	        Logger_1.Logger.log(this, "Model.getInstance().usedDisguises[2] == " + Model_1.Model.getInstance().usedDisguises[2]);
	        Logger_1.Logger.log(this, "Model.getInstance().usedDisguises[3] == " + Model_1.Model.getInstance().usedDisguises[3]);
	        if (Model_1.Model.getInstance().usedDisguises[0] == false && Model_1.Model.getInstance().usedDisguises[1] == false && Model_1.Model.getInstance().usedDisguises[2] == false && Model_1.Model.getInstance().usedDisguises[3] == false) {
	            MainView_1.MainView.rosaSpeak(SoundNames_1.SoundNames.S02_ROSA_01_OK_NU_GAELDER_DET_OM, this.pickDisguiseScene.getRosa());
	        }
	        else {
	            MainView_1.MainView.rosaSpeak(SoundNames_1.SoundNames.S03_ROSA_05_OEV_VI_MAA_PROEVE_IGEN, this.pickDisguiseScene.getRosa());
	        }
	        this.disguiseFrameButton0 = new CharCardFrame0Button_1.CharCardFrame0Button(this.pickDisguiseScene.getCharCardFrame0().armature);
	        this.disguiseFrameButton1 = new CharCardFrame1Button_1.CharCardFrame1Button(this.pickDisguiseScene.getCharCardFrame1().armature);
	        this.disguiseFrameButton2 = new CharCardFrame2Button_1.CharCardFrame2Button(this.pickDisguiseScene.getCharCardFrame2().armature);
	        this.buttons = [];
	        this.buttons.push(this.disguiseFrameButton0);
	        this.buttons.push(this.disguiseFrameButton1);
	        this.buttons.push(this.disguiseFrameButton2);
	        this.updateButtonsFromModel();
	        this.disguiseFrameButton0.on(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton0Clicked);
	        this.disguiseFrameButton1.on(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton1Clicked);
	        this.disguiseFrameButton2.on(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton2Clicked);
	        setTimeout(function () { return _this.charFrameButton2Clicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	    };
	    Scene_03_PickDisguise.prototype.teardown = function () {
	        Logger_1.Logger.log(this, "Scene_03_PickDisguise teardown");
	        this.buttons = null;
	        this.disguiseFrameButton0.off(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton0Clicked);
	        this.disguiseFrameButton1.off(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton1Clicked);
	        this.disguiseFrameButton2.off(ButtonEvent_1.ButtonEvent.CLICKED, this.charFrameButton2Clicked);
	        this.disguiseFrameButton0.dispose();
	        this.disguiseFrameButton1.dispose();
	        this.disguiseFrameButton2.dispose();
	        this.pickDisguiseScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	        AssetLoader_1.AssetLoader.getInstance().stage.removeChild(this.background);
	    };
	    Scene_03_PickDisguise.prototype.selectDisguise = function (index) {
	        Model_1.Model.getInstance().selectedDisguise = index;
	        Model_1.Model.getInstance().usedDisguises[index] = true;
	        AudioPlayer_1.AudioPlayer.getInstance().playSound(Model_1.Model.MUSIC_ROSA_HYGGE, 3000, Model_1.Model.VOLUME_MUSIC);
	        TweenLite.delayedCall(1, this.playOutro);
	    };
	    Scene_03_PickDisguise.prototype.updateButtonsFromModel = function () {
	        for (var i = 0; i < this.buttons.length; i++) {
	            if (Model_1.Model.getInstance().usedDisguises[i] == true) {
	                this.buttons[i].disabled = true;
	            }
	        }
	    };
	    return Scene_03_PickDisguise;
	}(SceneBase_1.SceneBase));
	exports.Scene_03_PickDisguise = Scene_03_PickDisguise;


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundNames_1 = __webpack_require__(164);
	var AudioPlayer_1 = __webpack_require__(163);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var SceneEvent_1 = __webpack_require__(195);
	var Model_1 = __webpack_require__(5);
	var ButtonEvent_1 = __webpack_require__(165);
	var TouchPhase_1 = __webpack_require__(166);
	var TouchEvent_1 = __webpack_require__(202);
	var MainView_1 = __webpack_require__(194);
	var Logger_1 = __webpack_require__(4);
	var Scene_04_SneakGameView = (function (_super) {
	    __extends(Scene_04_SneakGameView, _super);
	    function Scene_04_SneakGameView() {
	        var _this = _super.call(this) || this;
	        _this.onStartButtonClicked = function (event) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            var musicName = (Model_1.Model.getInstance().selectedChar == Model_1.Model.CHAR_CHRISTIAN) ? Model_1.Model.MUSIC_ROSA_SPION_URBAN : Model_1.Model.MUSIC_ROSA_SPION_NATURE;
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(musicName);
	            TweenLite.delayedCall(5, _this.playTomgangSound);
	            _this.startButton.display.visible = false;
	            _this.startButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, _this.onStartButtonClicked);
	            _this.touchGuide.display.visible = true;
	            _this.touchGuide.gotoLoop();
	            _this.addListener("ENTER_FRAME", _this.onEnterFrame);
	            _this.addListener(TouchEvent_1.TouchEvent.TOUCH, _this.onTouch);
	            setTimeout(function () { return _this.playOutroProceed(); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	        };
	        _this.onEnterFrame = function (event) {
	            var matrix;
	            var movementValue = _this._charMovementSpeed / Scene_04_SneakGameView.MOVEMENT_ALERT_LIMIT;
	            var value = Math.min(movementValue, 1);
	            var ib = _this.progressMeter.getBAR().display.getChildAt(0);
	            if (value > 0.8) {
	            }
	            else {
	            }
	            if (_this.matrixCopy == null) {
	                _this.matrixCopy = matrix.clone();
	            }
	            matrix = _this.matrixCopy.clone();
	            matrix.scale(value, value);
	            if (_this._movementSpeed > 0) {
	                _this._movementSpeed -= Scene_04_SneakGameView.MOVEMENT_PER_FRAME_DECAY;
	            }
	            if (_this._movementSpeed == 0) {
	                _this.disquise.armature.animation.timeScale = 1;
	                _this.disquise.gotoIdle();
	            }
	            else {
	                _this.disquise.armature.animation.timeScale = _this._charMovementSpeed / (Scene_04_SneakGameView.TIMESCALE_FACTOR * Scene_04_SneakGameView.FACTOR);
	            }
	            _this._charMovementSpeed += (_this._movementSpeed - _this._charMovementSpeed) * Scene_04_SneakGameView.EASING_FACTOR;
	            if (_this._charMovementSpeed > Scene_04_SneakGameView.MOVEMENT_ALERT_LIMIT) {
	                if (Model_1.Model.getInstance().doesSelectedDisguiseMatchCharacter()) {
	                    _this.characterTurnsAroundAndBack();
	                }
	                else {
	                    _this.characterTurnsAround();
	                }
	            }
	            if (_this.disquise.armature.animation.lastAnimationName == "walk") {
	                _this.disquise.display.x += (_this._charMovementSpeed / (Scene_04_SneakGameView.MOVEMENT_FACTOR * Scene_04_SneakGameView.FACTOR));
	            }
	            _this.onTweenUpdate();
	        };
	        _this.characterTurnsAroundAndBack = function () {
	            _this.spotted();
	            TweenLite.delayedCall(7, _this.characterTurnsBack);
	        };
	        _this.characterTurnsBack = function () {
	            _this._characterIsWatching = false;
	            AudioPlayer_1.AudioPlayer.getInstance().fadeAllTo(Scene_04_SneakGameView.MUSIC_VOLUME, 1000);
	            TweenLite.killDelayedCallsTo(_this.playTomgangSound);
	            TweenLite.delayedCall(3, _this.playTomgangSound);
	            _this._sneakScene["getCharacter"]().gotoIdle();
	            _this.progressMeter.gotoStatic();
	        };
	        _this.spotted = function () {
	            _this._movementSpeed = 0;
	            _this._characterIsWatching = true;
	            TweenLite.killDelayedCallsTo(_this.playTomgangSound);
	            AudioPlayer_1.AudioPlayer.getInstance().fadeAllTo(0.02, 10);
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.SPOTTED);
	            TweenLite.delayedCall(1, _this.playHovSound);
	            _this.disquise.gotoSit();
	            _this._sneakScene["getCharacter"]().gotoSpottet();
	            _this.progressMeter.gotoBusted();
	        };
	        _this.playTomgangSound = function () {
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            Logger_1.Logger.log(_this, "playTomgang");
	            switch (Model_1.Model.getInstance().selectedChar) {
	                case Model_1.Model.CHAR_CHRISTIAN:
	                    _this.prebenTalk();
	                    AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_KRISTIAN_SPEAKS_IDLE1, SoundNames_1.SoundNames.S03_KRISTIAN_SPEAKS_IDLE2, SoundNames_1.SoundNames.S03_KRISTIAN_SPEAKS_IDLE3]);
	                    break;
	                case Model_1.Model.CHAR_BAMSE:
	                    AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_BAMSE_SPEAKS_INTRO_BITE00_MOLODI, SoundNames_1.SoundNames.S03_BAMSE_SPEAKS_INTRO_BITE01_JODLELOHOOHOO, SoundNames_1.SoundNames.S03_BAMSE_SPEAKS_INTRO_BITE02_JODLESANGEN, SoundNames_1.SoundNames.S03_BAMSE_SPEAKS_INTRO_BITE04_BUMMELUMMELUM, SoundNames_1.SoundNames.S03_BAMSE_SPEAKS_INTRO_BITE05_SULTEN]);
	                    break;
	                case Model_1.Model.CHAR_SKAEG:
	                    AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_SKAEG_SPEAKS_EN_TO_OG_DER_ER_TRE, SoundNames_1.SoundNames.S03_SKAEG_SPEAKS_FIRE_OG_FEM_OG_SEKS_ER_DEROVRE, SoundNames_1.SoundNames.S03_SKAEG_SPEAKS_HVOR_POKKER_ER_SYV]);
	                    break;
	                case Model_1.Model.CHAR_MILLE:
	                    AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_MILLE_SPEAKS_HVORFOR_VIRKER_KAMERAET_NU_IKKE, SoundNames_1.SoundNames.S03_MILLE_SPEAKS_PAS_PAA_FUGLEN_NOEDLANDER, SoundNames_1.SoundNames.S03_MILLE_SPEAKS_GRIBE_HIMSTERGIMSFUGLEN]);
	                    break;
	            }
	        };
	        _this.playHovSound = function () {
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            if (Model_1.Model.getInstance().doesSelectedDisguiseMatchCharacter()) {
	                switch (Model_1.Model.getInstance().selectedChar) {
	                    case Model_1.Model.CHAR_CHRISTIAN:
	                        _this.prebenIdle();
	                        _this.kristianTalk();
	                        AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_KRISTIAN_SPEAKS_HOERTE_DU_DET, SoundNames_1.SoundNames.S03_KRISTIAN_SPEAKS_HOV_HVAD_VAR_DET, SoundNames_1.SoundNames.S03_KRISTIAN_SPEAKS_SIKKE_EN_UNDERLIG_LYD]);
	                        break;
	                    case Model_1.Model.CHAR_BAMSE:
	                        AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_BAMSE_SPEAKS_HOV_HVAD_VAR_DET, SoundNames_1.SoundNames.S03_BAMSE_SPEAKS_HOV_HVAD_VAR_DET_2]);
	                        break;
	                    case Model_1.Model.CHAR_SKAEG:
	                        _this.skaegTalk();
	                        AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_SKAEG_SPEAKS_HMMM_MYSTISK, SoundNames_1.SoundNames.S03_SKAEG_SPEAKS_HOV_HVAD_VAR_DET, SoundNames_1.SoundNames.S03_SKAEG_SPEAKS_SIKKE_EN_UMDERLIG_LYD]);
	                        break;
	                    case Model_1.Model.CHAR_MILLE:
	                        _this.milleTalk();
	                        AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_MILLE_SPEAKS_HVAD_ER_DET_FOR_EN_UNDERLIG_LYD, SoundNames_1.SoundNames.S03_MILLE_SPEAKS_JEG_SYNES_JEG_HORTE_NOGET]);
	                        break;
	                }
	            }
	            else {
	                switch (Model_1.Model.getInstance().selectedChar) {
	                    case Model_1.Model.CHAR_CHRISTIAN:
	                        _this.kristianTalk();
	                        AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_KRISTIAN_SPEAKS_HVAD_I_ALVERDEN_IKKE_SET_FOER]);
	                        break;
	                    case Model_1.Model.CHAR_BAMSE:
	                        AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_BAMSE_SPEAKS_IKKE_SET_FOER]);
	                        break;
	                    case Model_1.Model.CHAR_SKAEG:
	                        _this.skaegTalk();
	                        AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_SKAEG_SPEAKS_HVAD_I_ALVERDEN_ER_DET]);
	                        break;
	                    case Model_1.Model.CHAR_MILLE:
	                        _this.milleTalk();
	                        AudioPlayer_1.AudioPlayer.getInstance().playRandomSound([SoundNames_1.SoundNames.S03_MILLE_SPEAKS_HVAD_I_ALVERDEN_IKKE_SET_FOER, SoundNames_1.SoundNames.S03_MILLE_SPEAKS_HVAD_VAR_DET]);
	                        break;
	                }
	            }
	        };
	        _this.kristianTalk = function () {
	            _this._sneakScene.getCharacter().getHead().gotoTalk();
	        };
	        _this.kristianIdle = function () {
	            _this._sneakScene.getCharacter().getHead().gotoIdle();
	        };
	        _this.prebenTalk = function () {
	            _this._sneakScene.getCharacter().getPreben().getHead().gotoTalk();
	        };
	        _this.prebenIdle = function () {
	            _this._sneakScene.getCharacter().getPreben().getHead().gotoIdle();
	        };
	        _this.skaegTalk = function () {
	            _this._sneakScene.getCharacter().getHead().gotoTalk();
	        };
	        _this.skaegIdle = function () {
	            _this._sneakScene.getCharacter().getHead().gotoIdle();
	        };
	        _this.milleTalk = function () {
	            _this._sneakScene.getCharacter().getHead().gotoTalk();
	        };
	        _this.milleIdle = function () {
	            _this._sneakScene.getCharacter().getHead().gotoIdle();
	        };
	        _this.onTouch = function (event) {
	            var touch = event.getTouch(_this, TouchPhase_1.TouchPhase.BEGAN);
	            if (touch) {
	                _this.touchGuide.display.visible = false;
	                if (_this._characterIsWatching) {
	                    return;
	                }
	                if (_this._movementSpeed < Scene_04_SneakGameView.MAXIMUM_MOVEMENT) {
	                    _this._movementSpeed += Scene_04_SneakGameView.MOVEMENT_PER_CLICK;
	                }
	                _this.disquise.gotoWalk();
	            }
	        };
	        _this.onTweenUpdate = function () {
	            _this._movableSprite.x = (AssetLoader_1.AssetLoader.STAGE_WIDTH / 2) - _this.disquise.display.x;
	            if (_this._movableSprite.x > 0) {
	                _this._movableSprite.x = 0;
	            }
	            if (_this._movableSprite.x < (-(_this.background.width - AssetLoader_1.AssetLoader.STAGE_WIDTH))) {
	                _this._movableSprite.x = -(_this.background.width - AssetLoader_1.AssetLoader.STAGE_WIDTH);
	            }
	            if (_this.disquise.display.x > 1750) {
	                _this.removeListener("ENTER_FRAME", _this.onEnterFrame);
	                _this.removeListener(TouchEvent_1.TouchEvent.TOUCH, _this.onTouch);
	                _this._movementSpeed = 0;
	                _this._charMovementSpeed = 0;
	                _this.disquise.gotoIdle();
	                TweenLite.to(_this.blackQuad, 2, { alpha: 1 });
	                _this.killTweens();
	                AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	                AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S04_ROSA_01_YES_VI_KLAREDE_DET);
	                TweenLite.delayedCall(4, _this.playOutroProceed);
	            }
	        };
	        _this.proceed = function (event) {
	            _this._sneakScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.NEXT, sceneEvent);
	        };
	        _this.backToCharacterPicker = function (event) {
	            _this._sneakScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.backToCharacterPicker, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.PREVIOUS, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.PREVIOUS, sceneEvent);
	        };
	        return _this;
	    }
	    Scene_04_SneakGameView.prototype.setup = function (typeddb) {
	        var _this = this;
	        Logger_1.Logger.log(this, "Scene_04_SneakGameView  setup  typeddb == " + typeddb);
	        this.alpha = 1;
	        this._typeddb = typeddb;
	        this.backgroundName = "Scene3" + "_" + Model_1.Model.getInstance().getSelectedCharName() + "_bg";
	        Logger_1.Logger.log(this, "gettting background:" + this.backgroundName);
	        this.background = PIXI.Sprite.fromFrame(this.backgroundName);
	        this._sneakScene = this.getSpyScene();
	        this._sneakScene.gotoIntro();
	        this._movableSprite = new PIXI.Sprite();
	        this._movableSprite.addChild(this.background);
	        this._sneakScene.show(this._movableSprite);
	        this.disquise = this.getDisguise();
	        this.disquise.show(this._movableSprite);
	        this.disquise.gotoSit();
	        this.disquise.display.x = 200;
	        this.disquise.display.y = 600;
	        AssetLoader_1.AssetLoader.getInstance().stage.addChild(this._movableSprite);
	        this._movementSpeed = 50;
	        this._charMovementSpeed = 50;
	        this._characterIsWatching = false;
	        this.progressMeter = this._typeddb.buildBarometerArmature();
	        this.progressMeter.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        this.progressMeter.display.x = 105;
	        this.progressMeter.display.y = 0 + 105;
	        this.progressMeter.display.rotation = Math.PI;
	        this.touchGuide = this._typeddb.buildTouchGuideArmature();
	        this.touchGuide.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        this.touchGuide.display.x = AssetLoader_1.AssetLoader.STAGE_WIDTH / 2;
	        this.touchGuide.display.y = AssetLoader_1.AssetLoader.STAGE_HEIGHT - (this.touchGuide.display.height / 2);
	        this.touchGuide.display.visible = false;
	        this.progressMeter.gotoStatic();
	        this.startButton = this._typeddb.buildStartButtonGameButton();
	        this.startButton.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        this.startButton.display.x = AssetLoader_1.AssetLoader.STAGE_WIDTH / 2;
	        this.startButton.display.y = AssetLoader_1.AssetLoader.STAGE_HEIGHT / 2;
	        this.startButton.gotoUp();
	        this.startButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onStartButtonClicked);
	        this.character = this._sneakScene["getCharacter"]();
	        this.character["gotoIdle"]();
	        AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	        AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S02_ROSA_02_NU_SKAL_VI_SNIGE_OS_FORBI);
	        setTimeout(function () { return _this.onStartButtonClicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	    };
	    Scene_04_SneakGameView.prototype.teardown = function () {
	        Logger_1.Logger.log(this, "Scene_04_SneakGameView teardown");
	        this.killTweens();
	        this.startButton.off(ButtonEvent_1.ButtonEvent.CLICKED, this.onStartButtonClicked);
	        this.removeListener("ENTER_FRAME", this.onEnterFrame);
	        this.removeListener(TouchEvent_1.TouchEvent.TOUCH, this.onTouch);
	        this.startButton.dispose();
	        this.disquise.remove(this._movableSprite);
	        this._sneakScene.remove(this._movableSprite);
	        this.progressMeter.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	        AssetLoader_1.AssetLoader.getInstance().stage.removeChild(this._movableSprite);
	        AssetLoader_1.AssetLoader.getInstance().stage.removeChild(this.background);
	        AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	    };
	    Scene_04_SneakGameView.prototype.killTweens = function () {
	        TweenLite.killDelayedCallsTo(this.playTomgangSound);
	        TweenLite.killDelayedCallsTo(this.characterTurnsBack);
	        TweenLite.killDelayedCallsTo(this.playOutroBack);
	        TweenLite.killDelayedCallsTo(this.playHovSound);
	        TweenLite.killDelayedCallsTo(this.kristianIdle);
	        TweenLite.killDelayedCallsTo(this.skaegIdle);
	        TweenLite.killDelayedCallsTo(this.prebenIdle);
	    };
	    Scene_04_SneakGameView.prototype.onClockRunsOut = function (event) {
	        if (Model_1.Model.getInstance().doesSelectedDisguiseMatchCharacter()) {
	        }
	        else {
	            this.characterTurnsAround();
	        }
	    };
	    Scene_04_SneakGameView.prototype.getDisguise = function () {
	        var proxyDisguise;
	        switch (Model_1.Model.getInstance().selectedDisguise) {
	            case Model_1.Model.CHAR_CHRISTIAN:
	                proxyDisguise = this._typeddb.buildDisquise_christianArmature();
	                break;
	            case Model_1.Model.CHAR_BAMSE:
	                proxyDisguise = this._typeddb.buildDisquise_bamseArmature();
	                break;
	            case Model_1.Model.CHAR_SKAEG:
	                proxyDisguise = this._typeddb.buildDisquise_skaegArmature();
	                break;
	            case Model_1.Model.CHAR_MILLE:
	                proxyDisguise = this._typeddb.buildDisquise_milleArmature();
	                break;
	        }
	        return proxyDisguise;
	    };
	    Scene_04_SneakGameView.prototype.getSpyScene = function () {
	        var proxyDisguise;
	        switch (Model_1.Model.getInstance().selectedChar) {
	            case Model_1.Model.CHAR_CHRISTIAN:
	                proxyDisguise = this._typeddb.buildBadGuy_christian__scene3_spySceneWalk_christianArmature();
	                break;
	            case Model_1.Model.CHAR_BAMSE:
	                proxyDisguise = this._typeddb.buildBadGuy_bamse__scene3_spySceneWalk_bamseArmature();
	                break;
	            case Model_1.Model.CHAR_SKAEG:
	                proxyDisguise = this._typeddb.buildBadGuy_skaeg__scene3_spySceneWalk_skaegArmature();
	                break;
	            case Model_1.Model.CHAR_MILLE:
	                proxyDisguise = this._typeddb.buildBadGuy_mille__scene3_spySceneWalk_milleArmature();
	                break;
	        }
	        return proxyDisguise;
	    };
	    Scene_04_SneakGameView.prototype.characterTurnsAround = function () {
	        this.spotted();
	    };
	    Scene_04_SneakGameView.prototype.playOutroProceed = function () {
	        Logger_1.Logger.log(this, "playOutroProceed");
	        this._sneakScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.proceed, this);
	        this._sneakScene.gotoOuttro();
	    };
	    Scene_04_SneakGameView.prototype.playOutroBack = function () {
	        AudioPlayer_1.AudioPlayer.getInstance().fadeAllTo(Scene_04_SneakGameView.MUSIC_VOLUME, 1000);
	        this._sneakScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.proceed, this);
	        this._sneakScene.gotoOuttro();
	    };
	    return Scene_04_SneakGameView;
	}(SceneBase_1.SceneBase));
	Scene_04_SneakGameView.MOVEMENT_PER_FRAME_DECAY = 0.5;
	Scene_04_SneakGameView.MOVEMENT_ALERT_LIMIT = 80;
	Scene_04_SneakGameView.MOVEMENT_PER_CLICK = 10;
	Scene_04_SneakGameView.MAXIMUM_MOVEMENT = 100;
	Scene_04_SneakGameView.TIMESCALE_FACTOR = 200;
	Scene_04_SneakGameView.MOVEMENT_FACTOR = 110;
	Scene_04_SneakGameView.FACTOR = 0.25;
	Scene_04_SneakGameView.EASING_FACTOR = 0.5;
	Scene_04_SneakGameView.MUSIC_VOLUME = 0.4;
	exports.Scene_04_SneakGameView = Scene_04_SneakGameView;


/***/ },
/* 202 */
/***/ function(module, exports) {

	"use strict";
	var TouchEvent = (function () {
	    function TouchEvent() {
	    }
	    TouchEvent.prototype.getTouch = function (display, touchPhase) {
	        if (touchPhase === void 0) { touchPhase = "touchphase"; }
	        var displayReturn;
	        return displayReturn;
	    };
	    return TouchEvent;
	}());
	exports.TouchEvent = TouchEvent;


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundNames_1 = __webpack_require__(164);
	var AudioPlayer_1 = __webpack_require__(163);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var SceneEvent_1 = __webpack_require__(195);
	var ButtonEvent_1 = __webpack_require__(165);
	var Color_clueButton_1 = __webpack_require__(167);
	var Form_clueButton_1 = __webpack_require__(168);
	var Taste_clueButton_1 = __webpack_require__(169);
	var BadGuy_christian__spyGlassButton_1 = __webpack_require__(162);
	var Model_1 = __webpack_require__(5);
	var MainView_1 = __webpack_require__(194);
	var Logger_1 = __webpack_require__(4);
	var Scene_05_GatherCluesView = (function (_super) {
	    __extends(Scene_05_GatherCluesView, _super);
	    function Scene_05_GatherCluesView() {
	        var _this = _super.call(this) || this;
	        _this.touchHandler = function (event) {
	        };
	        _this.showHintNow = function (event) {
	        };
	        _this.onRedButtonClicked = function (event) {
	            TweenLite.killDelayedCallsTo(_this.mysterioHint);
	            _this._redButtonButton.disabled = true;
	            _this._formClueButton.disabled = false;
	            _this._redButtonButton.gotoDown();
	        };
	        _this.onColorClueClicked = function (event) {
	            Logger_1.Logger.log(_this, "onColorClueClicked");
	            _this.clueIsFound[0] = true;
	            _this._colorClueButton.disabled = true;
	            _this.setTextureOnPolariod("Farve");
	            _this.updateProgress();
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S04_ROSA_05_JA_FLOT_FARVE);
	        };
	        _this.onFormClueClicked = function (event) {
	            Logger_1.Logger.log(_this, "onFormClueClicked");
	            _this.clueIsFound[1] = true;
	            _this._formClueButton.disabled = true;
	            _this.setTextureOnPolariod("Form");
	            _this.updateProgress();
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S04_ROSA_03_JA_SAADAN_SE_UD);
	        };
	        _this.onTasteClueClicked = function (event) {
	            Logger_1.Logger.log(_this, "onTasteClueClicked");
	            _this.clueIsFound[2] = true;
	            _this._tasteClueButton.disabled = true;
	            _this.setTextureOnPolariod("Smag");
	            _this.updateProgress();
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S04_ROSA_06_DET_TROR_JEG_SMAG);
	        };
	        _this.shootPictureArmatureComplete = function (event) {
	            var buttonStatus = {
	                "form": _this._formClueButton.disabled,
	                "taste": _this._tasteClueButton.disabled,
	                "color": _this._colorClueButton.disabled
	            };
	            Logger_1.Logger.log(_this, "shootPictureArmatureComplete");
	            Logger_1.Logger.log(_this, "_formClueButton: " + (buttonStatus.form ? "Y" : "N"));
	            Logger_1.Logger.log(_this, "_tasteClueButton: " + (buttonStatus.taste ? "Y" : "N"));
	            Logger_1.Logger.log(_this, "_colorClueButton: " + (buttonStatus.color ? "Y" : "N"));
	            Logger_1.Logger.log(_this, "shootPictureArmatureComplete Reverting buttons to original");
	            Logger_1.Logger.log(_this, "_formClueButton: " + (buttonStatus.form ? "Y" : "N"));
	            Logger_1.Logger.log(_this, "_tasteClueButton: " + (buttonStatus.taste ? "Y" : "N"));
	            Logger_1.Logger.log(_this, "_colorClueButton: " + (buttonStatus.color ? "Y" : "N"));
	            _this._formClueButton.disabled = buttonStatus.form;
	            _this._tasteClueButton.disabled = buttonStatus.taste;
	            _this._colorClueButton.disabled = buttonStatus.color;
	        };
	        _this.proceed = function (event) {
	            _this._gatherCluesScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.NEXT, sceneEvent);
	        };
	        return _this;
	    }
	    Scene_05_GatherCluesView.prototype.setup = function (typeddb) {
	        var _this = this;
	        this._typeddb = typeddb;
	        this.backgroundName = "Scene4" + "_" + Model_1.Model.getInstance().getSelectedCharName() + "_bg";
	        Logger_1.Logger.log(this, "gettting background:" + this.backgroundName);
	        this._background = PIXI.Sprite.fromFrame(this.backgroundName);
	        AssetLoader_1.this.addChild(this._background);
	        this._gatherCluesScene = this.getInsideScene();
	        this._gatherCluesScene.gotoIntro();
	        this._gatherCluesScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        this._colorClueButton = new Color_clueButton_1.Color_clueButton(this._gatherCluesScene.getColor_clue().armature);
	        this._formClueButton = new Form_clueButton_1.Form_clueButton(this._gatherCluesScene.getForm_clue().armature);
	        this._tasteClueButton = new Taste_clueButton_1.Taste_clueButton(this._gatherCluesScene.getTaste_clue().armature);
	        this._colorClueButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onColorClueClicked);
	        this._formClueButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onFormClueClicked);
	        this._tasteClueButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onTasteClueClicked);
	        this._colorClueButton.disabled = false;
	        this._formClueButton.disabled = false;
	        this._tasteClueButton.disabled = false;
	        this.clueButtons = [];
	        this.clueButtons.push(this._colorClueButton);
	        this.clueButtons.push(this._formClueButton);
	        this.clueButtons.push(this._tasteClueButton);
	        AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	        AudioPlayer_1.AudioPlayer.getInstance().playSound(Model_1.Model.MUSIC_ROSA_SPION_INSIDE, 0, Model_1.Model.VOLUME_MUSIC);
	        var rosaSpeakDelay = 0;
	        if (Model_1.Model.getInstance().selectedChar == Model_1.Model.CHAR_CHRISTIAN) {
	            rosaSpeakDelay = 4;
	            TweenLite.delayedCall(15, this.mysterioHint);
	        }
	        TweenLite.delayedCall(20, this.showHint);
	        AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S04_ROSA_02_NU_SKAL_VI_TAGE_BILLEDER);
	        if (Model_1.Model.getInstance().selectedChar == Model_1.Model.CHAR_CHRISTIAN) {
	            var christianScene = this._gatherCluesScene;
	            this._redButtonButton = new BadGuy_christian__spyGlassButton_1.BadGuy_christian__spyGlassButton(christianScene.getSpyGlassArm().armature);
	            this._redButtonButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onRedButtonClicked);
	            this._formClueButton.disabled = true;
	        }
	        this._cluesFound = 0;
	        this.clueIsFound = [];
	        this._gatherCluesScene.getProgress().display.addListener("TOUCH", this.showHintNow);
	        this.addListener("TOUCH", this.touchHandler);
	        this._gatherCluesScene.getShootPicture().gotoDefault();
	        setTimeout(function () { return _this.playOutro(); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	    };
	    Scene_05_GatherCluesView.prototype.teardown = function () {
	        TweenLite.killDelayedCallsTo(this.mysterioHint);
	        TweenLite.killDelayedCallsTo(this.showHint);
	        this.removeListener("TOUCH", this.touchHandler);
	        this._colorClueButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onColorClueClicked);
	        this._formClueButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onFormClueClicked);
	        this._tasteClueButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onTasteClueClicked);
	        this._redButtonButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onRedButtonClicked);
	        this._gatherCluesScene.getProgress().display.removeListener("TOUCH", this.showHintNow);
	        this._colorClueButton.dispose();
	        this._formClueButton.dispose();
	        this._tasteClueButton.dispose();
	        if (this._redButtonButton) {
	            this._redButtonButton.dispose();
	        }
	        this._gatherCluesScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	        AssetLoader_1.this.removeChild(this._background);
	    };
	    Scene_05_GatherCluesView.prototype.mysterioHint = function () {
	        TweenLite.killDelayedCallsTo(this.mysterioHint);
	        AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S04_ROSA_10_MON_VI_KAN_TAENDE_FOR_MYSTERIO);
	    };
	    Scene_05_GatherCluesView.prototype.showHint = function () {
	        TweenLite.killDelayedCallsTo(this.showHint);
	        if (this._cluesFound < 3) {
	            TweenLite.delayedCall(20, this.showHint);
	        }
	        for (var i = 0; i < 3; i++) {
	            if (!this.clueIsFound[i]) {
	                var button = this.clueButtons[i];
	                if (!button.disabled) {
	                    button["gotoHint"]();
	                    break;
	                }
	            }
	        }
	    };
	    Scene_05_GatherCluesView.prototype.setTextureOnPolariod = function (id) {
	        var buttonStatus = {
	            "form": this._formClueButton.disabled,
	            "taste": this._tasteClueButton.disabled,
	            "color": this._colorClueButton.disabled
	        };
	        Logger_1.Logger.log(this, "Saving buttons state");
	        Logger_1.Logger.log(this, "_formClueButton: " + (buttonStatus.form ? "Y" : "N"));
	        Logger_1.Logger.log(this, "_tasteClueButton: " + (buttonStatus.taste ? "Y" : "N"));
	        Logger_1.Logger.log(this, "_colorClueButton: " + (buttonStatus.color ? "Y" : "N"));
	        this._formClueButton.disabled = true;
	        this._tasteClueButton.disabled = true;
	        this._colorClueButton.disabled = true;
	        var shootPicture = this._gatherCluesScene.getShootPicture();
	        var shootPictureArmature = shootPicture.armature;
	        shootPicture.gotoDefault();
	        var polaroidImage = shootPicture.getPolaoridImg();
	        polaroidImage.get_placeholder().display.addChild(PIXI.Sprite.fromFrame(this.getPolaroidContent(id)));
	        polaroidImage["goto" + id]();
	        shootPictureArmature.addEventListener(dragonBones.EventObject.COMPLETE, this.shootPictureArmatureComplete, this);
	        shootPicture.gotoAnimation();
	        Logger_1.Logger.log(this, "setTextureOnPolaroid", id, "goto" + id);
	    };
	    Scene_05_GatherCluesView.prototype.getPolaroidContent = function (type) {
	        var atlasName = "texture-" + Model_1.Model.getInstance().getSelectedCharName();
	        var textureName = "badGuy_" + Model_1.Model.getInstance().getSelectedCharName() + "/polaroid" + type;
	        Logger_1.Logger.log(this, "get polaroid content:" + atlasName + "/" + textureName);
	        return textureName;
	    };
	    Scene_05_GatherCluesView.prototype.getInsideScene = function () {
	        var proxyScene;
	        switch (Model_1.Model.getInstance().selectedChar) {
	            case Model_1.Model.CHAR_CHRISTIAN:
	                proxyScene = this._typeddb.buildBadGuy_christian__Scene4_InsideSpyArmature();
	                break;
	            case Model_1.Model.CHAR_BAMSE:
	                proxyScene = this._typeddb.buildBadGuy_bamse__Scene4_insideSpyArmature();
	                break;
	            case Model_1.Model.CHAR_SKAEG:
	                proxyScene = this._typeddb.buildBadGuy_skaeg__Scene4_InsideSpyArmature();
	                break;
	            case Model_1.Model.CHAR_MILLE:
	                proxyScene = this._typeddb.buildBadGuy_mille__Scene4_InsideSpyArmature();
	                break;
	        }
	        return proxyScene;
	    };
	    Scene_05_GatherCluesView.prototype.updateProgress = function () {
	        this._cluesFound++;
	        Logger_1.Logger.log(this, "_gatherCluesScene", "goto_" + this._cluesFound);
	        this._gatherCluesScene.getProgress()["goto_" + this._cluesFound]();
	        if (this._cluesFound == 3) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S04_ROSA_08_GODT_KLARET_LAD_OS_KOMME_TILBAGE);
	            TweenLite.delayedCall(8, this.playOutro);
	        }
	    };
	    Scene_05_GatherCluesView.prototype.playOutro = function () {
	        this._gatherCluesScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.proceed, this);
	        this._gatherCluesScene.gotoOuttro();
	    };
	    return Scene_05_GatherCluesView;
	}(SceneBase_1.SceneBase));
	exports.Scene_05_GatherCluesView = Scene_05_GatherCluesView;


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundNames_1 = __webpack_require__(164);
	var AudioPlayer_1 = __webpack_require__(163);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var ButtonEvent_1 = __webpack_require__(165);
	var CameraShot_1 = __webpack_require__(205);
	var SceneEvent_1 = __webpack_require__(195);
	var NextArrowButton_1 = __webpack_require__(188);
	var Model_1 = __webpack_require__(5);
	var MainView_1 = __webpack_require__(194);
	var Logger_1 = __webpack_require__(4);
	var TouchPhase_1 = __webpack_require__(166);
	var TouchEvent_1 = __webpack_require__(202);
	var Scene_06_PresentCluesView = (function (_super) {
	    __extends(Scene_06_PresentCluesView, _super);
	    function Scene_06_PresentCluesView() {
	        var _this = _super.call(this) || this;
	        _this._numberOfPhotosTaken = 0;
	        _this.onNextButtonClicked = function (event) {
	            Logger_1.Logger.log(_this, "onNextButtonClicked");
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            var sceneEvent;
	            if (Model_1.Model.getInstance().gameMode == Model_1.Model.MODE_STORY) {
	                _this.playOutroNext();
	            }
	            else {
	                _this.playOutroJump();
	            }
	        };
	        _this.handleSnap0Touched = function (event) {
	            _this.handleSnapTouched(event, 0);
	        };
	        _this.handleSnap1Touched = function (event) {
	            _this.handleSnapTouched(event, 1);
	        };
	        _this.handleSnap2Touched = function (event) {
	            _this.handleSnapTouched(event, 2);
	        };
	        _this.handleSnapTouched = function (event, index) {
	            _this._index = index;
	            var touch = event.getTouch(event.target, TouchPhase_1.TouchPhase.ENDED);
	            if (touch) {
	                _this.cameraShot = new CameraShot_1.CameraShot();
	                _this.cameraShot.addListener("COMPLETE", _this.onImageReady);
	                _this.cameraShot.takeShot();
	            }
	        };
	        _this.onImageReady = function (event) {
	            _this.cameraShot.removeListener("COMPLETE", _this.onImageReady);
	            var snapImage = _this.cameraShot.lastSnapshotThumbnail;
	            Model_1.Model.getInstance().snapShots[_this._index] = snapImage;
	            var snap = new PIXI.Sprite();
	            snap.addChild(snapImage);
	            _this._presentCluesScene["getPolaorid" + _this._index]().get_placeholder().display = snap;
	            _this._numberOfPhotosTaken++;
	            if (_this._numberOfPhotosTaken >= 3) {
	                _this.proceedButton.display.visible = true;
	            }
	        };
	        _this.proceed = function (event) {
	            _this._presentCluesScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.NEXT, sceneEvent);
	        };
	        _this.jumpToMixing = function (event) {
	            _this._presentCluesScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.jumpToMixing, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.JUMP, Model_1.Model.SCENE_MIXING, true);
	            _this.emit(SceneEvent_1.SceneEvent.JUMP, sceneEvent);
	        };
	        return _this;
	    }
	    Scene_06_PresentCluesView.prototype.setup = function (typeddb) {
	        this._typeddb = typeddb;
	        Model_1.Model.getInstance().resetSnapshots();
	        this._brownBackgroundQuad = new PIXI.Graphics();
	        this._brownBackgroundQuad.drawRect(0, 0, AssetLoader_1.AssetLoader.STAGE_WIDTH, AssetLoader_1.AssetLoader.STAGE_HEIGHT);
	        this._brownBackgroundQuad.beginFill(0x49301D);
	        AssetLoader_1.AssetLoader.getInstance().stage.addChild(this._brownBackgroundQuad);
	        this._pinkBackgroundQuad = new PIXI.Graphics();
	        this._pinkBackgroundQuad.drawRect(0, 0, 1028, 768);
	        this._pinkBackgroundQuad.beginFill(0xC02E31);
	        this._pinkBackgroundQuad.x = 168;
	        AssetLoader_1.AssetLoader.getInstance().stage.addChild(this._pinkBackgroundQuad);
	        this._presentCluesScene = this._typeddb.buildScene5_picturesArmature();
	        this._presentCluesScene.display.x = 0;
	        this._presentCluesScene.display.y = 0;
	        this._presentCluesScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        this._presentCluesScene.getPolaorid0().gotoSmag();
	        this._presentCluesScene.getPolaorid1().gotoForm();
	        this._presentCluesScene.getPolaorid2().gotoFarve();
	        if (Model_1.Model.getInstance().gameMode == Model_1.Model.MODE_STORY) {
	            this.setPolaroidImages();
	        }
	        else {
	            this.setPolaroidImagesSnapshots();
	            this._presentCluesScene.getPolaorid0().display.addListener(TouchEvent_1.TouchEvent.TOUCH, this.handleSnap0Touched);
	            this._presentCluesScene.getPolaorid1().display.addListener(TouchEvent_1.TouchEvent.TOUCH, this.handleSnap1Touched);
	            this._presentCluesScene.getPolaorid2().display.addListener(TouchEvent_1.TouchEvent.TOUCH, this.handleSnap2Touched);
	        }
	        AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	        AudioPlayer_1.AudioPlayer.getInstance().playSound(Model_1.Model.MUSIC_ROSA_HYGGE, 0, Model_1.Model.VOLUME_MUSIC);
	        if (Model_1.Model.getInstance().gameMode == Model_1.Model.MODE_FREE) {
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.FREEMODE_ROSA);
	        }
	        else {
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S05_ROSA_01_OK_KAGESPION);
	        }
	        this.proceedButton = new NextArrowButton_1.NextArrowButton(this._presentCluesScene.getNextButton().armature);
	        this.proceedButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onNextButtonClicked);
	        this._numberOfPhotosTaken = 0;
	        this._presentCluesScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.afterIntro, this);
	        this._presentCluesScene.gotoIntro();
	        Logger_1.Logger.log(this, "setup");
	    };
	    Scene_06_PresentCluesView.prototype.afterIntro = function (event) {
	        var _this = this;
	        Logger_1.Logger.log(this, "afterIntro");
	        this._presentCluesScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, this.afterIntro, this);
	        if (Model_1.Model.getInstance().gameMode == Model_1.Model.MODE_FREE) {
	            this._presentCluesScene.gotoHint();
	        }
	        setTimeout(function () { return _this.onNextButtonClicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	    };
	    Scene_06_PresentCluesView.prototype.teardown = function () {
	        if (Model_1.Model.getInstance().gameMode == Model_1.Model.MODE_FREE) {
	            this._presentCluesScene.getPolaorid0().display.removeListener(TouchEvent_1.TouchEvent.TOUCH, this.handleSnap0Touched);
	            this._presentCluesScene.getPolaorid1().display.removeListener(TouchEvent_1.TouchEvent.TOUCH, this.handleSnap1Touched);
	            this._presentCluesScene.getPolaorid2().display.removeListener(TouchEvent_1.TouchEvent.TOUCH, this.handleSnap2Touched);
	        }
	        this._presentCluesScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	    };
	    Scene_06_PresentCluesView.prototype.setPolaroidImagesSnapshots = function () {
	        var model = Model_1.Model.getInstance();
	        var smag = new PIXI.Sprite();
	        smag.addChild(model.snapShots[0]);
	        this._presentCluesScene.getPolaorid0().get_placeholder().display = smag;
	        var form = new PIXI.Sprite();
	        form.addChild(model.snapShots[1]);
	        this._presentCluesScene.getPolaorid1().get_placeholder().display = form;
	        var farve = new PIXI.Sprite();
	        farve.addChild(model.snapShots[2]);
	        this._presentCluesScene.getPolaorid2().get_placeholder().display = farve;
	    };
	    Scene_06_PresentCluesView.prototype.setPolaroidImages = function () {
	        var smag = new PIXI.Sprite();
	        var smagImage = PIXI.Sprite.fromFrame(this.getPolaroidContent("Smag"));
	        smag.addChild(smagImage);
	        this._presentCluesScene.getPolaorid0().get_placeholder().display = smag;
	        var form = new PIXI.Sprite();
	        var formImage = PIXI.Sprite.fromFrame(this.getPolaroidContent("Form"));
	        form.addChild(formImage);
	        this._presentCluesScene.getPolaorid1().get_placeholder().display = form;
	        var farve = new PIXI.Sprite();
	        var farveImage = PIXI.Sprite.fromFrame(this.getPolaroidContent("Farve"));
	        farve.addChild(farveImage);
	        this._presentCluesScene.getPolaorid2().get_placeholder().display = farve;
	    };
	    Scene_06_PresentCluesView.prototype.getPolaroidContent = function (type) {
	        var atlasName = "texture-" + Model_1.Model.getInstance().getSelectedCharName();
	        var textureName = "badGuy_" + Model_1.Model.getInstance().getSelectedCharName() + "/polaroid" + type;
	        Logger_1.Logger.log(this, "get polaroid content:  atlasName == " + atlasName);
	        Logger_1.Logger.log(this, "get polaroid content:  textureName== " + textureName);
	        return textureName;
	    };
	    Scene_06_PresentCluesView.prototype.playOutroNext = function () {
	        this._presentCluesScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.proceed, this);
	        this._presentCluesScene.gotoOuttro();
	    };
	    Scene_06_PresentCluesView.prototype.playOutroJump = function () {
	        this._presentCluesScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.jumpToMixing, this);
	        this._presentCluesScene.gotoOuttro();
	    };
	    return Scene_06_PresentCluesView;
	}(SceneBase_1.SceneBase));
	exports.Scene_06_PresentCluesView = Scene_06_PresentCluesView;


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Logger_1 = __webpack_require__(4);
	var CameraShot = (function (_super) {
	    __extends(CameraShot, _super);
	    function CameraShot() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.someTime = 0;
	        return _this;
	    }
	    CameraShot.prototype.takeShot = function () {
	        this.openCamera();
	    };
	    CameraShot.prototype.openCamera = function () {
	    };
	    CameraShot.prototype.openRoll = function () {
	    };
	    CameraShot.prototype.errorHandler = function (event) {
	    };
	    CameraShot.prototype.cancelled = function (event) {
	    };
	    CameraShot.prototype.onSelected = function (event) {
	    };
	    CameraShot.prototype.onProgressAsync = function (e) {
	    };
	    CameraShot.prototype.cameraError = function (error) {
	        Logger_1.Logger.log(this, "Error:" + error);
	    };
	    CameraShot.prototype.asyncImageLoaded = function (event) {
	        Logger_1.Logger.log(this, "CameraUI imagePromise DONE loading");
	    };
	    CameraShot.prototype.createThumbnail = function (sourceBMD, width, height, cropToCircle, center) {
	        var thumbNail;
	        return thumbNail;
	    };
	    CameraShot.prototype.rotateBitmapData = function (bitmapData, degree) {
	        if (degree === void 0) { degree = 0; }
	        var newBitmap;
	        return newBitmap;
	    };
	    CameraShot.prototype.traceTime = function (str) {
	        Logger_1.Logger.log(this, str + " timer: " + Number(Date.now() - this.someTime));
	        this.someTime = Date.now();
	    };
	    return CameraShot;
	}(PIXI.utils.EventEmitter));
	exports.CameraShot = CameraShot;


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundNames_1 = __webpack_require__(164);
	var AudioPlayer_1 = __webpack_require__(163);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var ButtonEvent_1 = __webpack_require__(165);
	var DragManager_1 = __webpack_require__(207);
	var SceneEvent_1 = __webpack_require__(195);
	var Ingredience_milkProxy_1 = __webpack_require__(110);
	var Ingredience_sugarProxy_1 = __webpack_require__(109);
	var Ingredience_cacaoProxy_1 = __webpack_require__(113);
	var Ingredience_flourProxy_1 = __webpack_require__(111);
	var Ingredience_oilProxy_1 = __webpack_require__(112);
	var Ingredience_yeastProxy_1 = __webpack_require__(106);
	var NextArrowButton_1 = __webpack_require__(188);
	var TouchEvent_1 = __webpack_require__(202);
	var Backgrounds_1 = __webpack_require__(198);
	var MainView_1 = __webpack_require__(194);
	var Logger_1 = __webpack_require__(4);
	var Scene_07_BasicIngredientsView = (function (_super) {
	    __extends(Scene_07_BasicIngredientsView, _super);
	    function Scene_07_BasicIngredientsView() {
	        var _this = _super.call(this) || this;
	        _this._draggedItems = 0;
	        _this.touchHandler = function (event) {
	        };
	        _this.nextButtonClicked = function (event) {
	            _this.playOutro();
	        };
	        _this.proceed = function (event) {
	            _this._basicIngScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.NEXT, sceneEvent);
	        };
	        return _this;
	    }
	    Scene_07_BasicIngredientsView.prototype.setup = function (typeddb) {
	        var _this = this;
	        Logger_1.Logger.log(this, "Scene_07_BasicIngredientsView setup");
	        this._draggedItems = 0;
	        this._typeddb = typeddb;
	        this._background = PIXI.Sprite.fromFrame(Backgrounds_1.Backgrounds.SCENE1_BG);
	        AssetLoader_1.this.addChild(this._background);
	        this._basicIngScene = this._typeddb.buildScene6_mixDefaultsArmature();
	        this._basicIngScene.display.x = 0;
	        this._basicIngScene.display.y = 0;
	        this._basicIngScene.gotoIntro();
	        this._basicIngScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        var milk = this._basicIngScene.getIngredience_milk();
	        var sugar = this._basicIngScene.getIngredience_sugar();
	        var cacao = this._basicIngScene.getIngredience_cacao();
	        var flour = this._basicIngScene.getIngredience_flour();
	        var oil = this._basicIngScene.getIngredience_oil();
	        var yeast = this._basicIngScene.getIngredience_yeast();
	        this.nextButton = new NextArrowButton_1.NextArrowButton(this._basicIngScene.getNextArrow().armature);
	        this.nextButton.on(ButtonEvent_1.ButtonEvent.CLICKED, this.nextButtonClicked);
	        MainView_1.MainView.rosaSpeak(SoundNames_1.SoundNames.S06_ROSA_01_VI_STARTER_MED_AT_LAVE_EN_DEJ, this._basicIngScene.getRosa());
	        DragManager_1.DragManager.getInstance()._dropTarget = this._basicIngScene.getMagreteBowl().display;
	        this._basicIngScene.display.on(TouchEvent_1.TouchEvent.TOUCH, this.touchHandler);
	        setTimeout(function () { return _this.nextButtonClicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	    };
	    Scene_07_BasicIngredientsView.prototype.teardown = function () {
	        this.nextButton.off(ButtonEvent_1.ButtonEvent.CLICKED, this.nextButtonClicked);
	        this._basicIngScene.display.removeListener(TouchEvent_1.TouchEvent.TOUCH, this.touchHandler);
	        this._basicIngScene.display.removeListener(TouchEvent_1.TouchEvent.TOUCH, this.touchHandler);
	        this._basicIngScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	        AssetLoader_1.this.removeChild(this._background);
	    };
	    Scene_07_BasicIngredientsView.prototype.testForIntersection = function (rect, armature) {
	        var target = armature.display;
	        var targetRect = new PIXI.Rectangle(this.x, this.y, this.width, this.height);
	        return this.isIntersecting(target, targetRect);
	    };
	    Scene_07_BasicIngredientsView.prototype.playRosaTasteSound = function (armature) {
	        Logger_1.Logger.log(this, "armature instanceof Ingredience_milkProxy == " + (armature instanceof Ingredience_milkProxy_1.Ingredience_milkProxy));
	        AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	        if (armature instanceof Ingredience_milkProxy_1.Ingredience_milkProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S06_ROSA_19_SMAG_MILK, this._basicIngScene.getRosa());
	        }
	        if (armature instanceof Ingredience_sugarProxy_1.Ingredience_sugarProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S06_ROSA_20_SMAG_SUGAR, this._basicIngScene.getRosa());
	        }
	        if (armature instanceof Ingredience_cacaoProxy_1.Ingredience_cacaoProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S06_ROSA_24_SMAG_CACAO, this._basicIngScene.getRosa());
	        }
	        if (armature instanceof Ingredience_flourProxy_1.Ingredience_flourProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S07_ROSA_11_SMAG_FLOUR, this._basicIngScene.getRosa());
	        }
	        if (armature instanceof Ingredience_oilProxy_1.Ingredience_oilProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S07_ROSA_12_SMAG_OIL, this._basicIngScene.getRosa());
	        }
	        if (armature instanceof Ingredience_yeastProxy_1.Ingredience_yeastProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S07_ROSA_12_SMAG_OIL, this._basicIngScene.getRosa());
	        }
	    };
	    Scene_07_BasicIngredientsView.prototype.playOutro = function () {
	        this._basicIngScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.proceed, this);
	        this._basicIngScene.gotoOuttro();
	    };
	    return Scene_07_BasicIngredientsView;
	}(SceneBase_1.SceneBase));
	exports.Scene_07_BasicIngredientsView = Scene_07_BasicIngredientsView;


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AssetLoader_1 = __webpack_require__(3);
	var Logger_1 = __webpack_require__(4);
	var DragManager = (function (_super) {
	    __extends(DragManager, _super);
	    function DragManager() {
	        var _this = _super.call(this) || this;
	        _this._isDragging = false;
	        _this._startDragPoint = new PIXI.Point();
	        _this.stopDrag = function () {
	            Logger_1.Logger.log(_this, "stopDrag");
	            if (_this._isDragging) {
	                _this._isDragging = false;
	                _this._stage.removeListener("TOUCH", _this.onStageTouch);
	            }
	        };
	        _this.onStageTouch = function (event) {
	            Logger_1.Logger.log(_this, "onStageTouch");
	        };
	        if (!DragManager._isSingleton) {
	            throw (new Error());
	        }
	        _this.initialize();
	        return _this;
	    }
	    Object.defineProperty(DragManager.prototype, "isDragging", {
	        get: function () {
	            return this._isDragging;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DragManager.getInstance = function () {
	        if (!DragManager._instance) {
	            DragManager._isSingleton = true;
	            DragManager._instance = new DragManager();
	            DragManager._isSingleton = false;
	        }
	        return DragManager._instance;
	    };
	    DragManager.prototype.initialize = function () {
	        this._stage = AssetLoader_1.AssetLoader.getInstance().stage;
	    };
	    DragManager.prototype.startDrag = function (sprite, puzzleId) {
	        if (!this._isDragging) {
	            this._isDragging = true;
	            this._draggedObject = sprite;
	            this._draggedPuzzleId = puzzleId;
	            this._startDragPoint.x = this._draggedObject.x;
	            this._startDragPoint.y = this._draggedObject.y;
	            this._stage.addListener("TOUCH", this.onStageTouch);
	        }
	    };
	    DragManager.prototype.reset = function () {
	        this._draggedObject = null;
	    };
	    return DragManager;
	}(PIXI.utils.EventEmitter));
	DragManager._isSingleton = false;
	exports.DragManager = DragManager;


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AudioPlayer_1 = __webpack_require__(163);
	var SoundNames_1 = __webpack_require__(164);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var ButtonEvent_1 = __webpack_require__(165);
	var SceneEvent_1 = __webpack_require__(195);
	var ClearButtonButton_1 = __webpack_require__(186);
	var NextArrowButton_1 = __webpack_require__(188);
	var TouchPhase_1 = __webpack_require__(166);
	var Backgrounds_1 = __webpack_require__(198);
	var Model_1 = __webpack_require__(5);
	var MainView_1 = __webpack_require__(194);
	var Logger_1 = __webpack_require__(4);
	var Scene_080_CutCakeView = (function (_super) {
	    __extends(Scene_080_CutCakeView, _super);
	    function Scene_080_CutCakeView() {
	        var _this = _super.call(this) || this;
	        _this._draggedItems = 0;
	        _this.cuttingMovement = new PIXI.Point();
	        _this.cuttingLocation = new PIXI.Point();
	        _this.lastCuttingLocation = new PIXI.Point();
	        _this.firstCuttingLocation = new PIXI.Point();
	        _this.setupContinued = function () {
	            _this._background = PIXI.Sprite.fromFrame(Backgrounds_1.Backgrounds.SCENE9A_CUTOUT);
	            AssetLoader_1.AssetLoader.getInstance().stage.addChild(_this._background);
	            _this.cutScene = _this._typeddb.buildScene9b_cutCakeArmature();
	            _this.cutScene.display.x = 0;
	            _this.cutScene.display.y = 0;
	            _this.cutScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	            _this.cutScene.gotoIntro();
	            setTimeout(function () { return _this.nextButtonClicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	        };
	        _this.afterIntro = function (event) {
	            _this.cutScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.afterIntro, _this);
	            _this.clearButton = new ClearButtonButton_1.ClearButtonButton(_this.cutScene.getClearButton().armature);
	            _this.clearButton.on(ButtonEvent_1.ButtonEvent.CLICKED, _this.clearButtonClicked);
	            _this.nextButton = new NextArrowButton_1.NextArrowButton(_this.cutScene.getNextArrow().armature);
	            _this.nextButton.on(ButtonEvent_1.ButtonEvent.CLICKED, _this.nextButtonClicked);
	            _this.cakeDisplay = _this.cutScene.getHardCake().display;
	            _this.cutShape = _this.cutScene.getCakeCutShape().display;
	            var uppercaseCharName = Model_1.Model.getInstance().getSelectedCharName();
	            var cap = String(uppercaseCharName).substr(0, 1);
	            uppercaseCharName = String(cap).toUpperCase() + String(uppercaseCharName).slice(1);
	            if (Model_1.Model.getInstance().gameMode == Model_1.Model.MODE_STORY) {
	                _this.cutScene.getCakeCutShape()["goto" + uppercaseCharName]();
	            }
	            _this.completeCakeContainer = new PIXI.Sprite();
	            _this.completeCakeContainer.addChild(_this.cakeDisplay);
	            _this.completeCakeContainer.addChild(_this.cutShape);
	            var form = new PIXI.Sprite();
	            if (Model_1.Model.getInstance().gameMode == Model_1.Model.MODE_FREE) {
	                if (Model_1.Model.getInstance().snapShots[1] != null) {
	                    form.addChild(Model_1.Model.getInstance().snapShots[1]);
	                }
	            }
	            else {
	                var formImage = PIXI.Sprite.fromFrame(_this.getPolaroidContent("Form"));
	                form.addChild(formImage);
	            }
	            _this.cutScene.getPolaroid().get_placeholder().display = form;
	            _this.cutScene.getPolaroid().gotoForm();
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S09_ROSA_01_NU_ER_DET_TID_TIL_AT_SKAERE_KAGEN);
	            _this.initCuttingMode();
	        };
	        _this.handleCuttingTouch = function (event) {
	            var t = event.getTouch(event.currentTarget);
	            if (t) {
	                switch (t.phase) {
	                    case TouchPhase_1.TouchPhase.BEGAN:
	                        if (_this.firstCut) {
	                            _this.cuttingMask.beginFill(0x000000, 0.7);
	                            _this.cuttingMask.lineStyle(1, 0x000000, 0.7);
	                            _this.cuttingMask.drawRect(_this.cakeDisplay.x, _this.cakeDisplay.y, _this.cakeDisplay.width, _this.cakeDisplay.height);
	                            _this.cuttingMask.endFill();
	                            _this.firstCut = false;
	                        }
	                        if (_this.cuttingFinished) {
	                            _this.cuttingStarted = false;
	                            _this.cuttingFinished = false;
	                        }
	                        if (!_this.cuttingStarted) {
	                            _this.cuttingShape.beginFill(0x000000, 0);
	                            _this.cuttingShape.lineStyle(2, 0xFFFFFF, 1);
	                            _this.cuttingShape.moveTo(_this.cuttingLocation.x, _this.cuttingLocation.y);
	                            _this.cuttingMask.beginFill(0xFFFFFF, 1);
	                            _this.cuttingMask.lineStyle(1, 0xFFFFFF, 1);
	                            _this.cuttingMask.moveTo(_this.cuttingLocation.x + Scene_080_CutCakeView.OFFSET_X, _this.cuttingLocation.y + Scene_080_CutCakeView.OFFSET_Y);
	                            _this.finalMask.beginFill(0xFFFFFF, 1);
	                            _this.finalMask.lineStyle(1, 0xFFFFFF, 1);
	                            _this.finalMask.moveTo(_this.cuttingLocation.x + Scene_080_CutCakeView.OFFSET_X, _this.cuttingLocation.y + Scene_080_CutCakeView.OFFSET_Y);
	                            _this.flashCuttingMask.beginFill(0xFFFFFF, 1);
	                            _this.flashCuttingMask.lineStyle(1, 0xFFFFFF, 1);
	                            _this.flashCuttingMask.moveTo(_this.cuttingLocation.x + Scene_080_CutCakeView.OFFSET_X, _this.cuttingLocation.y + Scene_080_CutCakeView.OFFSET_Y);
	                            _this.cuttingStarted = true;
	                            Logger_1.Logger.log(_this, "set");
	                        }
	                        break;
	                    case TouchPhase_1.TouchPhase.ENDED:
	                        _this.cuttingShape.lineTo(_this.firstCuttingLocation.x, _this.firstCuttingLocation.y);
	                        _this.cuttingShape.endFill();
	                        _this.cuttingMask.lineTo(_this.firstCuttingLocation.x + Scene_080_CutCakeView.OFFSET_X, _this.firstCuttingLocation.y + Scene_080_CutCakeView.OFFSET_Y);
	                        _this.cuttingMask.endFill();
	                        _this.finalMask.lineTo(_this.firstCuttingLocation.x + Scene_080_CutCakeView.OFFSET_X, _this.firstCuttingLocation.y + Scene_080_CutCakeView.OFFSET_Y);
	                        _this.finalMask.endFill();
	                        _this.flashCuttingMask.lineTo(_this.firstCuttingLocation.x + Scene_080_CutCakeView.OFFSET_X, _this.firstCuttingLocation.y + Scene_080_CutCakeView.OFFSET_Y);
	                        _this.flashCuttingMask.endFill();
	                        _this.cuttingShape.clear();
	                        _this.cuttingFinished = true;
	                        break;
	                    case TouchPhase_1.TouchPhase.MOVED:
	                        if (_this.cuttingFinished) {
	                            return;
	                        }
	                        Logger_1.Logger.log(_this, "loc:" + _this.cuttingLocation);
	                        Logger_1.Logger.log(_this, "lastloc:" + _this.lastCuttingLocation);
	                        break;
	                    case TouchPhase_1.TouchPhase.STATIONARY:
	                        break;
	                    case TouchPhase_1.TouchPhase.HOVER:
	                        break;
	                }
	            }
	        };
	        _this.clearButtonClicked = function (event) {
	            _this.cuttingShape.clear();
	            _this.cuttingMask.clear();
	            _this.cuttingMask.beginFill(0x000000, 0.7);
	            _this.cuttingMask.lineStyle(1, 0x000000, 0.7);
	            _this.cuttingMask.drawRect(_this.cakeDisplay.x, _this.cakeDisplay.y, _this.cakeDisplay.width, _this.cakeDisplay.height);
	            _this.cuttingMask.endFill();
	            _this.finalMask.clear();
	            _this.finalMask.beginFill(0x000000, 0.0);
	            _this.finalMask.lineStyle(1, 0x000000, 0.0);
	            _this.finalMask.drawRect(_this.cakeDisplay.x, _this.cakeDisplay.y, _this.cakeDisplay.width, _this.cakeDisplay.height);
	            _this.finalMask.endFill();
	            _this.flashCuttingMask.clear();
	        };
	        _this.nextButtonClicked = function (event) {
	            if (_this.firstCut) {
	                _this.finalMask.beginFill(0x000000, 1);
	                _this.finalMask.lineStyle(1, 0x000000, 1);
	                _this.finalMask.drawRect(_this.cakeDisplay.x, _this.cakeDisplay.y, _this.cakeDisplay.width, _this.cakeDisplay.height);
	                _this.finalMask.endFill();
	            }
	            Model_1.Model.getInstance().cakeMask = _this.finalMask;
	            _this.playOutro();
	        };
	        _this.playOutro = function () {
	            Logger_1.Logger.log(_this, "Scene_080_cutCakeView  playOutro ");
	            _this.cutScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            _this.cutScene.gotoOuttro();
	        };
	        _this.proceed = function (event) {
	            _this.cutScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.NEXT, sceneEvent);
	        };
	        return _this;
	    }
	    Scene_080_CutCakeView.prototype.setup = function (typeddb) {
	        this._typeddb = typeddb;
	        AssetLoader_1.AssetLoader.getInstance().loadAdditional("Scene9a_cutOut", this.setupContinued);
	    };
	    Scene_080_CutCakeView.prototype.teardown = function () {
	        if (this.clearButton) {
	            this.clearButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.clearButtonClicked);
	            this.clearButton.dispose();
	        }
	        if (this.nextButton) {
	            this.nextButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.nextButtonClicked);
	            this.nextButton.dispose();
	        }
	        this.removeListener("TOUCH", this.handleCuttingTouch);
	        this.cutScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, this.proceed, this);
	        this.cutScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, this.afterIntro, this);
	        this.cutScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	        AssetLoader_1.this.removeChild(this._background);
	        AssetLoader_1.AssetLoader.getInstance().removeTexture(Backgrounds_1.Backgrounds.SCENE9A_CUTOUT, true);
	    };
	    Scene_080_CutCakeView.prototype.initCuttingMode = function () {
	        var _this = this;
	        Logger_1.Logger.log(this, "Scene_080_CutCakeView initCuttingMode");
	        this.cuttingContainer = new PIXI.Sprite();
	        this.cuttingShape = new PIXI.Graphics();
	        this.cuttingContainer.addChild(this.cuttingShape);
	        this.cuttingMask = new PIXI.Graphics();
	        this.finalMask = new PIXI.Graphics();
	        this.flashCuttingMask = new PIXI.Graphics();
	        this.cuttingMask.beginFill(0x000000, 1.0);
	        this.cuttingMask.lineStyle(1, 0x000000, 1.0);
	        this.cuttingMask.drawRect(this.cakeDisplay.x, this.cakeDisplay.y, this.cakeDisplay.width, this.cakeDisplay.height);
	        this.cuttingMask.endFill();
	        this.finalMask.beginFill(0x000000, 0.0);
	        this.finalMask.lineStyle(1, 0x000000, 0.0);
	        this.finalMask.drawRect(this.cakeDisplay.x, this.cakeDisplay.y, this.cakeDisplay.width, this.cakeDisplay.height);
	        this.finalMask.endFill();
	        this.cuttingStarted = false;
	        this.cuttingContainer.x = this.cakeDisplay.x + 20;
	        this.cuttingContainer.y = this.cakeDisplay.y;
	        this.cutScene.display.addChild(this.cuttingContainer);
	        this.firstCut = true;
	        setTimeout(function () { return _this.nextButtonClicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE * 2);
	    };
	    Scene_080_CutCakeView.prototype.getPolaroidContent = function (type) {
	        var atlasName = "texture-" + Model_1.Model.getInstance().getSelectedCharName();
	        var textureName = "badGuy_" + Model_1.Model.getInstance().getSelectedCharName() + "/polaroid" + type;
	        Logger_1.Logger.log(this, "get polaroid content:" + atlasName + "/" + textureName);
	        return textureName;
	    };
	    return Scene_080_CutCakeView;
	}(SceneBase_1.SceneBase));
	Scene_080_CutCakeView.OFFSET_X = 411 + 8;
	Scene_080_CutCakeView.OFFSET_Y = 143 - 8;
	exports.Scene_080_CutCakeView = Scene_080_CutCakeView;


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundNames_1 = __webpack_require__(164);
	var AudioPlayer_1 = __webpack_require__(163);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var ButtonEvent_1 = __webpack_require__(165);
	var TouchPhase_1 = __webpack_require__(166);
	var DragManager_1 = __webpack_require__(207);
	var SceneEvent_1 = __webpack_require__(195);
	var Deco__lakridsDragProxy_1 = __webpack_require__(72);
	var LakridsDragProxy_1 = __webpack_require__(70);
	var CocosDragProxy_1 = __webpack_require__(67);
	var BlueKrymmelDragProxy_1 = __webpack_require__(64);
	var ColorKrymmelDragProxy_1 = __webpack_require__(65);
	var KiwiDragProxy_1 = __webpack_require__(68);
	var PineappleDragProxy_1 = __webpack_require__(66);
	var StrawberryDragProxy_1 = __webpack_require__(63);
	var Deco__chocolateDragProxy_1 = __webpack_require__(59);
	var Deco__flagDragProxy_1 = __webpack_require__(69);
	var NextArrowButton_1 = __webpack_require__(188);
	var GlazeingButtonButton_1 = __webpack_require__(184);
	var ClearButtonButton_1 = __webpack_require__(186);
	var UndoButtonButton_1 = __webpack_require__(185);
	var Backgrounds_1 = __webpack_require__(198);
	var Model_1 = __webpack_require__(5);
	var TypedDBFactory_1 = __webpack_require__(6);
	var MainView_1 = __webpack_require__(194);
	var Logger_1 = __webpack_require__(4);
	var Scene_081_DecorateCakeView = (function (_super) {
	    __extends(Scene_081_DecorateCakeView, _super);
	    function Scene_081_DecorateCakeView() {
	        var _this = _super.call(this) || this;
	        _this.NUMBER_OF_LAKRIDS_FORMS = 3;
	        _this._draggedItems = 0;
	        _this.draw = false;
	        _this.currentLakridsForm = 0;
	        _this.lakridsDragProxyClicked = false;
	        _this.bevelsize = 1.5;
	        _this.setupContinued = function () {
	            _this._background = PIXI.Sprite.fromFrame(Backgrounds_1.Backgrounds.SCENE9_BG);
	            AssetLoader_1.AssetLoader.getInstance().stage.addChild(_this._background);
	            _this.decoScene = _this._typeddb.buildScene9_DecorationArmature();
	            _this.decoScene.display.x = 0;
	            _this.decoScene.display.y = 0;
	            _this.decoScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	            _this.decoScene.gotoIntro();
	            setTimeout(function () { return _this.nextButtonClicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	        };
	        _this.afterIntro = function (event) {
	            _this.decoScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.afterIntro, _this);
	            _this.decoScene.getDragables().getBlueKrymmelDrag();
	            _this.decoScene.getDragables().getCocosDrag();
	            _this.decoScene.getDragables().getColorKrymmelDrag();
	            _this.decoScene.getDragables().getKiwiDrag();
	            _this.decoScene.getDragables().getLakridsDrag();
	            _this.decoScene.getDragables().getPineappleDrag();
	            _this.decoScene.getDragables().getStrawberryDrag();
	            _this.decoScene.getDragables().getChocolateDrag();
	            _this.decoScene.getDragables().getFlagDrag();
	            _this.glazingButtonBlue = new GlazeingButtonButton_1.GlazeingButtonButton(_this.decoScene.getGlazeingButtonBlue().armature);
	            _this.glazingButtonBlue.isToggle = true;
	            _this.glazingButtonOrange = new GlazeingButtonButton_1.GlazeingButtonButton(_this.decoScene.getGlazeingButtonOrange().armature);
	            _this.glazingButtonOrange.isToggle = true;
	            _this.glazingButtonRed = new GlazeingButtonButton_1.GlazeingButtonButton(_this.decoScene.getGlazeingButtonRed().armature);
	            _this.glazingButtonRed.isToggle = true;
	            _this.glazingButtonWhite = new GlazeingButtonButton_1.GlazeingButtonButton(_this.decoScene.getGlazeingButtonWhite().armature);
	            _this.glazingButtonWhite.isToggle = true;
	            _this.glazingButtonBlue.on(ButtonEvent_1.ButtonEvent.CLICKED, _this.glazingBlueClicked);
	            _this.glazingButtonOrange.on(ButtonEvent_1.ButtonEvent.CLICKED, _this.glazingOrangeClicked);
	            _this.glazingButtonRed.on(ButtonEvent_1.ButtonEvent.CLICKED, _this.glazingRedClicked);
	            _this.glazingButtonWhite.on(ButtonEvent_1.ButtonEvent.CLICKED, _this.glazingWhiteClicked);
	            _this.clearButton = new ClearButtonButton_1.ClearButtonButton(_this.decoScene.getClearButton().armature);
	            _this.clearButton.on(ButtonEvent_1.ButtonEvent.CLICKED, _this.clearButtonClicked);
	            _this.undoButton = new UndoButtonButton_1.UndoButtonButton(_this.decoScene.getUndoButton().armature);
	            _this.undoButton.on(ButtonEvent_1.ButtonEvent.CLICKED, _this.undoButtonClicked);
	            _this.nextButton = new NextArrowButton_1.NextArrowButton(_this.decoScene.getNextArrow().armature);
	            _this.nextButton.on(ButtonEvent_1.ButtonEvent.CLICKED, _this.nextButtonClicked);
	            _this.hardCake = _this._typeddb.buildCakeArmArmature();
	            DragManager_1.DragManager.getInstance()._dropTarget = _this.hardCake.display;
	            _this.hardCake.display.x = 416;
	            _this.hardCake.display.y = 134;
	            var cakeDisplay = _this.hardCake.display;
	            dragonBones.WorldClock.clock.remove(_this.decoScene.getHardCake().armature);
	            _this.decoScene.getHardCake().armature.animation.stop();
	            _this.completeCakeContainer = new PIXI.Sprite();
	            _this.decoScene.display.addChild(_this.completeCakeContainer);
	            _this.drawingContainer = _this.initDrawingCanvas(cakeDisplay);
	            _this.completeCakeContainer.addChild(_this.drawingContainer);
	            _this.decoContainer = new PIXI.Sprite();
	            _this.completeCakeContainer.addChild(_this.decoContainer);
	            _this.on("TOUCH", _this.touchHandler);
	            _this.decoScene.getDragables().display.on("TOUCH", _this.handleDecoTouch);
	            _this.decoScene.display.swapChildren(_this.decoScene.getDragables().display, _this.completeCakeContainer);
	            var farve = new PIXI.Sprite();
	            if (Model_1.Model.getInstance().gameMode == Model_1.Model.MODE_FREE) {
	                if (Model_1.Model.getInstance().snapShots[2] != null) {
	                    farve.addChild(Model_1.Model.getInstance().snapShots[2]);
	                }
	            }
	            else {
	                var farveImage = PIXI.Sprite.fromFrame(_this.getPolaroidContent("Farve"));
	                farve.addChild(farveImage);
	            }
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S09_ROSA_02_NU_SKAL_VI_HAVE_PYNTET_KAGEN);
	            _this.decoScene.getPolaroid().get_placeholder().display = farve;
	            _this.decoScene.getPolaroid().gotoFarve();
	            setTimeout(function () { return _this.nextButtonClicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	        };
	        _this.touchHandler = function (event) {
	            if (_this.isDrawing()) {
	                _this.handleDrawingTouch(event);
	            }
	            else {
	                _this.handleDecoTouch(event);
	            }
	        };
	        _this.handleDecoTouch = function (event) {
	            var t = event.getTouch(event.target);
	            if (t) {
	                switch (t.phase) {
	                    case TouchPhase_1.TouchPhase.BEGAN:
	                        var touchedImage = event.target;
	                        if (touchedImage == null) {
	                            return;
	                        }
	                        Logger_1.Logger.log(_this, "BEGIN " + event.target + " " + event.currentTarget + " " + t.target);
	                        var parentSprite = touchedImage.parent;
	                        Logger_1.Logger.log(_this, "parent:" + parentSprite + " - name:" + parentSprite.name);
	                        _this.dragable = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(parentSprite);
	                        Logger_1.Logger.log(_this, "dragable:" + _this.dragable);
	                        _this.lakridsDragProxyClicked = (_this.dragable instanceof Deco__lakridsDragProxy_1.Deco__lakridsDragProxy);
	                        if (_this.dragable) {
	                            _this.dragable.gotoDrag();
	                            if (_this.dragable instanceof Deco__lakridsDragProxy_1.Deco__lakridsDragProxy) {
	                                Logger_1.Logger.log(_this, "isLakridsProxy");
	                                _this.setLakridsState(_this.dragable, _this.currentLakridsForm);
	                                _this.dragable = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(parentSprite);
	                            }
	                            var armature = TypedDBFactory_1.TypedDBFactory.getProxyFromDisplay(parentSprite);
	                            DragManager_1.DragManager.getInstance().startDrag(armature.display, 1);
	                            _this.lastDragable = _this.dragable;
	                            _this.stopDrawing();
	                            _this.setActiveSelectionArrow();
	                        }
	                        else {
	                            if (parentSprite.name == "placed") {
	                                return;
	                            }
	                            DragManager_1.DragManager.getInstance().startDrag(parentSprite, 1);
	                            _this.stopDrawing();
	                            _this.setActiveSelectionArrow();
	                        }
	                        break;
	                    case TouchPhase_1.TouchPhase.ENDED:
	                        Logger_1.Logger.log(_this, "END " + event.target + " " + event.currentTarget + " " + t.target);
	                        Logger_1.Logger.log(_this, "draggable:" + _this.dragable);
	                        var target = _this.hardCake.display;
	                        var targetRect = target.getBounds();
	                        var parentSprite = event.target.parent;
	                        if (parentSprite != null && parentSprite.name == "placed") {
	                        }
	                        var lakridsRect = new PIXI.Rectangle(150, 50, 225, 225);
	                        if (DragManager_1.DragManager.getInstance().isDragging) {
	                            var rect = DragManager_1.DragManager.getInstance()._draggedObject.getBounds();
	                            if (_this.isIntersecting(_this, targetRect)) {
	                                Logger_1.Logger.log(_this, "lakrids dragged");
	                                _this.currentLakridsForm++;
	                                _this.currentLakridsForm = _this.currentLakridsForm % _this.NUMBER_OF_LAKRIDS_FORMS;
	                            }
	                            else {
	                                if (_this.isIntersecting(rect, targetRect)) {
	                                    _this._draggedItems++;
	                                    var droppedSprite = _this.createCopyOfSprite(_this.dragable.display, _this.decoContainer);
	                                    droppedSprite.name = "placed";
	                                    droppedSprite.rotation = _this.getRandomRotation();
	                                    DragManager_1.DragManager.getInstance().stopDrag();
	                                }
	                            }
	                            _this.dragable.display.x = _this.dragable.armature.userData.orgX;
	                            _this.dragable.display.y = _this.dragable.armature.userData.orgY;
	                            _this.dragable.gotoDefault();
	                            DragManager_1.DragManager.getInstance().stopDrag();
	                        }
	                        else {
	                            if (_this.lastDragable) {
	                            }
	                        }
	                        break;
	                    case TouchPhase_1.TouchPhase.MOVED:
	                        break;
	                    case TouchPhase_1.TouchPhase.STATIONARY:
	                        break;
	                    case TouchPhase_1.TouchPhase.HOVER:
	                        break;
	                }
	            }
	        };
	        _this.glazingBlueClicked = function (event) {
	            _this.setCurrentDrawingColor("blue");
	        };
	        _this.glazingOrangeClicked = function (event) {
	            _this.setCurrentDrawingColor("orange");
	        };
	        _this.glazingWhiteClicked = function (event) {
	            _this.setCurrentDrawingColor("white");
	        };
	        _this.glazingRedClicked = function (event) {
	            _this.setCurrentDrawingColor("red");
	        };
	        _this.clearButtonClicked = function (event) {
	            _this.decoContainer.removeChildren(0, _this.decoContainer.children.length - 1);
	        };
	        _this.undoButtonClicked = function (event) {
	            if (_this.decoContainer.children.length == 0) {
	            }
	            else {
	                _this.decoContainer.removeChildren(_this.decoContainer.children.length - 1, _this.decoContainer.children.length - 1);
	            }
	        };
	        _this.nextButtonClicked = function (event) {
	            if (Model_1.Model.getInstance().gameMode == Model_1.Model.MODE_STORY) {
	                AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S10_ROSA_01_SAA_ER_KAGEN_FAERDIG_LAD_OS_KOMME_AFSTED_MED_DEN);
	            }
	            _this.playOutro();
	        };
	        _this.nextScene = function (event) {
	            _this.decoScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.nextScene, _this);
	            if (Model_1.Model.getInstance().gameMode == Model_1.Model.MODE_FREE) {
	                var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.JUMP, Model_1.Model.SCENE_PRESENT_CAKE, true);
	                _this.emit(SceneEvent_1.SceneEvent.JUMP, sceneEvent);
	            }
	            else {
	                var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	                _this.emit(SceneEvent_1.SceneEvent.NEXT, sceneEvent);
	            }
	        };
	        return _this;
	    }
	    Scene_081_DecorateCakeView.prototype.setup = function (typeddb) {
	        this._typeddb = typeddb;
	        AssetLoader_1.AssetLoader.getInstance().loadAdditional("Scene9_bg", this.setupContinued);
	    };
	    Scene_081_DecorateCakeView.prototype.teardown = function () {
	        Logger_1.Logger.log(this, "Scene_081_DecorateCakeView teardown");
	        if (this.glazingButtonBlue) {
	            this.glazingButtonBlue.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.glazingBlueClicked);
	            this.glazingButtonOrange.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.glazingOrangeClicked);
	            this.glazingButtonRed.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.glazingRedClicked);
	            this.glazingButtonWhite.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.glazingWhiteClicked);
	            this.glazingButtonBlue.dispose();
	            this.glazingButtonOrange.dispose();
	            this.glazingButtonRed.dispose();
	            this.glazingButtonWhite.dispose();
	        }
	        if (this.clearButton) {
	            this.clearButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.clearButtonClicked);
	            this.clearButton.dispose();
	        }
	        this.removeListener("TOUCH", this.touchHandler);
	        this.decoScene.getDragables().display.removeListener("TOUCH", this.handleDecoTouch);
	        if (this.completeCakeContainer) {
	            this.decoScene.display.removeChild(this.completeCakeContainer);
	        }
	        this.decoScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	        AssetLoader_1.this.removeChild(this._background);
	        AssetLoader_1.AssetLoader.getInstance().removeTexture(Backgrounds_1.Backgrounds.SCENE9_BG, true);
	    };
	    Scene_081_DecorateCakeView.prototype.initDrawingCanvas = function (cakeDisplay) {
	        Logger_1.Logger.log(this, "Scene_081_DecorateCakeView initDrawingCanvas");
	        this.container = new PIXI.Sprite();
	        this.mColors = new Map();
	        return this.container;
	    };
	    Scene_081_DecorateCakeView.prototype.getPolaroidContent = function (type) {
	        Logger_1.Logger.log(this, "Scene_081_DecorateCakeView getPolaroidContent");
	        var atlasName = "texture-" + Model_1.Model.getInstance().getSelectedCharName();
	        var textureName = "badGuy_" + Model_1.Model.getInstance().getSelectedCharName() + "/polaroid" + type;
	        Logger_1.Logger.log(this, "get polaroid content:" + atlasName + "/" + textureName);
	        return textureName;
	    };
	    Scene_081_DecorateCakeView.prototype.getRandomRotation = function () {
	        var randomDegree = Math.random() * 60 - 30;
	        return randomDegree * Math.PI / 180.0;
	    };
	    Scene_081_DecorateCakeView.prototype.handleDrawingTouch = function (event) {
	        var newPoint;
	        var dist = 0;
	        var distX;
	        var distY;
	        var iterator = 0;
	        var touchMoved = event.getTouch(this, "moved");
	        var touchBegin = event.getTouch(this, "began");
	        var touchEnded = event.getTouch(this, "ended");
	    };
	    Scene_081_DecorateCakeView.prototype.setActiveSelectionArrow = function () {
	        (this.dragable instanceof LakridsDragProxy_1.LakridsDragProxy) ? this.decoScene.getDecoSelectionLakrids().gotoOn() : this.decoScene.getDecoSelectionLakrids().gotoOff();
	        (this.dragable instanceof CocosDragProxy_1.CocosDragProxy) ? this.decoScene.getDecoSelectionCocos().gotoOn() : this.decoScene.getDecoSelectionCocos().gotoOff();
	        (this.dragable instanceof BlueKrymmelDragProxy_1.BlueKrymmelDragProxy) ? this.decoScene.getDecoSelectionBluekrymmel().gotoOn() : this.decoScene.getDecoSelectionBluekrymmel().gotoOff();
	        (this.dragable instanceof ColorKrymmelDragProxy_1.ColorKrymmelDragProxy) ? this.decoScene.getDecoSelectionColorkrymmel().gotoOn() : this.decoScene.getDecoSelectionColorkrymmel().gotoOff();
	        (this.dragable instanceof KiwiDragProxy_1.KiwiDragProxy) ? this.decoScene.getDecoSelectionKiwi().gotoOn() : this.decoScene.getDecoSelectionKiwi().gotoOff();
	        (this.dragable instanceof PineappleDragProxy_1.PineappleDragProxy) ? this.decoScene.getDecoSelectionPineapple().gotoOn() : this.decoScene.getDecoSelectionPineapple().gotoOff();
	        (this.dragable instanceof StrawberryDragProxy_1.StrawberryDragProxy) ? this.decoScene.getDecoSelectionStrawberry().gotoOn() : this.decoScene.getDecoSelectionStrawberry().gotoOff();
	        (this.dragable instanceof Deco__chocolateDragProxy_1.Deco__chocolateDragProxy) ? this.decoScene.getDecoSelectionChocolate().gotoOn() : this.decoScene.getDecoSelectionChocolate().gotoOff();
	        (this.dragable instanceof Deco__flagDragProxy_1.Deco__flagDragProxy) ? this.decoScene.getDecoSelectionFlag().gotoOn() : this.decoScene.getDecoSelectionFlag().gotoOff();
	    };
	    Scene_081_DecorateCakeView.prototype.isDrawing = function () {
	        return this.glazingButtonOrange.selected || this.glazingButtonBlue.selected || this.glazingButtonWhite.selected || this.glazingButtonRed.selected;
	    };
	    Scene_081_DecorateCakeView.prototype.setCurrentDrawingColor = function (colorName) {
	        this.glazingButtonBlue.selected = (colorName == "blue");
	        this.glazingButtonOrange.selected = (colorName == "orange");
	        this.glazingButtonWhite.selected = (colorName == "white");
	        this.glazingButtonRed.selected = (colorName == "red");
	        this.brushName = colorName + "BrushBone";
	    };
	    Scene_081_DecorateCakeView.prototype.stopDrawing = function () {
	        Logger_1.Logger.log(this, "stop drawing");
	        this.glazingButtonBlue.selected = false;
	        this.glazingButtonOrange.selected = false;
	        this.glazingButtonWhite.selected = false;
	        this.glazingButtonRed.selected = false;
	    };
	    Scene_081_DecorateCakeView.prototype.setLakridsState = function (proxy, state) {
	        proxy["gotoDrag" + (state + 1).toString()]();
	    };
	    Scene_081_DecorateCakeView.prototype.setRandomLakridsState = function (proxy) {
	        var dragState = "gotoDrag" + (Math.floor(Math.random() * 3.0) + 1).toString();
	        proxy[dragState]();
	    };
	    Scene_081_DecorateCakeView.prototype.playOutro = function () {
	        if (this.completeCakeContainer) {
	            this.decoScene.getPlaceholder().display = this.completeCakeContainer;
	        }
	        this.decoScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.nextScene, this);
	        this.decoScene.gotoOuttro();
	    };
	    Scene_081_DecorateCakeView.prototype.createRenderTextureOfCake = function () {
	        if (Model_1.Model.getInstance().cakeTexture == null) {
	        }
	        var spriteToRender = new PIXI.Sprite();
	        spriteToRender.addChild(this.drawingContainer);
	        spriteToRender.addChild(this.decoContainer);
	    };
	    Scene_081_DecorateCakeView.prototype.createCopyOfSprite = function (sourceSprite, newParent) {
	        Logger_1.Logger.log(this, "Scene_081_DecorateCakeView createCopyOfSprite");
	        var droppedSprite = new PIXI.Sprite();
	        for (var i = 0; i < sourceSprite.children.length; i++) {
	            var childImage = sourceSprite.getChildAt(i);
	            var image = new PIXI.Sprite(childImage.texture);
	            image.x = childImage.x;
	            image.y = childImage.y;
	            droppedSprite.addChild(image);
	        }
	        newParent.addChild(droppedSprite);
	        droppedSprite.x = sourceSprite.x;
	        droppedSprite.y = sourceSprite.y;
	        droppedSprite.x -= newParent.x;
	        droppedSprite.y -= newParent.y;
	        return droppedSprite;
	    };
	    Scene_081_DecorateCakeView.prototype.bitmapCrop = function (_target_bitmap, _target) {
	        Logger_1.Logger.log(this, "Scene_081_DecorateCakeView bitmapCrop");
	        var rectangle = _target.getBounds();
	        var _result = new PIXI.Sprite();
	        _result.width = _target.width;
	        _result.height = _target.height;
	        return _result;
	    };
	    return Scene_081_DecorateCakeView;
	}(SceneBase_1.SceneBase));
	exports.Scene_081_DecorateCakeView = Scene_081_DecorateCakeView;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundNames_1 = __webpack_require__(164);
	var AudioPlayer_1 = __webpack_require__(163);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var ButtonEvent_1 = __webpack_require__(165);
	var DragManager_1 = __webpack_require__(207);
	var SceneEvent_1 = __webpack_require__(195);
	var Wrongtaste_potatosProxy_1 = __webpack_require__(115);
	var Wrongtaste_strawberriesProxy_1 = __webpack_require__(116);
	var Wrongtaste_watermelonProxy_1 = __webpack_require__(117);
	var Taste_christianProxy_1 = __webpack_require__(119);
	var Taste_2_bamseProxy_1 = __webpack_require__(120);
	var PandekageogIsProxy_1 = __webpack_require__(118);
	var NextArrowButton_1 = __webpack_require__(188);
	var TouchPhase_1 = __webpack_require__(166);
	var TouchEvent_1 = __webpack_require__(202);
	var Backgrounds_1 = __webpack_require__(198);
	var Model_1 = __webpack_require__(5);
	var MainView_1 = __webpack_require__(194);
	var Logger_1 = __webpack_require__(4);
	var Scene_08_TasteIngredientsView = (function (_super) {
	    __extends(Scene_08_TasteIngredientsView, _super);
	    function Scene_08_TasteIngredientsView() {
	        var _this = _super.call(this) || this;
	        _this.touchHandler = function (event) {
	            var t;
	            if (t) {
	                var rosa = _this.tasteIngScenes.getRosa();
	                switch (t.phase) {
	                    case TouchPhase_1.TouchPhase.BEGAN:
	                        if (!_this.dragable) {
	                            return;
	                        }
	                        _this.dragable.gotoDrag();
	                        break;
	                    case TouchPhase_1.TouchPhase.MOVED:
	                        if (!DragManager_1.DragManager.getInstance()._draggedObject || (!_this.dragable)) {
	                            return;
	                        }
	                        var rect = DragManager_1.DragManager.getInstance()._draggedObject.getBounds();
	                        if (_this.testForIntersection(rect, rosa.getHead())) {
	                            if (rosa.armature.animation.lastAnimationName != "taste") {
	                                rosa.gotoTaste();
	                            }
	                        }
	                        else {
	                            if (rosa.armature.animation.lastAnimationName != "idle") {
	                                rosa.gotoIdle();
	                            }
	                        }
	                        break;
	                    case TouchPhase_1.TouchPhase.ENDED:
	                        if (!DragManager_1.DragManager.getInstance()._draggedObject || (!_this.dragable)) {
	                            return;
	                        }
	                        var rect = DragManager_1.DragManager.getInstance()._draggedObject.getBounds();
	                        if (_this.testForIntersection(rect, _this.tasteIngScenes.getMagreteBowl())) {
	                            if (!_this.done) {
	                                _this._draggedItems++;
	                                Logger_1.Logger.log(_this, _this.dragable.armature.name);
	                                Logger_1.Logger.log(_this, Model_1.Model.getInstance().tasteArmatureNames[Model_1.Model.getInstance().selectedChar]);
	                                if (_this.dragable.armature.name == Model_1.Model.getInstance().tasteArmatureNames[Model_1.Model.getInstance().selectedChar]) {
	                                    rosa.gotoOk();
	                                    MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S00_ROSA_36_DET_TROR_JEG_HAN_BLIVER_GLAD_FOR_DET_HER, _this.tasteIngScenes.getRosa());
	                                    DragManager_1.DragManager.getInstance()._draggedObject.visible = false;
	                                    _this.tasteIngScenes.getWrongtaste_potatos().display.visible = false;
	                                    _this.tasteIngScenes.getWrongtaste_strawberries().display.visible = false;
	                                    _this.tasteIngScenes.getWrongtaste_watermelon().display.visible = false;
	                                    _this.tasteIngScenes.getTaste_1_christian().display.visible = false;
	                                    _this.tasteIngScenes.getTaste_2_bamse().display.visible = false;
	                                    _this.tasteIngScenes.getTaste_3_skaeg().display.visible = false;
	                                    _this.tasteIngScenes.gotoReady();
	                                    _this.tasteIngScenes.display.removeListener("TOUCH", _this.touchHandler);
	                                    _this.done = true;
	                                }
	                                else {
	                                    rosa.gotoNogo();
	                                    MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S00_ROSA_12_EJD_DET_TROR_JEG_IKKE_ER_DEN_HELT_RIGTIGE, _this.tasteIngScenes.getRosa());
	                                    _this.dragable.gotoDefault();
	                                    _this.moveDragableToOriginalPosition();
	                                }
	                            }
	                            else {
	                                _this.moveDragableToOriginalPosition();
	                                _this.dragable.gotoDefault();
	                            }
	                        }
	                        else {
	                            _this.dragable.gotoDefault();
	                            if (rosa.armature.animation.lastAnimationName == "taste") {
	                                if (_this.dragable instanceof Wrongtaste_potatosProxy_1.Wrongtaste_potatosProxy) {
	                                    rosa.gotoSour();
	                                }
	                                else {
	                                    rosa.gotoSweet();
	                                }
	                                _this.playRosaTasteSound(_this.dragable);
	                            }
	                            _this.moveDragableToOriginalPosition();
	                        }
	                        if (DragManager_1.DragManager.getInstance().isDragging) {
	                            DragManager_1.DragManager.getInstance().stopDrag();
	                        }
	                        break;
	                    case TouchPhase_1.TouchPhase.MOVED:
	                        break;
	                    case TouchPhase_1.TouchPhase.STATIONARY:
	                        break;
	                    case TouchPhase_1.TouchPhase.HOVER:
	                        break;
	                }
	            }
	        };
	        _this.nextButtonClicked = function (event) {
	            _this.playOutro();
	        };
	        _this.proceed = function (event) {
	            _this.tasteIngScenes.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.PREVIOUS, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.PREVIOUS, sceneEvent);
	        };
	        return _this;
	    }
	    Scene_08_TasteIngredientsView.prototype.setup = function (typeddb) {
	        var _this = this;
	        this._typeddb = typeddb;
	        this._background = PIXI.Sprite.fromFrame(Backgrounds_1.Backgrounds.SCENE1_BG);
	        AssetLoader_1.this.addChild(this._background);
	        this.tasteIngScenes = this._typeddb.buildScene7_specialTasteArmature();
	        this.tasteIngScenes.display.x = 0;
	        this.tasteIngScenes.display.y = 0;
	        this.tasteIngScenes.gotoIntro();
	        this.tasteIngScenes.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        this.tasteIngScenes.getWrongtaste_potatos();
	        this.tasteIngScenes.getWrongtaste_strawberries();
	        this.tasteIngScenes.getWrongtaste_watermelon();
	        this.tasteIngScenes.getTaste_1_christian();
	        this.tasteIngScenes.getTaste_2_bamse();
	        this.tasteIngScenes.getTaste_3_skaeg();
	        this.nextButton = new NextArrowButton_1.NextArrowButton(this.tasteIngScenes.getArrowNext().armature);
	        this.nextButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, this.nextButtonClicked);
	        this.tasteIngScenes.getMagreteBowl().gotoDej_6();
	        DragManager_1.DragManager.getInstance()._dropTarget = this.tasteIngScenes.getMagreteBowl().display;
	        this.tasteIngScenes.display.addListener(TouchEvent_1.TouchEvent.TOUCH, this.touchHandler);
	        this.done = false;
	        this._draggedItems = 0;
	        MainView_1.MainView.rosaSpeak(SoundNames_1.SoundNames.S07_ROSA_01_VI_SKAL_FINDE_DEN_HELT_RIGTIGE_KAGESMAG, this.tasteIngScenes.getRosa());
	        var smagImage = PIXI.Sprite.fromFrame(this.getPolaroidContent("Smag"));
	        var smag = new PIXI.Sprite();
	        smag.addChild(smagImage);
	        this.tasteIngScenes.getPolaroid().get_placeholder().display = smag;
	        this.tasteIngScenes.getPolaroid().gotoSmag();
	        setTimeout(function () { return _this.nextButtonClicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	    };
	    Scene_08_TasteIngredientsView.prototype.teardown = function () {
	        this.nextButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.nextButtonClicked);
	        this.tasteIngScenes.armature.removeEventListener(dragonBones.EventObject.COMPLETE, this.proceed, this);
	        this.tasteIngScenes.display.removeListener(TouchEvent_1.TouchEvent.TOUCH, this.touchHandler);
	        this.tasteIngScenes.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	        AssetLoader_1.this.removeChild(this._background);
	    };
	    Scene_08_TasteIngredientsView.prototype.getPolaroidContent = function (type) {
	        var atlasName = "texture-" + Model_1.Model.getInstance().getSelectedCharName();
	        var textureName = "badGuy_" + Model_1.Model.getInstance().getSelectedCharName() + "/polaroid" + type;
	        Logger_1.Logger.log(this, "get polaroid content:" + atlasName + "/" + textureName);
	        return textureName;
	    };
	    Scene_08_TasteIngredientsView.prototype.playRosaTasteSound = function (armature) {
	        AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	        if (armature instanceof Wrongtaste_potatosProxy_1.Wrongtaste_potatosProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S07_ROSA_03_UF_DEN_ER_SUR, this.tasteIngScenes.getRosa());
	        }
	        if (armature instanceof Wrongtaste_strawberriesProxy_1.Wrongtaste_strawberriesProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S06_ROSA_19_SMAG_MILK, this.tasteIngScenes.getRosa());
	        }
	        if (armature instanceof Wrongtaste_watermelonProxy_1.Wrongtaste_watermelonProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S06_ROSA_19_SMAG_MILK, this.tasteIngScenes.getRosa());
	        }
	        if (armature instanceof Taste_christianProxy_1.Taste_christianProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S07_ROSA_18_UHMM_DER_HAR_DU_FUNDET_NOGET_HODT_NOGET, this.tasteIngScenes.getRosa());
	        }
	        if (armature instanceof Taste_2_bamseProxy_1.Taste_2_bamseProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S07_ROSA_07_AHR_DET_ER_LAEKKERT, this.tasteIngScenes.getRosa());
	        }
	        if (armature instanceof PandekageogIsProxy_1.PandekageogIsProxy) {
	            MainView_1.MainView.rosaSpeakWithoutState(SoundNames_1.SoundNames.S07_ROSA_14_UH_DET_ER__EN_GOD_KAGESAMG, this.tasteIngScenes.getRosa());
	        }
	    };
	    Scene_08_TasteIngredientsView.prototype.moveDragableToOriginalPosition = function () {
	        this.dragable.display.x = this.dragable.armature.userData.orgX;
	        this.dragable.display.y = this.dragable.armature.userData.orgY;
	    };
	    Scene_08_TasteIngredientsView.prototype.testForIntersection = function (rect, armature) {
	        var target = armature.display;
	        var targetRect = target.getBounds();
	        return this.isIntersecting(target, targetRect);
	    };
	    Scene_08_TasteIngredientsView.prototype.playOutro = function () {
	        this.tasteIngScenes.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.proceed, this);
	        this.tasteIngScenes.gotoOuttro();
	    };
	    return Scene_08_TasteIngredientsView;
	}(SceneBase_1.SceneBase));
	exports.Scene_08_TasteIngredientsView = Scene_08_TasteIngredientsView;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundNames_1 = __webpack_require__(164);
	var AudioPlayer_1 = __webpack_require__(163);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var ButtonEvent_1 = __webpack_require__(165);
	var SceneEvent_1 = __webpack_require__(195);
	var TouchPhase_1 = __webpack_require__(166);
	var TouchEvent_1 = __webpack_require__(202);
	var NextArrowButton_1 = __webpack_require__(188);
	var MixerButton1ArmButton_1 = __webpack_require__(183);
	var MixerButton2ArmButton_1 = __webpack_require__(181);
	var MixerButton3ArmButton_1 = __webpack_require__(182);
	var Backgrounds_1 = __webpack_require__(198);
	var MainView_1 = __webpack_require__(194);
	var Logger_1 = __webpack_require__(4);
	var Scene_08a_Mixing = (function (_super) {
	    __extends(Scene_08a_Mixing, _super);
	    function Scene_08a_Mixing() {
	        var _this = _super.call(this) || this;
	        _this.DEG2RAD = Math.PI / 180;
	        _this.RAD2DEG = 180 / Math.PI;
	        _this.previousSpinnerRotation = -1000;
	        _this.previousRotation = -1000;
	        _this.targetAngle = 0;
	        _this.collisionStarting = true;
	        _this.mixerSpeed = 0;
	        _this.setupContinued = function () {
	            _this._background = PIXI.Sprite.fromFrame(Backgrounds_1.Backgrounds.HANDMIXER);
	            AssetLoader_1.AssetLoader.getInstance().stage.addChild(_this._background);
	            _this.mixingScene = _this._typeddb.buildScene8a_handMixingSceneArmature();
	            _this.mixingScene.display.x = 0;
	            _this.mixingScene.display.y = 0;
	            _this.mixingScene.gotoHand();
	            _this.mixingScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S08_ROSA_01_SAA_KSLA_DER_BLANDES_MED_FINGERE_ELLER_HAANDMIXER);
	            _this.startFingerMode();
	        };
	        _this.handleFingerTouch = function (event) {
	            var t;
	            if (t) {
	                switch (t.phase) {
	                    case TouchPhase_1.TouchPhase.BEGAN:
	                        break;
	                    case TouchPhase_1.TouchPhase.ENDED:
	                        break;
	                    case TouchPhase_1.TouchPhase.MOVED:
	                        if (_this.angleSamples.length == 10) {
	                            _this.angleSamples.pop();
	                        }
	                        _this.targetAngle += _this.averageAngle;
	                        _this.spinnerRotation += (_this.targetAngle - _this.spinnerRotation) * 0.2;
	                        Logger_1.Logger.log(_this, "spinner:" + _this.spinnerRotation);
	                        if (_this.previousSpinnerRotation == -1000) {
	                            _this.previousSpinnerRotation = _this.spinnerRotation;
	                        }
	                        var delta = _this.spinnerRotation - _this.previousSpinnerRotation;
	                        _this.spinner.alpha = Math.abs(delta) / 10;
	                        _this.previousSpinnerRotation = _this.spinnerRotation;
	                        var tmpRotation = _this.spinnerRotation;
	                        tmpRotation = tmpRotation % 360;
	                        break;
	                    case TouchPhase_1.TouchPhase.STATIONARY:
	                        break;
	                    case TouchPhase_1.TouchPhase.HOVER:
	                        break;
	                }
	            }
	        };
	        _this.onEnterFrame = function (event) {
	            _this.spinner.alpha = _this.spinner.alpha * 0.95;
	        };
	        _this.onGotoMixer = function (event) {
	            _this.stopFingerMode();
	            _this.startMixerMode();
	            _this.mixerSpeed = 0;
	            _this.mixingScene.gotoMixer();
	            _this.mixer = _this.mixingScene.getMixer().display;
	            _this.mixerButton1 = new MixerButton1ArmButton_1.MixerButton1ArmButton(_this.mixingScene.getMixer().getMixerObj().getMixerButton1Arm().armature);
	            _this.mixerButton2 = new MixerButton2ArmButton_1.MixerButton2ArmButton(_this.mixingScene.getMixer().getMixerObj().getMixerButton2Arm().armature);
	            _this.mixerButton3 = new MixerButton3ArmButton_1.MixerButton3ArmButton(_this.mixingScene.getMixer().getMixerObj().getMixerButton3Arm().armature);
	            _this.mixerButton1.addListener(ButtonEvent_1.ButtonEvent.CLICKED, _this.onMixerButton1);
	            _this.mixerButton2.addListener(ButtonEvent_1.ButtonEvent.CLICKED, _this.onMixerButton2);
	            _this.mixerButton3.addListener(ButtonEvent_1.ButtonEvent.CLICKED, _this.onMixerButton3);
	            _this.nextButton = new NextArrowButton_1.NextArrowButton(_this.mixingScene.getCloseButton().armature);
	            _this.nextButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, _this.onNextButtonClicked);
	            _this.mixer.addListener("TOUCH", _this.onDragHandler);
	            setTimeout(function () { return _this.onNextButtonClicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	        };
	        _this.onNextButtonClicked = function (event) {
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            _this.stopMixerMode();
	            _this.playOutro();
	        };
	        _this.onMixerButton1 = function (event) {
	            _this.mixerSpeed = 1;
	            _this.mixingScene.getMixer().gotoSpeed1();
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            AudioPlayer_1.AudioPlayer.getInstance().playSound("mixer1");
	        };
	        _this.onMixerButton2 = function (event) {
	            _this.mixerSpeed = 2;
	            _this.mixingScene.getMixer().gotoSpeed2();
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            AudioPlayer_1.AudioPlayer.getInstance().playSound("mixer2");
	        };
	        _this.onMixerButton3 = function (event) {
	            _this.mixerSpeed = 3;
	            _this.mixingScene.getMixer().gotoSpeed3();
	            _this.showSplats();
	            AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	            AudioPlayer_1.AudioPlayer.getInstance().playSound("mixer3");
	        };
	        _this.onDragHandler = function (event) {
	            var t;
	            if (t) {
	                switch (t.phase) {
	                    case TouchPhase_1.TouchPhase.BEGAN:
	                        break;
	                    case TouchPhase_1.TouchPhase.MOVED:
	                        var collide = _this.doesMixerCollideWithBowl();
	                        if (collide) {
	                            if (_this.mixerSpeed > 0) {
	                                if (_this.collisionStarting) {
	                                    _this.wrlwrlId = Math.floor(Math.random() * 3 + 1);
	                                    AudioPlayer_1.AudioPlayer.getInstance().playSound("mixerkant3");
	                                }
	                                _this.mixingScene.getWRLRLRLR()["gotoLoop" + _this.wrlwrlId]();
	                            }
	                            _this.collisionStarting = false;
	                        }
	                        else {
	                            _this.collisionStarting = true;
	                        }
	                        break;
	                    case TouchPhase_1.TouchPhase.ENDED:
	                        break;
	                }
	            }
	        };
	        _this.proceed = function (event) {
	            _this.mixingScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.PREVIOUS, sceneEvent);
	        };
	        return _this;
	    }
	    Scene_08a_Mixing.prototype.setup = function (typeddb) {
	        this._typeddb = typeddb;
	        AssetLoader_1.AssetLoader.getInstance().loadAdditional("handMixer", this.setupContinued);
	    };
	    Scene_08a_Mixing.prototype.teardown = function () {
	        TweenLite.killDelayedCallsTo(this.showSplats);
	        if (this.mixer) {
	            this.mixer.removeListener("TOUCH", this.onDragHandler);
	        }
	        this.gotoMixerButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onGotoMixer);
	        this.removeListener("ENTER_FRAME", this.onEnterFrame);
	        this.removeListener(TouchEvent_1.TouchEvent.TOUCH, this.handleFingerTouch);
	        if (this.mixer) {
	            this.mixerButton1.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onMixerButton1);
	            this.mixerButton2.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onMixerButton2);
	            this.mixerButton3.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onMixerButton3);
	            this.nextButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onNextButtonClicked);
	        }
	        if (this.mixerButton1) {
	            this.mixerButton1.dispose();
	            this.mixerButton2.dispose();
	            this.mixerButton3.dispose();
	            this.nextButton.dispose();
	        }
	        this.mixingScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	        AssetLoader_1.this.removeChild(this._background);
	        AssetLoader_1.AssetLoader.getInstance().removeTexture(Backgrounds_1.Backgrounds.HANDMIXER, true);
	        AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	    };
	    Scene_08a_Mixing.prototype.startFingerMode = function () {
	        var _this = this;
	        AudioPlayer_1.AudioPlayer.getInstance().playSound("finger");
	        this.spinner = this.mixingScene.getSpinner().display;
	        dragonBones.WorldClock.clock.remove(this.mixingScene.getSpinner().armature);
	        this.averageAngle = 0;
	        this.numberOfSamples = 0;
	        this.angleSamples = new Array();
	        this.spinnerRotation = 0;
	        this.addListener("ENTER_FRAME", this.onEnterFrame);
	        this.addListener(TouchEvent_1.TouchEvent.TOUCH, this.handleFingerTouch);
	        this.gotoMixerButton = new MixerButton1ArmButton_1.MixerButton1ArmButton(this.mixingScene.getHandMixerButtonArm().armature);
	        this.gotoMixerButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onGotoMixer);
	        setTimeout(function () { return _this.onGotoMixer(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	    };
	    Scene_08a_Mixing.prototype.stopFingerMode = function () {
	        this.removeListener("ENTER_FRAME", this.onEnterFrame);
	        this.removeListener(TouchEvent_1.TouchEvent.TOUCH, this.handleFingerTouch);
	        this.gotoMixerButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onGotoMixer);
	    };
	    Scene_08a_Mixing.prototype.startMixerMode = function () {
	        var mixer = this.mixingScene.getMixer().display;
	        this.collisionStarting = true;
	        this.bowlCenter = new PIXI.Point(659, 381);
	    };
	    Scene_08a_Mixing.prototype.stopMixerMode = function () {
	        AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	    };
	    Scene_08a_Mixing.prototype.showSplats = function () {
	        this.mixingScene.getSplats().gotoSplat();
	        var delay = Math.random() * 5 + 5;
	        Logger_1.Logger.log(this, "delay" + delay);
	        TweenLite.delayedCall(Math.random() * 5 + 5, this.showSplats);
	    };
	    Scene_08a_Mixing.prototype.doesMixerCollideWithBowl = function () {
	        if (this.mixerTargetPosition == null) {
	            return false;
	        }
	        var mixer = this.mixingScene.getMixer().display;
	        var mixerGlobal = this.mixerTargetPosition;
	        var rotor1Position = new PIXI.Point(-10, -80);
	        rotor1Position.x = mixerGlobal.x;
	        rotor1Position.y = mixerGlobal.y;
	        var rotor2Position = new PIXI.Point(-5, 50);
	        rotor2Position.x = mixerGlobal.x;
	        rotor2Position.y = mixerGlobal.y;
	        var rotor1GlobalPosition;
	        var rotor2GlobalPosition;
	        return true;
	    };
	    Scene_08a_Mixing.prototype.playOutro = function () {
	        this.mixingScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.proceed, this);
	        this.mixingScene.gotoOuttro();
	    };
	    return Scene_08a_Mixing;
	}(SceneBase_1.SceneBase));
	Scene_08a_Mixing.BOWL_COLLISION_SIZE = 540;
	Scene_08a_Mixing.ROTOR_SIZE = 160;
	Scene_08a_Mixing.INNER_COLLISION_CIRCLE_RADIUS = ((Scene_08a_Mixing.BOWL_COLLISION_SIZE / 2) - (Scene_08a_Mixing.ROTOR_SIZE / 2));
	exports.Scene_08a_Mixing = Scene_08a_Mixing;


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var SceneEvent_1 = __webpack_require__(195);
	var TouchPhase_1 = __webpack_require__(166);
	var Backgrounds_1 = __webpack_require__(198);
	var MainView_1 = __webpack_require__(194);
	var Scene_09_OvenView = (function (_super) {
	    __extends(Scene_09_OvenView, _super);
	    function Scene_09_OvenView() {
	        var _this = _super.call(this) || this;
	        _this.setupContinued = function () {
	            _this._background = PIXI.Sprite.fromFrame(Backgrounds_1.Backgrounds.SCENE8_BG);
	            AssetLoader_1.AssetLoader.getInstance().stage.addChild(_this._background);
	            _this._ovenScene = _this._typeddb.buildScene8b_cakeInOutOvenArmature();
	            _this._ovenScene.display.x = 0;
	            _this._ovenScene.display.y = 0;
	            _this._ovenScene.gotoDefault();
	            _this._ovenScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	            _this._ovenScene.display.addListener("TOUCH", _this.handleTouch);
	            setTimeout(function () { return _this.playOutro(); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	        };
	        _this.handleTouch = function (event) {
	            var touch = event.getTouch(_this._ovenScene.display, TouchPhase_1.TouchPhase.ENDED);
	            if (touch) {
	                switch (_this._ovenScene.armature.animation.lastAnimationName) {
	                    case "default":
	                        _this._ovenScene.gotoIntro();
	                        break;
	                    case "intro":
	                        _this._ovenScene.gotoSetClock();
	                        break;
	                    case "setClock":
	                        _this._ovenScene.gotoPause();
	                        break;
	                    case "ready":
	                        _this.playOutro();
	                        break;
	                }
	            }
	        };
	        _this.proceed = function (event) {
	            _this._ovenScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.proceed, _this);
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	            setTimeout(function () { return _this.emit(SceneEvent_1.SceneEvent.NEXT, sceneEvent); }, 500);
	        };
	        return _this;
	    }
	    Scene_09_OvenView.prototype.setup = function (typeddb) {
	        this._typeddb = typeddb;
	        AssetLoader_1.AssetLoader.getInstance().loadAdditional("Scene8_bg", this.setupContinued);
	    };
	    Scene_09_OvenView.prototype.teardown = function () {
	        this._ovenScene.display.removeListener("TOUCH", this.handleTouch);
	        this._ovenScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	        AssetLoader_1.this.removeChild(this._background);
	        AssetLoader_1.AssetLoader.getInstance().removeTexture(Backgrounds_1.Backgrounds.SCENE8_BG, true);
	    };
	    Scene_09_OvenView.prototype.playOutro = function () {
	        this._ovenScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.proceed, this);
	        this._ovenScene.gotoOuttro();
	    };
	    return Scene_09_OvenView;
	}(SceneBase_1.SceneBase));
	exports.Scene_09_OvenView = Scene_09_OvenView;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundNames_1 = __webpack_require__(164);
	var AudioPlayer_1 = __webpack_require__(163);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var SceneEvent_1 = __webpack_require__(195);
	var Model_1 = __webpack_require__(5);
	var MainView_1 = __webpack_require__(194);
	var Scene_10_WalkView = (function (_super) {
	    __extends(Scene_10_WalkView, _super);
	    function Scene_10_WalkView() {
	        var _this = _super.call(this) || this;
	        _this.playOutro = function (event) {
	            _this._walkScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.playOutro, _this);
	            _this._walkScene.gotoOuttro();
	            switch (Model_1.Model.getInstance().selectedChar) {
	                case Model_1.Model.CHAR_BAMSE:
	                    setTimeout(function () { return _this.proceed(); }, 1000);
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S11_01_BAMSE_SPEAKS_NEJ_EN_LAEKKER_KAGE_DU_HAR_BAGT);
	                    break;
	                case Model_1.Model.CHAR_CHRISTIAN:
	                    setTimeout(function () { return _this.proceed(); }, 1000);
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S11_01_KRISTIAN_SPEAKS_EJ_HVOR_SER_DEN_KAGE_LAEKKER_UD_ER_DEN_TIL_MIG);
	                    break;
	                case Model_1.Model.CHAR_SKAEG:
	                    setTimeout(function () { return _this.proceed(); }, 1000);
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S11_01_SKAEG_SPEAKS_KAGE_TIL_MIG);
	                    break;
	                case Model_1.Model.CHAR_MILLE:
	                    setTimeout(function () { return _this.proceed(); }, 1000);
	                    AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S11_1_MILLE_SPEAKS_HYGGELIGT_DU_KOM);
	                    break;
	            }
	        };
	        return _this;
	    }
	    Scene_10_WalkView.prototype.setup = function (typeddb) {
	        var _this = this;
	        this._typeddb = typeddb;
	        this._walkScene = this._typeddb.buildScene10_walksceneArmature();
	        this._walkScene.display.x = 0;
	        this._walkScene.display.y = 0;
	        this._walkScene.gotoIntro();
	        this._walkScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        this._walkScene.getPlaceholder().display = Model_1.Model.getInstance().cake;
	        AudioPlayer_1.AudioPlayer.getInstance().stopAllSounds();
	        AudioPlayer_1.AudioPlayer.getInstance().playSound(Model_1.Model.MUSIC_ROSA_WALKING, 0, Model_1.Model.VOLUME_MUSIC);
	        this.setShoes();
	        this._walkScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.playOutro, this);
	        setTimeout(function () { return _this.playOutro(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	    };
	    Scene_10_WalkView.prototype.teardown = function () {
	        this._walkScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	    };
	    Scene_10_WalkView.prototype.setShoes = function () {
	        switch (Model_1.Model.getInstance().selectedChar) {
	            case Model_1.Model.CHAR_BAMSE:
	                this._walkScene.getEndShoe1().gotoRed();
	                this._walkScene.getEndShoe1_0().gotoRed();
	                break;
	            case Model_1.Model.CHAR_CHRISTIAN:
	            case Model_1.Model.CHAR_SKAEG:
	                this._walkScene.getEndShoe1().gotoBrown();
	                this._walkScene.getEndShoe1_0().gotoBrown();
	                break;
	            case Model_1.Model.CHAR_MILLE:
	                this._walkScene.getEndShoe1().gotoMille();
	                this._walkScene.getEndShoe1_0().gotoMille();
	                break;
	        }
	    };
	    Scene_10_WalkView.prototype.proceed = function () {
	        var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.NEXT, 0, true);
	        this.emit(SceneEvent_1.SceneEvent.NEXT, sceneEvent);
	    };
	    return Scene_10_WalkView;
	}(SceneBase_1.SceneBase));
	exports.Scene_10_WalkView = Scene_10_WalkView;


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundNames_1 = __webpack_require__(164);
	var AudioPlayer_1 = __webpack_require__(163);
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var ButtonEvent_1 = __webpack_require__(165);
	var SceneEvent_1 = __webpack_require__(195);
	var ReplayButtonButton_1 = __webpack_require__(189);
	var FreeModeButtonButton_1 = __webpack_require__(187);
	var Model_1 = __webpack_require__(5);
	var Logger_1 = __webpack_require__(4);
	var Scene_11_CharThanksView = (function (_super) {
	    __extends(Scene_11_CharThanksView, _super);
	    function Scene_11_CharThanksView() {
	        var _this = _super.call(this) || this;
	        _this.fadeToBlack = function () {
	            _this._thanksScene.gotoFadeToBlack();
	        };
	        _this.showButtons = function () {
	            switch (Model_1.Model.getInstance().selectedChar) {
	                case Model_1.Model.CHAR_CHRISTIAN:
	                case Model_1.Model.CHAR_SKAEG:
	                case Model_1.Model.CHAR_MILLE:
	                    _this._thanksScene.getCaracter().getCaracter().getHead().gotoIdle();
	            }
	            _this._thanksScene.gotoReplay();
	        };
	        _this.onPlayButtonClicked = function (event) {
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.REPLAY_STORY, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.REPLAY_STORY, sceneEvent);
	        };
	        _this.onFreeButtonClicked = function (event) {
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.REPLAY_FREEMODE, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.REPLAY_FREEMODE, sceneEvent);
	        };
	        return _this;
	    }
	    Scene_11_CharThanksView.prototype.setup = function (typeddb) {
	        this._typeddb = typeddb;
	        this.setup_cont();
	    };
	    Scene_11_CharThanksView.prototype.setup_cont = function () {
	        this.backgroundName = "Scene4" + "_" + Model_1.Model.getInstance().getSelectedCharName() + "_bg";
	        Logger_1.Logger.log(this, "getting background:" + this.backgroundName);
	        this._background = PIXI.Sprite.fromFrame(this.backgroundName);
	        AssetLoader_1.this.addChild(this._background);
	        this._thanksScene = this._typeddb.buildScene11_caracterThanksArmature();
	        this._thanksScene.display.x = 0;
	        this._thanksScene.display.y = 0;
	        this._thanksScene.gotoIntro();
	        this._thanksScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        this.replayButton = new ReplayButtonButton_1.ReplayButtonButton(this._thanksScene.getReplayButton().armature);
	        this.freeButton = new FreeModeButtonButton_1.FreeModeButtonButton(this._thanksScene.getFreeModeButton().armature);
	        this.replayButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onPlayButtonClicked);
	        this.freeButton.addListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onFreeButtonClicked);
	        switch (Model_1.Model.getInstance().selectedChar) {
	            case Model_1.Model.CHAR_CHRISTIAN:
	                this._thanksScene.getCaracter().gotoSkaeg();
	                this._thanksScene.getDoorBellBg().gotoSkaeg();
	                TweenLite.delayedCall(2, this.fadeToBlack);
	                TweenLite.delayedCall(3, this.showButtons);
	                AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S11_CHRISTIAN_THANKS);
	                break;
	            case Model_1.Model.CHAR_BAMSE:
	                this._thanksScene.getCaracter().gotoBamse();
	                this._thanksScene.getDoorBellBg().gotoBamse();
	                TweenLite.delayedCall(2, this.fadeToBlack);
	                TweenLite.delayedCall(3, this.showButtons);
	                AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S11_BAMSE_THANKS);
	                break;
	            case Model_1.Model.CHAR_SKAEG:
	                this._thanksScene.getCaracter().gotoSkaeg();
	                this._thanksScene.getDoorBellBg().gotoSkaeg();
	                TweenLite.delayedCall(2, this.fadeToBlack);
	                TweenLite.delayedCall(3, this.showButtons);
	                this._thanksScene.getCaracter().getCaracter().getHead().gotoTalk();
	                AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S11_02_SKAEG_SPEAKS_SKAL_VI_IKKE_SMAGE_PAA_KAGEN);
	                break;
	            case Model_1.Model.CHAR_MILLE:
	                this._thanksScene.getCaracter().gotoMille();
	                this._thanksScene.getDoorBellBg().gotoMille();
	                TweenLite.delayedCall(2, this.fadeToBlack);
	                TweenLite.delayedCall(3, this.showButtons);
	                this._thanksScene.getCaracter().getCaracter().getHead().gotoTalk();
	                AudioPlayer_1.AudioPlayer.getInstance().playSound(SoundNames_1.SoundNames.S11_2_MILLE_SPEAKS_MEGASJOV_KAGE);
	                break;
	        }
	    };
	    Scene_11_CharThanksView.prototype.teardown = function () {
	        this.replayButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onPlayButtonClicked);
	        this.freeButton.removeListener(ButtonEvent_1.ButtonEvent.CLICKED, this.onFreeButtonClicked);
	        this.replayButton.dispose();
	        this.freeButton.dispose();
	        this._thanksScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	    };
	    return Scene_11_CharThanksView;
	}(SceneBase_1.SceneBase));
	exports.Scene_11_CharThanksView = Scene_11_CharThanksView;


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var AssetLoader_1 = __webpack_require__(3);
	var SceneBase_1 = __webpack_require__(197);
	var ButtonEvent_1 = __webpack_require__(165);
	var SceneEvent_1 = __webpack_require__(195);
	var NextArrowButton_1 = __webpack_require__(188);
	var ReplayButtonButton_1 = __webpack_require__(189);
	var FreeModeButtonButton_1 = __webpack_require__(187);
	var Model_1 = __webpack_require__(5);
	var MainView_1 = __webpack_require__(194);
	var Logger_1 = __webpack_require__(4);
	var Scene_12_FreeModePresentView = (function (_super) {
	    __extends(Scene_12_FreeModePresentView, _super);
	    function Scene_12_FreeModePresentView() {
	        var _this = _super.call(this) || this;
	        _this.afterIntro = function (event) {
	            Logger_1.Logger.log(_this, "afterIntro");
	            _this._presentScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.afterIntro, _this);
	            _this.setPolaroidImages();
	            setTimeout(function () { return _this.onPlayButtonClicked(null); }, MainView_1.MainView.DELAY_TEST_NEXT_SCENE);
	        };
	        _this.onPlayButtonClicked = function (event) {
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.REPLAY_STORY, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.REPLAY_STORY, sceneEvent);
	        };
	        _this.onFreeButtonClicked = function (event) {
	            var sceneEvent = new SceneEvent_1.SceneEvent(SceneEvent_1.SceneEvent.REPLAY_FREEMODE, 0, true);
	            _this.emit(SceneEvent_1.SceneEvent.REPLAY_FREEMODE, sceneEvent);
	        };
	        _this.onCameraButtonClicked = function (event) {
	            var i = 1;
	            _this.setTextureOnPolariod("");
	            _this._presentScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, _this.onShootAnimCompleted, _this);
	            _this._presentScene.gotoShoot();
	        };
	        _this.onNextButtonClicked = function (event) {
	            _this._presentScene.gotoButton();
	        };
	        _this.onShootAnimCompleted = function (event) {
	            _this._presentScene.armature.eventDispatcher.removeEvent(dragonBones.EventObject.COMPLETE, _this.onShootAnimCompleted, _this);
	            _this.takeSnapShot();
	            TweenLite.delayedCall(1, _this.showReplayButtons);
	        };
	        return _this;
	    }
	    Scene_12_FreeModePresentView.prototype.setup = function (typeddb) {
	        this._typeddb = typeddb;
	        this.setup_cont();
	    };
	    Scene_12_FreeModePresentView.prototype.setup_cont = function () {
	        this._presentScene = this._typeddb.buildScene12_freemodeArmature();
	        this._presentScene.getPlaceholder().display = Model_1.Model.getInstance().cake;
	        this._presentScene.display.x = 0;
	        this._presentScene.display.y = 0;
	        this._presentScene.gotoIntro();
	        this._presentScene.show(AssetLoader_1.AssetLoader.getInstance().stage);
	        this.setPolaroidImages();
	        this.replayButton = new ReplayButtonButton_1.ReplayButtonButton(this._presentScene.getReplayButton().armature);
	        this.freeButton = new FreeModeButtonButton_1.FreeModeButtonButton(this._presentScene.getFreeModeButton().armature);
	        this.cameraButton = new FreeModeButtonButton_1.FreeModeButtonButton(this._presentScene.getCamButton().armature);
	        this.nextButton = new NextArrowButton_1.NextArrowButton(this._presentScene.getNextArrow().armature);
	        this.replayButton.on(ButtonEvent_1.ButtonEvent.CLICKED, this.onPlayButtonClicked);
	        this.freeButton.on(ButtonEvent_1.ButtonEvent.CLICKED, this.onFreeButtonClicked);
	        this.cameraButton.on(ButtonEvent_1.ButtonEvent.CLICKED, this.onCameraButtonClicked);
	        this.nextButton.on(ButtonEvent_1.ButtonEvent.CLICKED, this.onNextButtonClicked);
	        Logger_1.Logger.log(this, "gotoIntro");
	        this._presentScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.afterIntro, this);
	        this._presentScene.gotoIntro();
	    };
	    Scene_12_FreeModePresentView.prototype.setPolaroidImages = function () {
	        Logger_1.Logger.log(this, "setPolaroidImages");
	        if (Model_1.Model.getInstance().snapShots[0] != null) {
	            var form = new PIXI.Sprite();
	            form.addChild(Model_1.Model.getInstance().snapShots[0]);
	            this._presentScene.getPolaorid0().get_placeholder().display = form;
	        }
	        if (Model_1.Model.getInstance().snapShots[1] != null) {
	            var smag = new PIXI.Sprite();
	            smag.addChild(Model_1.Model.getInstance().snapShots[1]);
	            this._presentScene.getPolaorid1().get_placeholder().display = smag;
	        }
	        if (Model_1.Model.getInstance().snapShots[2] != null) {
	            var farve = new PIXI.Sprite();
	            farve.addChild(Model_1.Model.getInstance().snapShots[2]);
	            this._presentScene.getPolaorid2().get_placeholder().display = farve;
	        }
	        this._presentScene.getPolaorid0().gotoSmag();
	        this._presentScene.getPolaorid1().gotoForm();
	        this._presentScene.getPolaorid2().gotoFarve();
	    };
	    Scene_12_FreeModePresentView.prototype.setTextureOnPolariod = function (id) {
	        this._presentScene.getShootPicture().gotoDefault();
	        this._presentScene.getShootPicture().getPolaoridImg().get_placeholder().display.addChild(this._typeddb.buildDefaultCakeArmArmature().display);
	        this._presentScene.getShootPicture().getPolaoridImg().gotoFreemode();
	        this._presentScene.getShootPicture().gotoAnimation();
	    };
	    Scene_12_FreeModePresentView.prototype.showReplayButtons = function () {
	        this._presentScene.gotoButton();
	    };
	    Scene_12_FreeModePresentView.prototype.takeSnapShot = function () {
	        Logger_1.Logger.log(this, "Scene_12_FreeModePresentView takeSnapShot");
	    };
	    Scene_12_FreeModePresentView.prototype.teardown = function () {
	        Logger_1.Logger.log(this, "Scene_12_FreeModePresentView teardown");
	        this.replayButton.off(ButtonEvent_1.ButtonEvent.CLICKED, this.onPlayButtonClicked);
	        this.freeButton.off(ButtonEvent_1.ButtonEvent.CLICKED, this.onFreeButtonClicked);
	        this.cameraButton.off(ButtonEvent_1.ButtonEvent.CLICKED, this.onFreeButtonClicked);
	        this.nextButton.off(ButtonEvent_1.ButtonEvent.CLICKED, this.onFreeButtonClicked);
	        this._presentScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.onShootAnimCompleted, this);
	        this._presentScene.armature.eventDispatcher.addEvent(dragonBones.EventObject.COMPLETE, this.afterIntro, this);
	        this.replayButton.dispose();
	        this.freeButton.dispose();
	        this.cameraButton.dispose();
	        this.nextButton.dispose();
	        this._presentScene.remove(AssetLoader_1.AssetLoader.getInstance().stage);
	    };
	    Scene_12_FreeModePresentView.copyStageAsBitmapData = function (scl) {
	        if (scl === void 0) { scl = 1.0; }
	        Logger_1.Logger.log(this, "Scene_12_FreeModePresentView copyStageAsBitmapData");
	        var outBmp;
	        return outBmp;
	    };
	    Scene_12_FreeModePresentView.saveBitmap = function (bmd) {
	        Logger_1.Logger.log(this, "Scene_12_FreeModePresentView saveBitmap");
	    };
	    return Scene_12_FreeModePresentView;
	}(SceneBase_1.SceneBase));
	exports.Scene_12_FreeModePresentView = Scene_12_FreeModePresentView;


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Logger_1 = __webpack_require__(4);
	var Button = (function (_super) {
	    __extends(Button, _super);
	    function Button() {
	        var _this = _super.call(this) || this;
	        _this.interactive = true;
	        _this.buttonMode = true;
	        return _this;
	    }
	    Button.prototype.addTexture = function (texture) {
	    };
	    Button.prototype.dispose = function () {
	        Logger_1.Logger.log(this, "Button dispose() this == " + this);
	    };
	    return Button;
	}(PIXI.Sprite));
	exports.Button = Button;


/***/ },
/* 217 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundEvent = (function (_super) {
	    __extends(SoundEvent, _super);
	    function SoundEvent(type, cancelable) {
	        if (cancelable === void 0) { cancelable = false; }
	        return _super.call(this, type) || this;
	    }
	    return SoundEvent;
	}(Event));
	SoundEvent.SOUND = "sound";
	exports.SoundEvent = SoundEvent;


/***/ },
/* 218 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var SoundEventManager = (function (_super) {
	    __extends(SoundEventManager, _super);
	    function SoundEventManager() {
	        var _this = _super.call(this) || this;
	        if (SoundEventManager._instance) {
	            throw new Error("Singleton already constructed!");
	        }
	        return _this;
	    }
	    SoundEventManager.getInstance = function () {
	        if (!SoundEventManager._instance) {
	            SoundEventManager._instance = new SoundEventManager();
	        }
	        return SoundEventManager._instance;
	    };
	    return SoundEventManager;
	}(PIXI.utils.EventEmitter));
	exports.SoundEventManager = SoundEventManager;


/***/ }
/******/ ]);
//# sourceMappingURL=debug/main.map